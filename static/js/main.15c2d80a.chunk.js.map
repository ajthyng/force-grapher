{"version":3,"sources":["components/Legend/Legend.js","util/Subject.js","util/NodeManager.js","util/Graph.js","util/Network.js","hooks/useEvent.js","components/SystemsGraph/SystemsGraph.js","util/FileManager.js","components/CommandBar/CommandBar.js","components/SystemForm/ConnectionReadWrite.js","components/SystemForm/Connection.js","components/SystemForm/SystemType.js","components/SystemForm/SystemFormView.js","components/SystemForm/SystemForm.js","components/NodeDetail/NodeDetailView.js","components/NodeDetail/NodeDetail.js","components/Loading/Loading.js","App.js","index.js"],"names":["LegendContainer","styled","div","_templateObject","LegendIcon","i","_templateObject2","OnCampus","attrs","props","className","_templateObject3","External","_templateObject4","Cloud","_templateObject5","NodeContainer","_templateObject6","Label","span","_templateObject7","Node","Icon","icon","react_default","a","createElement","label","EdgeContainer","_templateObject8","EdgeStyle","_templateObject9","_ref","dashed","_ref2","color","EdgeStyleContainer","_templateObject10","Edge","Legend","Legend_Node","Legend_Edge","_handlers","Subject","subscribe","event","handler","push","unsubscribe","filter","func","next","_len","arguments","length","args","Array","_key","forEach","apply","Object","freeze","NodeManager","_get","key","defaultValue","JSON","parse","localStorage","getItem","_set","value","setItem","stringify","getEdges","getNodesObject","saveUploadedData","edges","nodes","getNodes","keys","reduce","acc","cur","_NodeManager","Graph","fixEdges","oldEdges","objectSpread","edgeKeys","didFix","nodeEdges","currentEdgeID","edge","node","otherEdges","otherEdgeIndex","findIndex","splice","updateNodePosition","asyncToGenerator","regenerator_default","mark","_callee","x","y","wrap","_context","prev","sent","position","abrupt","stop","_x","this","_ref3","_callee2","_edges","_fixEdges","_context2","_ref4","_callee3","_context3","setEdges","_ref5","_callee4","_context4","_x2","setNodes","_ref6","_callee5","_context5","_x3","addNode","_ref7","_callee6","_nodes","_context6","id","Error","makeEdges","_x4","addEdge","_ref8","_callee7","node1","node2","data","_context7","isArray","addDirectedEdge","_x5","_x6","_x7","_ref9","_callee8","node2TargetID","_context8","_ref10","_x8","_x9","_x10","removeDirectedEdge","_ref11","_callee9","_context9","_ref12","_x11","_x12","removeEdge","_ref13","_callee10","_context10","_ref14","_x13","_x14","makeNode","_ref16","_callee11","_ref15","connections","connectionKeys","previousEdges","removeEdges","_context11","map","item","uuid","get","index","remove","info","concat","type","read","write","existingEdgeIndex","text","_x15","_ref17","_callee12","_loop","cleanup","_context13","prevEdge","_context12","find","_ref18","delegateYield","differenceby","_x16","_Graph","Network","_options","_container","_network","makeData","DataSet","builder","withEdges","withNodes","withOptions","options","inContainer","element","build","VisNetwork","once","fit","animation","duration","easingFunction","network","setData","_Network","useEvent","useEffect","systemsReducer","state","action","buildGraphData","getLinkColor","getArrowDirection","graphData","shape","shapeProperties","size","face","code","getShape","name","font","strokeWidth","strokeColor","shadow","enabled","nodeId","from","to","smooth","roundness","hover","highlight","dashes","arrows","SystemsGraph","_useReducer","useReducer","_useReducer2","slicedToArray","systems","systemsDispatch","_useState","useState","_useState2","activeNode","setActiveNode","graphContainer","useRef","graph","updateGraph","displayNodeDetails","handleNodeSelect","useCallback","params","current","isCluster","matchingNode","off","on","start","Date","systemGraph","autoResize","interaction","hoverConnectedEdges","physics","console","log","document","addEventListener","e","preventDefault","Fragment","style","overflow","height","ref","Legend_Legend","handleFile","reader","FileReader","readAsBinaryString","target","files","onloadend","result","CommandBar","items","iconProps","iconName","onClick","setAttribute","display","click","uploadFile","filename","encodeURIComponent","dayjs","format","body","appendChild","removeChild","downloadFile","CommandBar_CommandBar","canChange","nextPath","nextValue","currentRead","currentWrite","ConnectionReadWrite","onChange","Stack","marginRight","marginTop","verticalAlign","tokens","childrenGap","Checkbox","checked","ConnectionContainer","Connection_templateObject","Connection","handleRemove","edit","addNodeForm","nodeFormErrors","setNodeFormErrors","existingSystems","updateNodeForm","selectedTarget","selectedType","selectedRead","selectedWrite","targetError","typeError","path","IconButton","Dropdown","placeholder","errorMessage","selectedKey","errors","ConnectionReadWrite_ConnectionReadWrite","SystemType","React","memo","required","prevProps","nextProps","keysUnchanged","errorUnchanged","SystemFormView","addConnection","TextField","onGetErrorMessage","newSystem","String","toLowerCase","some","department","url","URL","err","message","checkURL","multiline","rows","description","conn","cloneElement","renderConnections","ActionButton","makeConnections","system","connectionType","connectedTo","addNodeReducer","addNodeState","unset","formState","set","connectionReducer","toConsumableArray","Connection_Connection","dispatch","getSystems","sort","b","validate","SystemForm","setEdit","_useState3","_useState4","isOpen","setIsOpen","_useState5","_useState6","setExistingSystems","_useState7","_useState8","_useReducer3","_useReducer4","connDispatch","resetForm","resetConnections","_Network$build","getConnectedNodes","connectedNodes","includes","makeFormState","submitSystem","_node","broadcastNodeSave","dismiss","Panel","headerText","onDismiss","isFooterAtBottom","onRenderFooterContent","horizontal","horizontalAlign","DefaultButton","PrimaryButton","PanelType","medium","SystemFormView_SystemFormView","NodeDetailView","Text","textDecoration","variant","href","CustomPanel","NodeDetail_templateObject","readWriteStatus","NodeDetail","setNode","editSystem","deselectActiveNode","NodeDetail_Connection","parseConnections","handleEdit","onRenderHeader","marginLeft","marginBottom","isLightDismiss","customNear","customWidth","NodeDetail_NodeDetailView","cubeMove","keyframes","Loading_templateObject","cubeCSS","Loading_templateObject2","css","Loading_templateObject3","Loading_templateObject4","Loading_templateObject5","Page","App_templateObject","App","class","CommandBar_CommandBar_CommandBar","SystemsGraph_SystemsGraph","SystemForm_SystemForm","NodeDetail_NodeDetail","initializeIcons","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.15c2d80a.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst LegendContainer = styled.div`\n  transform: scale(0.3) translate3d(-392px, 450px, 0);\n  position: absolute;\n  bottom: 12px;\n  left: 12px;\n  width: 300px;\n  border: solid 2px #808080;\n  border-radius: 3px;\n  background-color: #e8e3db;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  display: flex;\n  padding: 12px;\n\n  @media only screen and (max-width: 767px) {\n    display: none;\n  }\n\n  transition: transform 300ms ease-in-out;\n\n  &:hover {\n    transform: scale(1) translate3d(0, 0, 0);\n  }\n`\n\nconst LegendIcon = styled.i`\n  color: white;\n  font-size: 60px;\n  text-shadow: 2px 2px 4px #808080;\n  margin: 8px;\n  min-width: 60px;\n`\n\nconst OnCampus = styled(LegendIcon).attrs(props => ({ className: 'ion-md-star' }))``\nconst External = styled(LegendIcon).attrs(props => ({ className: 'ion-md-square' }))``\nconst Cloud = styled(LegendIcon).attrs(props => ({ className: 'ion-md-cloud' }))``\n\nconst NodeContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`\n\nconst Label = styled.span`\n  color: #363534;\n  font-size: 18px;\n`\n\nconst Node = props => {\n  const Icon = props.icon\n  return (\n    <NodeContainer>\n      <Icon />\n      <Label>{props.label}</Label>\n    </NodeContainer>\n  )\n}\n\nconst EdgeContainer = styled(NodeContainer)`\n  margin-top: 12px;\n  margin-bottom: 24px;\n`\n\nconst EdgeStyle = styled.div`\n  width: 45px;\n  min-width: 45px;\n  border-top: ${({ dashed }) => dashed ? 'dashed' : 'solid'} ${({ color }) => color} 4px;\n`\n\nconst EdgeStyleContainer = styled.div`\n  width: 60px;\n  min-width: 60px;\n  margin: 8px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst Edge = props => {\n  const { color, label, dashed } = props\n  return (\n    <EdgeContainer>\n      <EdgeStyleContainer>\n        <EdgeStyle color={color} dashed={dashed} />\n      </EdgeStyleContainer>\n      <Label >{label}</Label>\n    </EdgeContainer>\n  )\n}\n\nexport const Legend = props => {\n  return (\n    <LegendContainer>\n      <Node icon={OnCampus} label='On Campus System' />\n      <Node icon={External} label='External System' />\n      <Node icon={Cloud} label='Cloud System' />\n      <Edge color='#005481' dashed label='Built-in Interface' />\n      <Edge color='#9e6614' label='Custom Interface' />\n    </LegendContainer>\n  )\n}\n","const _handlers = {}\n\nexport const Subject = {\n  subscribe (event, handler) {\n    if (!_handlers[event]) _handlers[event] = []\n    _handlers[event].push(handler)\n  },\n  unsubscribe (event, handler) {\n    if (!_handlers[event]) return\n    _handlers[event] = _handlers[event].filter(func => func !== handler)\n  },\n  next (event, ...args) {\n    if (!_handlers[event]) return\n    _handlers[event].forEach(handler => {\n      if (typeof handler === 'function') {\n        handler(...args)\n      }\n    })\n  }\n}\n\nObject.freeze(Subject)\n","const _NodeManager = () => {\n  const _get = (key, defaultValue) => JSON.parse(localStorage.getItem(key)) || defaultValue\n  const _set = (key, value) => localStorage.setItem(key, JSON.stringify(value))\n  const getNodesObject = () => {\n    return _get('_nodes', {})\n  }\n\n  const getNodes = () => {\n    const nodes = _get('_nodes', {})\n    const nodeKeys = Object.keys(nodes)\n\n    return nodeKeys.reduce((acc, cur) => {\n      acc.push(nodes[cur])\n      return acc\n    }, [])\n  }\n\n  const getEdges = () => {\n    return _get('_edges', {})\n  }\n\n  const saveUploadedData = ({ edges, nodes }) => {\n    _set('_edges', edges)\n    _set('_nodes', nodes)\n  }\n\n  return {\n    getEdges,\n    getNodesObject,\n    saveUploadedData,\n    getNodes\n  }\n}\n\nexport const NodeManager = _NodeManager()\n","import get from 'lodash.get'\nimport differenceby from 'lodash.differenceby'\nimport uuid from 'uuid/v4'\n\nconst shouldFixEdges = true\n\nconst _Graph = () => {\n  const _get = (key, defaultValue) => JSON.parse(localStorage.getItem(key)) || defaultValue\n  const _set = (key, value) => localStorage.setItem(key, JSON.stringify(value))\n\n  const fixEdges = oldEdges => {\n    const edges = { ...oldEdges }\n    const edgeKeys = Object.keys(edges)\n    let didFix = false\n\n    edgeKeys.forEach(key => {\n      const nodeEdges = edges[key]\n      const currentEdgeID = key\n      nodeEdges.forEach(edge => {\n        if (edge.node === key) return\n        const otherEdges = edges[edge.node]\n        const otherEdgeIndex = otherEdges && otherEdges.findIndex(edge => edge.node === currentEdgeID)\n        if (otherEdgeIndex >= 0) {\n          otherEdges.splice(otherEdgeIndex, 1)\n          if (!didFix) didFix = true\n        }\n      })\n\n      if (edges.length <= 0) delete nodeEdges[key]\n    })\n\n    return { edges, didFix }\n  }\n\n  const updateNodePosition = async ({ node, x, y }) => {\n    const nodes = await _get('_nodes', {})\n    if (nodes[node]) {\n      nodes[node].position = {\n        x,\n        y\n      }\n    }\n    return _set('_nodes', nodes)\n  }\n\n  const getEdges = async () => {\n    if (shouldFixEdges) {\n      const _edges = await _get('_edges', {})\n      const { didFix, edges } = fixEdges(_edges)\n      if (didFix) {\n        await _set('_edges', edges)\n      }\n    }\n    return _get('_edges', {})\n  }\n\n  const getNodes = async () => {\n    return _get('_nodes', {})\n  }\n\n  const setEdges = async (edges) => {\n    return _set('_edges', edges)\n  }\n\n  const setNodes = async (nodes) => {\n    return _set('_nodes', nodes)\n  }\n\n  const addNode = async (node) => {\n    if (!node.id) throw new Error('Nodes must have IDs to be added')\n    const _nodes = await getNodes()\n\n    _nodes[node.id] = node\n\n    await makeEdges(node)\n    await setNodes(_nodes)\n  }\n\n  const addEdge = async (node1, node2, data) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to add edges')\n\n    const _edges = await getEdges()\n\n    if (!Array.isArray(_edges[node1.id])) _edges[node1.id] = []\n\n    await addDirectedEdge(node1, node2, data)\n  }\n\n  const addDirectedEdge = async (node1, node2, data) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to add directed edges')\n\n    const _edges = await getEdges()\n\n    if (!Array.isArray(_edges[node1.id])) _edges[node1.id] = []\n\n    const node2TargetID = _edges[node1.id].findIndex(({ node }) => node === node2.id)\n\n    if (node2TargetID >= 0) {\n      // Replace edge because it exists already\n      _edges[node1.id][node2TargetID] = { node: node2.id, data }\n    } else {\n      // Add edge, it does not exist\n      _edges[node1.id].push({ node: node2.id, data })\n    }\n\n    await setEdges({ ..._edges })\n  }\n\n  const removeDirectedEdge = async (node1, node2) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to remove directed eges')\n\n    const _edges = await getEdges()\n\n    _edges[node1.id] = _edges[node1.id] && _edges[node1.id].filter(({ node }) => node !== node2.id)\n\n    await setEdges(_edges)\n  }\n\n  const removeEdge = async (node1, node2) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to remove edges')\n\n    const _edges = await getEdges()\n\n    _edges[node1.id] = _edges[node1.id] && _edges[node1.id].filter(({ node }) => node !== node2.id)\n\n    await setEdges(_edges)\n  }\n\n  const makeNode = async ({ id, data, connections }) => {\n    let node = null\n    if (id) {\n      const nodes = await getNodes()\n      node = {\n        id,\n        edges: [],\n        previousEdges: nodes[id].edges.map(item => ({ ...item })),\n        data: {\n          ...nodes[id].data,\n          ...data\n        }\n      }\n    } else {\n      node = {\n        id: uuid(),\n        edges: [],\n        data: {\n          ...(data || {})\n        }\n      }\n    }\n\n    const connectionKeys = Object.keys(connections || {})\n    const previousEdges = get(node, 'previousEdges', [])\n\n    if (connectionKeys.length <= 0 && previousEdges.length > 0) {\n      const edges = await getEdges()\n      delete edges[node.id]\n      const removeEdges = []\n      Object.keys(edges).forEach(key => {\n        edges[key].forEach((edge, index) => {\n          if (edge.node === node.id) {\n            removeEdges.push({ key, index })\n          }\n        })\n      })\n      removeEdges.forEach(remove => {\n        edges[remove.key].splice(remove.index, 1)\n      })\n      await setEdges({ ...edges })\n      return node\n    }\n\n    connectionKeys.forEach(key => {\n      const info = get(connections, `${[key]}.connectedTo`, null)\n      if (!info) throw new Error('You cannot make a connection without a target')\n      const type = get(connections, `${[key]}.connectionType`, null)\n      if (!type) throw new Error('You cannot make a connection without a type')\n\n      const read = get(connections, `${[key]}.read`, null)\n      const write = get(connections, `${[key]}.write`, null)\n\n      if (!read && !write) throw new Error('You must specify a read or a write option')\n\n      const data = get(connections, `[${key}].data`, {})\n\n      const existingEdgeIndex = node.edges.findIndex(edge => edge.id === key)\n\n      if (existingEdgeIndex >= 0) {\n        node.edges[existingEdgeIndex] = {\n          id: info.key,\n          data: {\n            ...data,\n            read,\n            write,\n            type: {\n              id: type.key,\n              label: type.text\n            }\n          }\n        }\n      } else {\n        node.edges.push({\n          id: info.key,\n          data: {\n            ...data,\n            read,\n            write,\n            type: {\n              id: type.key,\n              label: type.text\n            }\n          }\n        })\n      }\n    })\n    return node\n  }\n\n  const makeEdges = async (node) => {\n    const edges = get(node, 'edges', [])\n    const previousEdges = get(node, 'previousEdges', [])\n\n    if (edges.length <= 0) return\n\n    for (let i = 0; i < edges.length; i++) {\n      const edge = edges[i]\n\n      const read = get(edge, 'data.read')\n      const write = get(edge, 'data.write')\n\n      const node1 = {\n        id: get(node, 'id')\n      }\n      const node2 = {\n        id: get(edge, 'id')\n      }\n\n      const prevEdge = previousEdges.find(({ id }) => id === edge.id)\n\n      const prev = {\n        read: get(prevEdge, `data.read`, read),\n        write: get(prevEdge, `data.write`, write)\n      }\n\n      if (prev.read && !read) {\n        await removeDirectedEdge(node2, node1)\n      }\n\n      if (prev.write && !write) {\n        await removeDirectedEdge(node1, node2)\n      }\n\n      if (read && write) {\n        await addEdge(node1, node2, get(edge, 'data'))\n      } else if (read) {\n        await addDirectedEdge(node2, node1, get(edge, 'data'))\n      } else if (write) {\n        await addDirectedEdge(node1, node2, get(edge, 'data'))\n      }\n    }\n\n    const cleanup = differenceby(previousEdges, node.edges, 'id')\n\n    if (cleanup.length >= 0) {\n      for (let i = 0; i < cleanup.length; i++) {\n        const edge = cleanup[i]\n\n        const read = get(edge, 'data.read')\n        const write = get(edge, 'data.write')\n\n        const node1 = {\n          id: get(node, 'id')\n        }\n        const node2 = {\n          id: get(edge, 'id')\n        }\n\n        if (read && write) {\n          await removeEdge(node1, node2)\n        } else if (read) {\n          await removeDirectedEdge(node2, node1)\n        } else if (write) {\n          await removeDirectedEdge(node1, node2)\n        }\n      }\n    }\n  }\n\n  return {\n    getNodes,\n    getEdges,\n    addNode,\n    removeEdge,\n    removeDirectedEdge,\n    updateNodePosition,\n    makeNode\n  }\n}\n\nexport const Graph = _Graph()\n","import { Network as VisNetwork, DataSet } from 'vis-network'\nimport { Graph } from './Graph'\n\nconst _Network = () => {\n  let _nodes = []\n  let _edges = []\n  let _options = {}\n  let _container = null\n  let _network = null\n\n  const inContainer = element => {\n    _container = element\n    return builder\n  }\n\n  const withNodes = nodes => {\n    _nodes = nodes\n    return builder\n  }\n\n  const withEdges = edges => {\n    _edges = edges\n    return builder\n  }\n\n  const withOptions = options => {\n    _options = options\n    return builder\n  }\n\n  const makeData = () => {\n    return {\n      nodes: new DataSet(_nodes),\n      edges: new DataSet(_edges)\n    }\n  }\n\n  const build = () => {\n    if (!_network) {\n      _network = new VisNetwork(_container, makeData(), _options)\n      _network.once('afterDrawing', function () {\n        _network.fit({\n          animation: {\n            duration: 600,\n            easingFunction: 'easeInOutQuad'\n          }\n        })\n      })\n    }\n    return {\n      network: _network,\n      setData: ({ nodes, edges }) => {\n        _nodes = nodes\n        _edges = edges\n        _network.setData(makeData())\n      },\n      updateNodePosition: Graph.updateNodePosition,\n      getNodes: () => _nodes,\n      getEdges: () => _edges\n    }\n  }\n\n  const builder = {\n    withEdges,\n    withNodes,\n    withOptions,\n    inContainer,\n    build\n  }\n\n  return builder\n}\n\nexport const Network = _Network()\n","import { useEffect } from 'react'\nimport { Subject } from '../util/Subject'\n\nexport const useEvent = (event, handler) => {\n  useEffect(() => {\n    if (typeof handler !== 'function') return\n    Subject.subscribe(event, handler)\n    return () => Subject.unsubscribe(event, handler)\n  }, [event, handler])\n\n  return value => Subject.next(event, value)\n}\n","import React, { useReducer, useEffect, useCallback, useState, useRef } from 'react'\nimport { Legend } from '../Legend'\nimport { Network, Graph } from '../../util'\nimport { useEvent } from '../../hooks'\nimport get from 'lodash.get'\n\nconst systemsReducer = (state, action) => {\n  switch (action.type) {\n    case 'update':\n      const nodes = action.nodes\n      const edges = action.edges\n      return buildGraphData(nodes, edges)\n    default:\n      return state\n  }\n}\n\nconst getLinkColor = (type) => {\n  switch (type) {\n    case 'custom':\n      return '#005481'\n    case 'builtin':\n      return '#9e6614'\n    default:\n      return '#A0A0A0'\n  }\n}\n\nconst getShape = (type) => {\n  switch (type) {\n    case 'cloud':\n      // Cloud shape\n      return { shape: 'icon', shapeProperties: { size: 25 }, icon: { face: 'Ionicons', code: '\\uf2c9', color: '#FFF' } }\n    case 'external':\n      return { shape: 'icon', shapeProperties: { size: 25 }, icon: { face: 'Ionicons', code: '\\uf381', color: '#FFF' } }\n    case 'oncampus':\n    default:\n      // Square Shape\n      return { shape: 'icon', shapeProperties: { size: 25 }, icon: { face: 'Ionicons', code: '\\uf384', color: '#FFF' } }\n  }\n}\n\nconst getArrowDirection = (edge) => {\n  const read = get(edge, 'data.read')\n  const write = get(edge, 'data.write')\n\n  if (read && write) return 'from, to'\n  return 'to'\n}\n\nconst buildGraphData = (nodes, edges) => {\n  const graphData = {\n    nodes: [],\n    edges: []\n  }\n\n  const nodeKeys = Object.keys(nodes || {})\n  nodeKeys.forEach(key => {\n    const node = nodes[key]\n\n    graphData.nodes.push({\n      id: node.id,\n      type: node.data.type,\n      ...getShape(node.data.type),\n      label: node.data.name,\n      edges: node.edges,\n      font: {\n        color: '#363534',\n        strokeWidth: 2,\n        strokeColor: '#FFFFFF'\n      },\n      shadow: {\n        enabled: true,\n        size: 4,\n        x: 1,\n        y: 1\n      },\n      data: {\n        ...node.data\n      },\n      color: '#FFFFFF',\n      x: get(node, 'position.x'),\n      y: get(node, 'position.y')\n    })\n  })\n\n  const edgeKeys = Object.keys(edges || {})\n  edgeKeys.forEach(nodeId => {\n    const edgeList = edges[nodeId]\n\n    edgeList.forEach(edge => {\n      graphData.edges.push({\n        from: nodeId,\n        to: edge.node,\n        smooth: {\n          enabled: true,\n          type: 'cubizBezier',\n          roundness: 0.15\n        },\n        color: {\n          color: getLinkColor(get(edge, 'data.type.id')),\n          hover: '#501214',\n          highlight: '#501214'\n        },\n        dashes: get(edge, 'data.type.id') === 'custom',\n        type: get(edge, 'data.type', {}),\n        arrows: getArrowDirection(edge, nodeId)\n      })\n    })\n  })\n\n  return graphData\n}\n\nexport const SystemsGraph = () => {\n  const [systems, systemsDispatch] = useReducer(systemsReducer, { nodes: [], edges: [] })\n  const [activeNode, setActiveNode] = useState()\n\n  const graphContainer = useRef()\n  const graph = useRef()\n\n  const updateGraph = async () => {\n    const nodes = await Graph.getNodes()\n    const edges = await Graph.getEdges()\n    systemsDispatch({ type: 'update', nodes, edges })\n  }\n\n  useEffect(() => {\n    updateGraph()\n  }, [])\n\n  const resetActiveNode = () => setActiveNode(null)\n  const displayNodeDetails = useEvent('display-node-details')\n\n  const handleNodeSelect = useCallback(params => {\n    const node = get(params, `nodes[0]`, null)\n    if (node) {\n      if (!graph.current.network.isCluster(node)) {\n        const matchingNode = systems.nodes.find(({ id }) => id === node)\n        if (matchingNode) {\n          setActiveNode(matchingNode)\n        }\n      }\n    }\n  }, [systems.nodes])\n\n  useEffect(() => {\n    if (activeNode) displayNodeDetails(activeNode)\n  }, [activeNode, displayNodeDetails])\n\n  useEvent('save-node-entry', updateGraph)\n  useEvent('deselect-active-node', resetActiveNode)\n\n  useEffect(() => {\n    const options = {\n      autoResize: false,\n      interaction: {\n        hover: true,\n        hoverConnectedEdges: true\n      },\n      physics: {\n        enabled: false\n      }\n    }\n\n    if (!graph.current) {\n      const start = new Date()\n      const systemGraph = Network\n        .inContainer(graphContainer.current)\n        .withEdges(systems.edges)\n        .withNodes(systems.nodes)\n        .withOptions(options)\n        .build()\n\n      console.log(`Network Build Time: ${new Date() - start}ms`)\n      graph.current = systemGraph\n\n      graph.current.network.on('selectNode', handleNodeSelect)\n      graph.current.network.on('dragEnd', event => {\n        if (event.nodes.length > 0) {\n          const node = get(event, 'nodes[0]')\n          const { x, y } = get(event, 'pointer.canvas', {})\n          graph.current.updateNodePosition({\n            node,\n            x,\n            y\n          })\n        }\n      })\n\n      document.addEventListener('contextmenu', e => e.preventDefault(), false)\n    } else {\n      graph.current.network.off('selectNode', handleNodeSelect)\n      graph.current.network.on('selectNode', handleNodeSelect)\n\n      graph.current.setData(systems)\n    }\n  }, [systems, handleNodeSelect])\n\n  return (\n    <>\n      <div style={{ overflow: 'hidden', height: 'calc(100% - 44px)' }} ref={graphContainer} id='graph' />\n      <Legend />\n    </>\n  )\n}\n","import dayjs from 'dayjs'\nimport get from 'lodash.get'\nimport { NodeManager } from './NodeManager'\nimport { Subject } from './Subject'\n\nexport const downloadFile = (filename, data) => {\n  const element = document.createElement('a')\n  element.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(data)}`)\n  element.setAttribute('download', `${filename} - ${dayjs().format('YYYY-MM-DD/THHmmss')}.json`)\n\n  element.style.display = 'none'\n  document.body.appendChild(element)\n  element.click()\n  document.body.removeChild(element)\n}\n\nconst handleFile = (event) => {\n  const reader = new FileReader()\n  reader.readAsBinaryString(event.target.files[0])\n\n  reader.onloadend = async () => {\n    const data = JSON.parse(reader.result)\n    const edges = get(data, 'edges', {})\n    const nodes = get(data, 'nodes', {})\n\n    NodeManager.saveUploadedData({ edges, nodes })\n    Subject.next('save-node-entry')\n  }\n}\n\nexport const uploadFile = () => {\n  const element = document.createElement('input')\n  element.setAttribute('type', 'file')\n  element.setAttribute('accept', '.json')\n\n  element.style.display = 'none'\n  element.addEventListener('change', handleFile)\n  element.click()\n}\n","import React from 'react'\nimport { useEvent } from '../../hooks'\nimport { CommandBar as OfficeCommandBar } from 'office-ui-fabric-react/lib/CommandBar'\nimport { downloadFile, uploadFile } from '../../util/FileManager'\nimport { NodeManager } from '../../util/NodeManager'\n\nexport const CommandBar = props => {\n  const toggleLeftPanel = useEvent('toggle-left-panel')\n\n  const items = [\n    {\n      key: 'addNode',\n      name: 'Add System',\n      iconProps: {\n        iconName: 'Add'\n      },\n      onClick: toggleLeftPanel\n    },\n    {\n      key: 'upload',\n      name: 'Upload',\n      iconProps: {\n        iconName: 'Upload'\n      },\n      onClick: () => {\n        uploadFile()\n      }\n    },\n    {\n      key: 'download',\n      name: 'Download',\n      iconProps: {\n        iconName: 'Download'\n      },\n      onClick: () => {\n        const edges = NodeManager.getEdges()\n        const nodes = NodeManager.getNodesObject()\n\n        const filename = 'TR_Systems'\n        downloadFile(filename, JSON.stringify({ edges, nodes }, null, 2))\n      }\n    }\n  ]\n\n  return (\n    <div>\n      <OfficeCommandBar\n        items={items}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox'\n\nconst canChange = (nextPath, nextValue) => (currentRead, currentWrite) => {\n  if (nextPath === 'read') {\n    return nextValue || currentWrite || false\n  }\n\n  if (nextPath === 'write') {\n    return nextValue || currentRead || false\n  }\n  return false\n}\n\nexport const ConnectionReadWrite = props => {\n  const { read, write, onChange } = props\n\n  return (\n    <Stack style={{ marginRight: 8, marginTop: 8 }} verticalAlign='space-between' tokens={{ childrenGap: 4 }}>\n      <Checkbox checked={read} onChange={(event, value) => {\n        if (canChange('read', value)(read, write)) {\n          onChange('read', value)\n        }\n      }} label='Read' />\n      <Checkbox checked={write} onChange={(event, value) => {\n        if (canChange('write', value)(read, write)) {\n          onChange('write', value)\n        }\n      }} label='Write' />\n    </Stack>\n  )\n}\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown'\nimport { ConnectionReadWrite } from './ConnectionReadWrite'\nimport get from 'lodash.get'\nimport { IconButton } from 'office-ui-fabric-react'\n\nconst ConnectionContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  justify-content: flex-start;\n  padding: 8px;\n  margin-top: 12px;\n  border: 1px solid rgb(138, 136, 134);\n  box-sizing: border-box;\n  border-radius: 1px;\n\n  & > .ms-Dropdown-container {\n    flex: 1;\n    width: 100%;\n    margin-right: 4px;\n  }\n\n  & > .ms-Button--icon {\n    align-self: flex-end;\n  }\n`\n\nexport const Connection = props => {\n  const { handleRemove, id, edit, addNodeForm, nodeFormErrors, setNodeFormErrors, existingSystems, updateNodeForm } = props\n  const selectedTarget = get(addNodeForm, `connections[${id}].connectedTo.key`, null)\n  const selectedType = get(addNodeForm, `connections[${id}].connectionType.key`, null)\n\n  const selectedRead = get(addNodeForm, `connections[${id}].read`, true)\n  const selectedWrite = get(addNodeForm, `connections[${id}].write`, false)\n\n  const targetError = get(nodeFormErrors, `[${id}].target`)\n  const typeError = get(nodeFormErrors, `[${id}].type`)\n\n  useEffect(() => {\n    if (!edit) {\n      updateNodeForm({\n        path: `connections[${id}].read`,\n        value: true\n      })\n    }\n  }, [updateNodeForm, id, edit])\n\n  return (\n    <ConnectionContainer>\n      <IconButton\n        iconProps={{ iconName: 'ChromeClose' }}\n        onClick={() => {\n          const connection = get(addNodeForm, `connections[${id}]`, null)\n          if (connection) {\n            updateNodeForm({\n              path: `connections[${id}]`,\n              type: 'remove'\n            })\n          }\n          handleRemove()\n        }}\n      />\n      <Dropdown\n        label='Connected To'\n        placeholder={`What does this system connect to?`}\n        options={existingSystems}\n        errorMessage={targetError}\n        selectedKey={selectedTarget}\n        onChange={(event, value) => {\n          updateNodeForm({\n            path: `connections[${id}].connectedTo`,\n            value: { key: value.key, text: value.text }\n          })\n          if (`${id}` in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors[id]\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <Dropdown\n        label='Interface'\n        options={[\n          { key: 'builtin', text: 'Built In' },\n          { key: 'custom', text: 'Custom' }\n        ]}\n        placeholder='How does this system connect?'\n        selectedKey={selectedType}\n        errorMessage={typeError}\n        onChange={(event, value) => {\n          updateNodeForm({\n            path: `connections[${id}].connectionType`,\n            value: { key: value.key, text: value.text, color: value.color }\n          })\n          if (`${id}` in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors[id]\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <ConnectionReadWrite\n        read={selectedRead}\n        write={selectedWrite}\n        onChange={(path, value) => {\n          updateNodeForm({\n            path: `connections[${id}].${path}`,\n            value\n          })\n        }}\n      />\n    </ConnectionContainer>\n  )\n}\n","import React from 'react'\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown'\n\nconst areEqual = (prevProps, nextProps) => {\n  const keysUnchanged = prevProps.selectedKey === nextProps.selectedKey\n  const errorUnchanged = prevProps.errorMessage === nextProps.errorMessage\n  return keysUnchanged && errorUnchanged\n}\n\nexport const SystemType = React.memo(props => {\n  const { selectedKey, onChange, required, errorMessage } = props\n\n  return (\n    <Dropdown\n      required={required}\n      label='System Type'\n      options={[\n        { key: 'oncampus', text: 'On Campus' },\n        { key: 'cloud', text: 'Cloud' },\n        { key: 'external', text: 'External' }\n      ]}\n      errorMessage={errorMessage}\n      placeholder='Where does this system live?'\n      selectedKey={selectedKey}\n      onChange={onChange}\n    />\n  )\n}, areEqual)\n","import React from 'react'\nimport { TextField } from 'office-ui-fabric-react/lib/TextField'\nimport { ActionButton } from 'office-ui-fabric-react'\nimport { SystemType } from './SystemType'\n\nconst renderConnections = ({ connections, existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors }) => {\n  return connections.map(conn => React.cloneElement(conn, { existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors }))\n}\n\nconst checkURL = url => {\n  if (!url) return\n  try {\n    const checkedURL = new URL(url)\n    if (checkedURL) return null\n  } catch (err) {\n    return err.message\n  }\n}\n\nexport const SystemFormView = props => {\n  const {\n    nodeFormErrors,\n    existingSystems,\n    setNodeFormErrors,\n    addNodeForm,\n    updateNodeForm,\n    connections,\n    addConnection,\n    edit\n  } = props\n  return (\n    <>\n      <TextField\n        label='Name'\n        placeholder='Choose a name'\n        errorMessage={nodeFormErrors.name}\n        required\n        onGetErrorMessage={(value => {\n          const newSystem = String(value).toLowerCase()\n          const nameExists = existingSystems.some(({ text }) => String(text).toLowerCase() === newSystem)\n          if (nameExists && !edit) {\n            setNodeFormErrors({\n              ...nodeFormErrors,\n              name: `The ${value} system already exists`\n            })\n          } else {\n            if (nodeFormErrors.name) {\n              const errors = {\n                ...nodeFormErrors\n              }\n              delete errors.name\n              setNodeFormErrors(errors)\n            }\n          }\n        })}\n        onChange={(event, value) => updateNodeForm({ path: 'name', value })}\n        value={addNodeForm.name || ''}\n      />\n      <SystemType\n        required\n        errorMessage={nodeFormErrors.type}\n        selectedKey={addNodeForm.type || null}\n        onChange={(event, value) => {\n          updateNodeForm({ path: 'type', value: value.key })\n          if ('type' in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors.type\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <TextField\n        label='Department'\n        placeholder='Was this built for another department?'\n        onChange={(event, value) => updateNodeForm({ path: 'department', value })}\n        value={addNodeForm.department || ''}\n      />\n      <TextField\n        label='URL'\n        placeholder='Is there a url to access this system?'\n        onChange={(event, value) => updateNodeForm({ path: 'url', value })}\n        onGetErrorMessage={value => checkURL(value)}\n        value={addNodeForm.url || ''}\n      />\n      <TextField\n        label='Description'\n        placeholder='Enter some information others may want to know about this system'\n        multiline\n        rows={4}\n        onChange={(event, value) => updateNodeForm({ path: 'description', value })}\n        value={addNodeForm.description || ''}\n      />\n      {renderConnections({ connections, existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors })}\n      <ActionButton\n        onClick={addConnection}\n        iconProps={{ iconName: 'Add' }}\n      >\n        Add Connection\n      </ActionButton>\n    </>\n  )\n}\n","import React, { useState, useReducer } from 'react'\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel'\nimport { NodeManager, Graph } from '../../util'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { PrimaryButton, DefaultButton } from 'office-ui-fabric-react'\nimport { useEvent } from '../../hooks'\nimport get from 'lodash.get'\nimport uuid from 'uuid/v4'\nimport set from 'lodash.set'\nimport unset from 'lodash.unset'\nimport { Connection } from './Connection'\nimport { Network } from '../../util/Network'\nimport { SystemFormView } from './SystemFormView'\n\nconst makeConnections = (system, nodes) => {\n  const connections = {}\n  system.edges.forEach(edge => {\n    connections[edge.id] = {\n      read: edge.data.read,\n      write: edge.data.write,\n      connectionType: {\n        key: edge.data.type.id,\n        text: edge.data.type.label\n      },\n      connectedTo: {\n        key: edge.id,\n        text: get(nodes.filter(node => node.id === edge.id), '[0].data.name', '')\n      }\n    }\n  })\n  return connections\n}\n\nconst makeFormState = system => {\n  const { network, getNodes } = Network.build()\n  const nodes = network.getConnectedNodes(system.id)\n\n  const connectedNodes = getNodes().filter(({ id }) => nodes.includes(id))\n\n  const formState = {\n    name: get(system, 'data.name'),\n    id: get(system, 'id'),\n    type: get(system, 'data.type'),\n    department: get(system, 'data.department'),\n    url: get(system, 'data.url'),\n    description: get(system, 'data.description'),\n    connections: makeConnections(system, connectedNodes)\n  }\n  return formState\n}\n\nconst addNodeReducer = (state, action) => {\n  if (action.path === '') return {}\n  const addNodeState = { ...state }\n  switch (action.type) {\n    case 'remove':\n      unset(addNodeState, action.path)\n      return addNodeState\n    case 'edit':\n      return { ...action.formState }\n    default:\n      set(addNodeState, action.path, action.value)\n      return addNodeState\n  }\n}\n\nconst connectionReducer = (connections, action) => {\n  switch (action.type) {\n    case 'add':\n      const id = uuid()\n      return [\n        ...connections,\n        <Connection\n          key={id}\n          id={id}\n          handleRemove={() => action.dispatch({ type: 'remove', id })}\n        />\n      ]\n    case 'remove':\n      return connections.filter(({ key }) => key !== action.id)\n    case 'reset':\n      return []\n    case 'edit':\n      const connKeys = Object.keys(action.connections)\n      return connKeys.map(key => {\n        const id = key\n        const dispatch = get(action, 'dispatch', null)\n\n        if (!dispatch || !id) return null\n\n        return (\n          <Connection\n            edit\n            key={id}\n            id={id}\n            handleRemove={() => dispatch({ type: 'remove', id })}\n          />\n        )\n      }).filter(item => item)\n    default:\n      return connections\n  }\n}\n\nconst getSystems = () => {\n  const nodes = NodeManager.getNodes()\n  return nodes.map(node => ({ key: node.id, text: node.data.name })).sort((a, b) => {\n    if (a.text < b.text) return -1\n    if (a.text > b.text) return 1\n    return 0\n  })\n}\n\nconst validate = (addNodeForm, nodeFormErrors) => {\n  let errors = {}\n  if (nodeFormErrors) {\n    errors = {\n      ...nodeFormErrors\n    }\n  }\n\n  if (!addNodeForm.type) {\n    errors.type = 'A system type must be selected'\n  }\n\n  if (!addNodeForm.name) {\n    errors.name = 'A system name is required'\n  }\n\n  if (addNodeForm.connections) {\n    const keys = Object.keys(addNodeForm.connections || {})\n    keys.forEach(key => {\n      const target = get(addNodeForm, `connections[${key}].connectedTo.key`, null)\n      const type = get(addNodeForm, `connections[${key}].connectionType.key`, null)\n\n      if (!type) set(errors, `[${key}].type`, 'The connection must have a type selected')\n      if (!target) set(errors, `[${key}].target`, 'You must select another system to connect to')\n    })\n  }\n\n  return errors\n}\n\nexport const SystemForm = (props) => {\n  const [edit, setEdit] = useState(false)\n  const [isOpen, setIsOpen] = useState(false)\n  const [addNodeForm, updateNodeForm] = useReducer(addNodeReducer, {})\n  const [existingSystems, setExistingSystems] = useState(getSystems())\n  const [nodeFormErrors, setNodeFormErrors] = useState({})\n  const [connections, connDispatch] = useReducer(connectionReducer, [])\n\n  const toggle = () => setIsOpen(!isOpen)\n  const resetForm = () => updateNodeForm({ path: '', value: {} })\n  const resetConnections = () => connDispatch({ type: 'reset' })\n\n  const handleEditSystem = (system) => {\n    const formState = makeFormState(system)\n    connDispatch({\n      type: 'edit',\n      connections: formState.connections || {},\n      dispatch: connDispatch\n    })\n    updateNodeForm({ type: 'edit', formState })\n    setEdit(true)\n    setIsOpen(true)\n  }\n\n  useEvent('edit-system-panel', handleEditSystem)\n\n  const addConnection = () => {\n    connDispatch({\n      type: 'add',\n      dispatch: connDispatch,\n      existingSystems,\n      addNodeForm,\n      updateNodeForm\n    })\n  }\n\n  const submitSystem = async () => {\n    const errors = validate(addNodeForm, nodeFormErrors)\n    if (Object.keys(errors).length > 0) {\n      setNodeFormErrors({\n        ...nodeFormErrors,\n        ...errors\n      })\n      return\n    }\n\n    const connections = get(addNodeForm, 'connections', {})\n    const data = {\n      description: get(addNodeForm, 'description', ''),\n      name: get(addNodeForm, 'name', ''),\n      type: get(addNodeForm, 'type', ''),\n      url: get(addNodeForm, 'url', ''),\n      department: get(addNodeForm, 'department', '')\n    }\n\n    if (edit) {\n      const node = await Graph.makeNode({ id: addNodeForm.id, connections, data })\n      await Graph.addNode(node)\n    } else {\n      const node = await Graph.makeNode({ connections, data })\n      await Graph.addNode(node)\n    }\n\n    broadcastNodeSave()\n    resetConnections()\n    resetForm()\n  }\n\n  useEvent('toggle-left-panel', toggle)\n  const dismiss = () => {\n    resetForm()\n    resetConnections()\n    setIsOpen(false)\n    setEdit(false)\n  }\n\n  const updateExistingSystems = () => {\n    const systems = getSystems()\n    setExistingSystems(systems)\n  }\n\n  const broadcastNodeSave = useEvent('save-node-entry', updateExistingSystems)\n\n  return (\n    <Panel\n      headerText={`${edit ? 'Edit' : 'Add'} System`}\n      isOpen={isOpen}\n      onDismiss={dismiss}\n      isFooterAtBottom\n      onRenderFooterContent={() => (\n        <Stack horizontal horizontalAlign='space-between' tokens={{ childrenGap: 12 }}>\n          <DefaultButton text='Cancel' onClick={dismiss} />\n          <PrimaryButton text='Save System' onClick={submitSystem} />\n        </Stack>\n      )}\n      type={PanelType.medium}\n    >\n      <SystemFormView\n        edit={edit}\n        existingSystems={existingSystems}\n        nodeFormErrors={nodeFormErrors}\n        setNodeFormErrors={setNodeFormErrors}\n        addNodeForm={addNodeForm}\n        updateNodeForm={updateNodeForm}\n        connections={connections}\n        addConnection={addConnection}\n      />\n    </Panel>\n  )\n}\n","import React from 'react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Text } from 'office-ui-fabric-react/lib/Text'\n\nconst NodeDetailView = props => {\n  const { description, department, url, connections } = props\n  return (\n    <Stack tokens={{ childrenGap: 8 }}>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Description</Text>\n        <Text>{description}</Text>\n      </Stack>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Department</Text>\n        <Text>{department}</Text>\n      </Stack>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>URL</Text>\n        <a href={url}>{url}</a>\n      </Stack>\n      <Stack>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Connections</Text>\n        {connections}\n      </Stack>\n    </Stack>\n  )\n}\n\nexport default NodeDetailView\n","import React, { useState } from 'react'\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel'\nimport { IconButton } from 'office-ui-fabric-react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Text } from 'office-ui-fabric-react/lib/Text'\nimport styled from 'styled-components'\nimport get from 'lodash.get'\nimport { useEvent } from '../../hooks'\nimport { NodeManager } from '../../util'\nimport NodeDetailView from './NodeDetailView'\n\nconst CustomPanel = styled(Panel)`\n  & > .ms-Panel-main {\n    transition: width 300ms ease-in-out;\n  }\n`\nconst parseConnections = (node) => {\n  if (!node) return []\n  const edges = NodeManager.getEdges()\n  const nodes = NodeManager.getNodesObject()\n\n  const edgeKeys = Object.keys(edges || {})\n  return edgeKeys.reduce((acc, cur) => {\n    const nodeEdges = edges[cur]\n    nodeEdges\n      .filter(edge => edge.node === node.id)\n      .forEach(edge => {\n        const to = get(nodes, `[${cur}].data.name`)\n\n        const type = get(edge, 'data.type.label')\n        const read = get(edge, 'data.read')\n        const write = get(edge, 'data.write')\n\n        acc.push(<Connection key={edge.node} to={to} read={read} write={write} type={type} />)\n      })\n    return acc\n  }, [])\n}\n\nconst Connection = ({ to, type, read, write }) => {\n  let readWriteStatus = ''\n  if (read && write) {\n    readWriteStatus = '(Read and Write)'\n  } else if (read) {\n    readWriteStatus = '(Read)'\n  } else if (write) {\n    readWriteStatus = '(Write)'\n  }\n  return (\n    <Text>{to} - {type} {readWriteStatus}</Text>\n  )\n}\n\nexport const NodeDetail = props => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [node, setNode] = useState(null)\n  const displayNode = (node) => {\n    setNode(node)\n    setIsOpen(true)\n  }\n  const closePanel = () => setIsOpen(false)\n\n  useEvent('display-node-details', displayNode)\n  const editSystem = useEvent('edit-system-panel')\n  const deselectActiveNode = useEvent('deselect-active-node')\n  const name = get(node, 'data.name', 'Very Unnamed System')\n  const description = get(node, 'data.description', 'No description has been entered.')\n  const department = get(node, 'data.department', 'No department has been entered.')\n  const url = get(node, 'data.url', `${name} has no url`)\n\n  const connections = parseConnections(node)\n  const handleEdit = () => {\n    editSystem(node)\n    setIsOpen(false)\n    deselectActiveNode()\n  }\n\n  return (\n    <CustomPanel\n      isOpen={isOpen}\n      onDismiss={() => {\n        deselectActiveNode()\n        closePanel()\n      }}\n      onRenderHeader={(props) => {\n        return (\n          <Stack horizontal tokens={{ childrenGap: 12 }}>\n            <Text variant='xLarge' style={{ marginLeft: 16, marginBottom: 12 }}>{props.headerText}</Text>\n            <IconButton\n              iconProps={{\n                iconName: 'Edit'\n              }}\n              onClick={handleEdit}\n            />\n          </Stack>\n        )\n      }}\n      isLightDismiss\n      type={PanelType.customNear}\n      customWidth={400}\n      headerText={name}\n    >\n      <NodeDetailView\n        connections={connections}\n        department={department}\n        description={description}\n        url={url}\n      />\n    </CustomPanel>\n  )\n}\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\n\nconst cubeMove = keyframes`\n    25% { \n      transform: translateX(42px) rotate(-90deg) scale(0.5);\n      -webkit-transform: translateX(42px) rotate(-90deg) scale(0.5);\n    } 50% { \n      transform: translateX(42px) translateY(42px) rotate(-179deg);\n      -webkit-transform: translateX(42px) translateY(42px) rotate(-179deg);\n    } 50.1% { \n      transform: translateX(42px) translateY(42px) rotate(-180deg);\n      -webkit-transform: translateX(42px) translateY(42px) rotate(-180deg);\n    } 75% { \n      transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\n      -webkit-transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\n    } 100% { \n      transform: rotate(-360deg);\n      -webkit-transform: rotate(-360deg);\n    }\n`\n\nconst Spinner = styled.div`\n  margin: 100px auto;\n  width: 40px;\n  height: 40px;\n  align-self: center;\n  justify-self: center;\n  position: relative;\n`\n\nconst cubeCSS = css`\n  background-color: #501214;\n  width: 15px;\n  height: 15px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  \n  -webkit-animation: ${cubeMove} 1.8s infinite ease-in-out;\n  animation: ${cubeMove} 1.8s infinite ease-in-out;\n`\n\nconst CubeOne = styled.div`\n  ${cubeCSS}\n`\nconst CubeTwo = styled.div`\n  ${cubeCSS}\n  animation-delay: -0.9s;\n`\n\nexport const Loading = props => {\n  return (\n    <Spinner>\n      <CubeOne />\n      <CubeTwo />\n    </Spinner>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { SystemsGraph, NodeDetail, SystemForm, CommandBar } from './components'\n\nconst Page = styled.div`\n  background-color: #e8e3db;\n  flex: 1;\n  flex-direction: column;\n  display: flex;\n`\n\nfunction App () {\n  return (\n    <Page>\n      <i class='hidden ion-md-heart' />\n      <CommandBar />\n      <SystemsGraph />\n      <SystemForm />\n      <NodeDetail />\n    </Page>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons'\nimport App from './App'\nimport './index.css'\n\ninitializeIcons()\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  render(<App />, document.getElementById('root'))\n})\n"],"sourceRoot":""}