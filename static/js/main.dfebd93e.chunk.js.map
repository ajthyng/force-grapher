{"version":3,"sources":["components/Legend/Legend.js","util/Subject.js","util/Graph.js","util/Network.js","hooks/useEvent.js","hooks/useEventListener.js","components/SystemsGraph/SystemsGraph.js","util/FileManager.js","components/CommandBar/CommandBar.js","components/SystemForm/ConnectionReadWrite.js","components/SystemForm/Connection.js","components/SystemForm/SystemType.js","components/SystemForm/SystemFormView.js","components/SystemForm/SystemForm.js","components/NodeDetail/NodeDetailView.js","components/NodeDetail/NodeDetail.js","components/Loading/Loading.js","App.js","index.js"],"names":["LegendContainer","styled","div","_templateObject","LegendIcon","i","_templateObject2","OnCampus","attrs","props","className","_templateObject3","External","_templateObject4","Cloud","_templateObject5","NodeContainer","_templateObject6","Label","span","_templateObject7","Node","Icon","icon","react_default","a","createElement","label","EdgeContainer","_templateObject8","EdgeStyle","_templateObject9","_ref","dashed","_ref2","color","EdgeStyleContainer","_templateObject10","Edge","Legend","Legend_Node","Legend_Edge","_handlers","Subject","subscribe","event","handler","push","unsubscribe","filter","func","next","_len","arguments","length","args","Array","_key","forEach","apply","Object","freeze","Graph","_get","key","defaultValue","JSON","parse","localStorage","getItem","_set","value","setItem","stringify","fixEdges","oldEdges","edges","objectSpread","edgeKeys","keys","didFix","nodeEdges","currentEdgeID","edge","node","otherEdges","otherEdgeIndex","findIndex","splice","updateNodePosition","asyncToGenerator","regenerator_default","mark","_callee","x","y","nodes","wrap","_context","prev","sent","position","abrupt","stop","_x","this","updateBatchNodePositions","_ref3","_callee2","existingNodes","_context2","entries","_ref4","_ref5","slicedToArray","_ref5$","_x2","getEdges","_ref6","_callee3","_edges","_fixEdges","_context3","getNodesArray","_ref7","_callee4","_context4","values","getNodes","_ref8","_callee5","_context5","setEdges","_ref9","_callee6","_context6","_x3","setNodes","_ref10","_callee7","_context7","_x4","addNode","_ref11","_callee8","_nodes","_context8","id","Error","makeEdges","_x5","addEdge","_ref12","_callee9","node1","node2","data","_context9","isArray","addDirectedEdge","_x6","_x7","_x8","_ref13","_callee10","node2TargetID","_context10","_ref14","_x9","_x10","_x11","removeDirectedEdge","_ref15","_callee11","_context11","_ref16","_x12","_x13","removeEdge","_ref17","_callee12","_context12","_ref18","_x14","_x15","makeNode","_ref20","_callee13","_ref19","connections","connectionKeys","previousEdges","removeEdges","_context13","get","concat","undefined","map","item","uuid","index","remove","info","type","read","write","existingEdgeIndex","text","_x16","_ref21","_callee14","_loop","cleanup","_context15","prevEdge","_context14","find","_ref22","delegateYield","differenceby","_x17","saveUploadedData","_ref24","_callee15","_ref23","_context16","_x18","_Graph","Network","_options","_container","_network","makeData","DataSet","builder","withEdges","withNodes","withOptions","options","inContainer","element","build","VisNetwork","once","fit","animation","duration","easingFunction","network","setData","_Network","useEvent","useEffect","useEventListener","eventName","window","savedHandler","useRef","current","addEventListener","eventListener","removeEventListener","systemsReducer","state","action","buildGraphData","getLinkColor","getArrowDirection","graphData","shape","shapeProperties","size","face","code","getShape","name","font","strokeWidth","strokeColor","shadow","enabled","nodeId","from","to","smooth","roundness","hover","highlight","dashes","arrows","SystemsGraph","_useReducer","useReducer","_useReducer2","systems","systemsDispatch","_useState","useState","_useState2","activeNode","setActiveNode","lastAdded","selectedNodes","holdingShift","graphContainer","graph","updateGraph","displayNodeDetails","results","selected","getSelectedNodes","unselectAll","selectNodes","handleNodeSelect","useCallback","params","isCluster","matchingNode","handleNodeClick","getNodeAt","pointer","DOM","toConsumableArray","handleNodeDrag","positions","getPositions","handleKeyDown","ctrlKey","keyCode","preventDefault","shiftKey","handleKeyUp","off","on","console","log","focus","scale","start","Date","systemGraph","autoResize","interaction","hoverConnectedEdges","physics","document","e","Fragment","style","overflow","height","ref","Legend_Legend","downloadFile","filename","setAttribute","encodeURIComponent","dayjs","format","display","body","appendChild","click","removeChild","handleFile","reader","FileReader","readAsBinaryString","target","files","onloadend","result","handleSearch","toLowerCase","includes","SearchNodes","SearchBox","placeholder","styles","root","width","alignSelf","onChange","debounce","CommandBar","toggleLeftPanel","querySelector","farItems","onRender","nearItems","iconProps","iconName","onClick","uploadFile","_onClick","CommandBar_CommandBar","items","canChange","nextPath","nextValue","currentRead","currentWrite","ConnectionReadWrite","Stack","marginRight","marginTop","verticalAlign","tokens","childrenGap","Checkbox","checked","ConnectionContainer","Connection_templateObject","Connection","handleRemove","edit","addNodeForm","nodeFormErrors","setNodeFormErrors","existingSystems","updateNodeForm","selectedTarget","selectedType","selectedRead","selectedWrite","targetError","typeError","path","IconButton","Dropdown","errorMessage","selectedKey","errors","ConnectionReadWrite_ConnectionReadWrite","SystemType","React","memo","required","prevProps","nextProps","keysUnchanged","errorUnchanged","SystemFormView","addConnection","loading","TextField","onGetErrorMessage","newSystem","String","some","department","url","URL","err","message","checkURL","multiline","rows","description","conn","cloneElement","renderConnections","ActionButton","makeConnections","system","connectionType","connectedTo","addNodeReducer","addNodeState","unset","formState","set","connectionReducer","Connection_Connection","dispatch","getSystems","sort","b","validate","error","SystemForm","setLoading","_useState3","_useState4","setEdit","_useState5","_useState6","isOpen","setIsOpen","_useState7","_useState8","setExistingSystems","_useState9","_useState10","_useReducer3","_useReducer4","connDispatch","resetForm","resetConnections","_Network$build","getConnectedNodes","connectedNodes","makeFormState","submitSystem","_node","broadcastNodeSave","nodeAdded","dismiss","updateExistingSystems","Panel","headerText","onDismiss","isFooterAtBottom","onRenderFooterContent","horizontal","horizontalAlign","DefaultButton","PrimaryButton","PanelType","medium","SystemFormView_SystemFormView","NodeDetailView","Text","textDecoration","variant","href","rel","CustomPanel","NodeDetail_templateObject","NodeDetail","setNode","editSystem","deselectActiveNode","handleEdit","onRenderHeader","marginLeft","marginBottom","isLightDismiss","customNear","customWidth","NodeDetail_NodeDetailView","cubeMove","keyframes","Loading_templateObject","cubeCSS","Loading_templateObject2","css","Loading_templateObject3","Loading_templateObject4","Loading_templateObject5","Page","App_templateObject","App","CommandBar_CommandBar_CommandBar","SystemsGraph_SystemsGraph","SystemForm_SystemForm","NodeDetail_NodeDetail","initializeIcons","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.dfebd93e.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst LegendContainer = styled.div`\n  transform: scale(0.3) translate3d(-392px, 450px, 0);\n  position: absolute;\n  bottom: 12px;\n  left: 12px;\n  width: 300px;\n  border: solid 2px #808080;\n  border-radius: 3px;\n  background-color: #e8e3db;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  display: flex;\n  padding: 12px;\n\n  @media only screen and (max-width: 767px) {\n    display: none;\n  }\n\n  transition: transform 300ms ease-in-out;\n\n  &:hover {\n    transform: scale(1) translate3d(0, 0, 0);\n  }\n`\n\nconst LegendIcon = styled.i`\n  color: white;\n  font-size: 60px;\n  text-shadow: 2px 2px 4px #808080;\n  margin: 8px;\n  min-width: 60px;\n`\n\nconst OnCampus = styled(LegendIcon).attrs(props => ({ className: 'ion-md-star' }))``\nconst External = styled(LegendIcon).attrs(props => ({ className: 'ion-md-square' }))``\nconst Cloud = styled(LegendIcon).attrs(props => ({ className: 'ion-md-cloud' }))``\n\nconst NodeContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`\n\nconst Label = styled.span`\n  color: #363534;\n  font-size: 18px;\n`\n\nconst Node = props => {\n  const Icon = props.icon\n  return (\n    <NodeContainer>\n      <Icon />\n      <Label>{props.label}</Label>\n    </NodeContainer>\n  )\n}\n\nconst EdgeContainer = styled(NodeContainer)`\n  margin-top: 12px;\n  margin-bottom: 24px;\n`\n\nconst EdgeStyle = styled.div`\n  width: 45px;\n  min-width: 45px;\n  border-top: ${({ dashed }) => dashed ? 'dashed' : 'solid'} ${({ color }) => color} 4px;\n`\n\nconst EdgeStyleContainer = styled.div`\n  width: 60px;\n  min-width: 60px;\n  margin: 8px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst Edge = props => {\n  const { color, label, dashed } = props\n  return (\n    <EdgeContainer>\n      <EdgeStyleContainer>\n        <EdgeStyle color={color} dashed={dashed} />\n      </EdgeStyleContainer>\n      <Label >{label}</Label>\n    </EdgeContainer>\n  )\n}\n\nexport const Legend = props => {\n  return (\n    <LegendContainer>\n      <Node icon={OnCampus} label='On Campus System' />\n      <Node icon={External} label='External System' />\n      <Node icon={Cloud} label='Cloud System' />\n      <Edge color='#005481' dashed label='Custom Interface' />\n      <Edge color='#9e6614' label='Built-in Interface' />\n    </LegendContainer>\n  )\n}\n","const _handlers = {}\n\nexport const Subject = {\n  subscribe (event, handler) {\n    if (!_handlers[event]) _handlers[event] = []\n    _handlers[event].push(handler)\n  },\n  unsubscribe (event, handler) {\n    if (!_handlers[event]) return\n    _handlers[event] = _handlers[event].filter(func => func !== handler)\n  },\n  next (event, ...args) {\n    if (!_handlers[event]) return\n    _handlers[event].forEach(handler => {\n      if (typeof handler === 'function') {\n        handler(...args)\n      }\n    })\n  }\n}\n\nObject.freeze(Subject)\n","import get from 'lodash.get'\nimport differenceby from 'lodash.differenceby'\nimport uuid from 'uuid/v4'\n\nconst shouldFixEdges = true\n\nconst _Graph = () => {\n  const _get = (key, defaultValue) => JSON.parse(localStorage.getItem(key)) || defaultValue\n  const _set = (key, value) => localStorage.setItem(key, JSON.stringify(value))\n\n  const fixEdges = oldEdges => {\n    const edges = { ...oldEdges }\n    const edgeKeys = Object.keys(edges)\n    let didFix = false\n\n    edgeKeys.forEach(key => {\n      const nodeEdges = edges[key]\n      const currentEdgeID = key\n      nodeEdges.forEach(edge => {\n        if (edge.node === key) return\n        const otherEdges = edges[edge.node]\n        const otherEdgeIndex = otherEdges && otherEdges.findIndex(edge => edge.node === currentEdgeID)\n        if (otherEdgeIndex >= 0) {\n          otherEdges.splice(otherEdgeIndex, 1)\n          if (!didFix) didFix = true\n        }\n      })\n\n      if (edges.length <= 0) delete nodeEdges[key]\n    })\n\n    return { edges, didFix }\n  }\n\n  const updateNodePosition = async ({ node, x, y }) => {\n    const nodes = await _get('_nodes', {})\n    if (nodes[node]) {\n      nodes[node].position = {\n        x,\n        y\n      }\n    }\n    return _set('_nodes', nodes)\n  }\n\n  const updateBatchNodePositions = async (nodes) => {\n    const existingNodes = await _get('_nodes', {})\n    Object.entries(nodes).forEach(([node, { x, y }]) => {\n      if (existingNodes[node]) {\n        existingNodes[node].position = { x, y }\n      }\n    })\n    return _set('_nodes', existingNodes)\n  }\n\n  const getEdges = async () => {\n    if (shouldFixEdges) {\n      const _edges = await _get('_edges', {})\n      const { didFix, edges } = fixEdges(_edges)\n      if (didFix) {\n        await _set('_edges', edges)\n      }\n    }\n    return _get('_edges', {})\n  }\n\n  const getNodesArray = async () => {\n    const nodes = await _get('_nodes', {})\n    return Object.values(nodes)\n  }\n\n  const getNodes = async () => {\n    return _get('_nodes', {})\n  }\n\n  const setEdges = async (edges) => {\n    return _set('_edges', edges)\n  }\n\n  const setNodes = async (nodes) => {\n    return _set('_nodes', nodes)\n  }\n\n  const addNode = async (node) => {\n    if (!node.id) throw new Error('Nodes must have IDs to be added')\n    const _nodes = await getNodes()\n\n    _nodes[node.id] = node\n\n    await makeEdges(node)\n    await setNodes(_nodes)\n  }\n\n  const addEdge = async (node1, node2, data) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to add edges')\n\n    const _edges = await getEdges()\n\n    if (!Array.isArray(_edges[node1.id])) _edges[node1.id] = []\n\n    await addDirectedEdge(node1, node2, data)\n  }\n\n  const addDirectedEdge = async (node1, node2, data) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to add directed edges')\n\n    const _edges = await getEdges()\n\n    if (!Array.isArray(_edges[node1.id])) _edges[node1.id] = []\n\n    const node2TargetID = _edges[node1.id].findIndex(({ node }) => node === node2.id)\n\n    if (node2TargetID >= 0) {\n      // Replace edge because it exists already\n      _edges[node1.id][node2TargetID] = { node: node2.id, data }\n    } else {\n      // Add edge, it does not exist\n      _edges[node1.id].push({ node: node2.id, data })\n    }\n\n    await setEdges({ ..._edges })\n  }\n\n  const removeDirectedEdge = async (node1, node2) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to remove directed eges')\n\n    const _edges = await getEdges()\n\n    _edges[node1.id] = _edges[node1.id] && _edges[node1.id].filter(({ node }) => node !== node2.id)\n\n    await setEdges(_edges)\n  }\n\n  const removeEdge = async (node1, node2) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to remove edges')\n\n    const _edges = await getEdges()\n\n    _edges[node1.id] = _edges[node1.id] && _edges[node1.id].filter(({ node }) => node !== node2.id)\n\n    await setEdges(_edges)\n  }\n\n  const makeNode = async ({ id, data, connections }) => {\n    let node = null\n    if (id) {\n      const nodes = await getNodes()\n      const position = get(nodes, `[${id}].position`, { x: undefined, y: undefined })\n      node = {\n        id,\n        edges: [],\n        previousEdges: nodes[id].edges.map(item => ({ ...item })),\n        position,\n        data: {\n          ...nodes[id].data,\n          ...data\n        }\n      }\n    } else {\n      node = {\n        id: uuid(),\n        edges: [],\n        data: {\n          ...(data || {})\n        }\n      }\n    }\n\n    const connectionKeys = Object.keys(connections || {})\n    const previousEdges = get(node, 'previousEdges', [])\n\n    if (connectionKeys.length <= 0 && previousEdges.length > 0) {\n      const edges = await getEdges()\n      delete edges[node.id]\n      const removeEdges = []\n      Object.keys(edges).forEach(key => {\n        edges[key].forEach((edge, index) => {\n          if (edge.node === node.id) {\n            removeEdges.push({ key, index })\n          }\n        })\n      })\n      removeEdges.forEach(remove => {\n        edges[remove.key].splice(remove.index, 1)\n      })\n      await setEdges({ ...edges })\n      return node\n    }\n\n    connectionKeys.forEach(key => {\n      const info = get(connections, `${[key]}.connectedTo`, null)\n      if (!info) throw new Error('You cannot make a connection without a target')\n      const type = get(connections, `${[key]}.connectionType`, null)\n      if (!type) throw new Error('You cannot make a connection without a type')\n\n      const read = get(connections, `${[key]}.read`, null)\n      const write = get(connections, `${[key]}.write`, null)\n\n      if (!read && !write) throw new Error('You must specify a read or a write option')\n\n      const data = get(connections, `[${key}].data`, {})\n\n      const existingEdgeIndex = node.edges.findIndex(edge => edge.id === key)\n\n      if (existingEdgeIndex >= 0) {\n        node.edges[existingEdgeIndex] = {\n          id: info.key,\n          data: {\n            ...data,\n            read,\n            write,\n            type: {\n              id: type.key,\n              label: type.text\n            }\n          }\n        }\n      } else {\n        node.edges.push({\n          id: info.key,\n          data: {\n            ...data,\n            read,\n            write,\n            type: {\n              id: type.key,\n              label: type.text\n            }\n          }\n        })\n      }\n    })\n    return node\n  }\n\n  const makeEdges = async (node) => {\n    const edges = get(node, 'edges', [])\n    const previousEdges = get(node, 'previousEdges', [])\n\n    if (edges.length <= 0) return\n\n    for (let i = 0; i < edges.length; i++) {\n      const edge = edges[i]\n\n      const read = get(edge, 'data.read')\n      const write = get(edge, 'data.write')\n\n      const node1 = {\n        id: get(node, 'id')\n      }\n      const node2 = {\n        id: get(edge, 'id')\n      }\n\n      const prevEdge = previousEdges.find(({ id }) => id === edge.id)\n\n      const prev = {\n        read: get(prevEdge, `data.read`, read),\n        write: get(prevEdge, `data.write`, write)\n      }\n\n      if (prev.read && !read) {\n        await removeDirectedEdge(node2, node1)\n      }\n\n      if (prev.write && !write) {\n        await removeDirectedEdge(node1, node2)\n      }\n\n      if (read && write) {\n        await addEdge(node1, node2, get(edge, 'data'))\n      } else if (read) {\n        await addDirectedEdge(node2, node1, get(edge, 'data'))\n      } else if (write) {\n        await addDirectedEdge(node1, node2, get(edge, 'data'))\n      }\n    }\n\n    const cleanup = differenceby(previousEdges, node.edges, 'id')\n\n    if (cleanup.length >= 0) {\n      for (let i = 0; i < cleanup.length; i++) {\n        const edge = cleanup[i]\n\n        const read = get(edge, 'data.read')\n        const write = get(edge, 'data.write')\n\n        const node1 = {\n          id: get(node, 'id')\n        }\n        const node2 = {\n          id: get(edge, 'id')\n        }\n\n        if (read && write) {\n          await removeEdge(node1, node2)\n        } else if (read) {\n          await removeDirectedEdge(node2, node1)\n        } else if (write) {\n          await removeDirectedEdge(node1, node2)\n        }\n      }\n    }\n  }\n\n  const saveUploadedData = async ({ edges, nodes }) => {\n    _set('_edges', edges)\n    _set('_nodes', nodes)\n  }\n\n  return {\n    getNodes,\n    getEdges,\n    addNode,\n    removeEdge,\n    removeDirectedEdge,\n    updateNodePosition,\n    updateBatchNodePositions,\n    saveUploadedData,\n    getNodesArray,\n    makeNode\n  }\n}\n\nexport const Graph = _Graph()\n","import { Network as VisNetwork, DataSet } from 'vis-network'\nimport { Graph } from './Graph'\n\nconst _Network = () => {\n  let _nodes = []\n  let _edges = []\n  let _options = {}\n  let _container = null\n  let _network = null\n\n  const inContainer = element => {\n    _container = element\n    return builder\n  }\n\n  const withNodes = nodes => {\n    _nodes = nodes\n    return builder\n  }\n\n  const withEdges = edges => {\n    _edges = edges\n    return builder\n  }\n\n  const withOptions = options => {\n    _options = options\n    return builder\n  }\n\n  const makeData = () => {\n    return {\n      nodes: new DataSet(_nodes),\n      edges: new DataSet(_edges)\n    }\n  }\n\n  const build = () => {\n    if (!_network) {\n      _network = new VisNetwork(_container, makeData(), _options)\n      _network.once('afterDrawing', function () {\n        _network.fit({\n          animation: {\n            duration: 600,\n            easingFunction: 'easeInOutQuad'\n          }\n        })\n      })\n    }\n    return {\n      network: _network,\n      setData: ({ nodes, edges }) => {\n        _nodes = nodes\n        _edges = edges\n        _network.setData(makeData())\n      },\n      updateNodePosition: Graph.updateNodePosition,\n      getNodes: () => _nodes,\n      getEdges: () => _edges\n    }\n  }\n\n  const builder = {\n    withEdges,\n    withNodes,\n    withOptions,\n    inContainer,\n    build\n  }\n\n  return builder\n}\n\nexport const Network = _Network()\n","import { useEffect } from 'react'\nimport { Subject } from '../util/Subject'\n\nexport const useEvent = (event, handler) => {\n  useEffect(() => {\n    if (typeof handler !== 'function') return\n    Subject.subscribe(event, handler)\n    return () => Subject.unsubscribe(event, handler)\n  }, [event, handler])\n\n  return value => Subject.next(event, value)\n}\n","import { useRef, useEffect } from 'react'\n\nexport const useEventListener = (eventName, handler, element = window) => {\n  // Create a ref that stores handler\n  const savedHandler = useRef()\n\n  // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n  useEffect(() => {\n    savedHandler.current = handler\n  }, [handler])\n\n  useEffect(\n    () => {\n      // Make sure element supports addEventListener\n      // On\n      const isSupported = element && element.addEventListener\n      if (!isSupported) return\n\n      // Create event listener that calls handler function stored in ref\n      const eventListener = event => savedHandler.current(event)\n\n      // Add event listener\n      element.addEventListener(eventName, eventListener)\n\n      // Remove event listener on cleanup\n      return () => {\n        element.removeEventListener(eventName, eventListener)\n      }\n    },\n    [eventName, element] // Re-run if eventName or element changes\n  )\n}\n","import React, { useReducer, useEffect, useCallback, useState, useRef } from 'react'\nimport { Legend } from '../Legend'\nimport { Network, Graph, Subject } from '../../util'\nimport { useEvent, useEventListener } from '../../hooks'\nimport get from 'lodash.get'\n\nconst systemsReducer = (state, action) => {\n  switch (action.type) {\n    case 'update':\n      const nodes = action.nodes\n      const edges = action.edges\n      return buildGraphData(nodes, edges)\n    default:\n      return state\n  }\n}\n\nconst getLinkColor = (type) => {\n  switch (type) {\n    case 'custom':\n      return '#005481'\n    case 'builtin':\n      return '#9e6614'\n    default:\n      return '#A0A0A0'\n  }\n}\n\nconst getShape = (type) => {\n  switch (type) {\n    case 'cloud':\n      // Cloud shape\n      return { shape: 'icon', shapeProperties: { size: 25 }, icon: { face: 'Ionicons', code: '\\uf2c9', color: '#FFF' } }\n    case 'external':\n      return { shape: 'icon', shapeProperties: { size: 25 }, icon: { face: 'Ionicons', code: '\\uf381', color: '#FFF' } }\n    case 'oncampus':\n    default:\n      // Square Shape\n      return { shape: 'icon', shapeProperties: { size: 25 }, icon: { face: 'Ionicons', code: '\\uf384', color: '#FFF' } }\n  }\n}\n\nconst getArrowDirection = (edge) => {\n  const read = get(edge, 'data.read')\n  const write = get(edge, 'data.write')\n\n  if (read && write) return 'from, to'\n  return 'to'\n}\n\nconst buildGraphData = (nodes, edges) => {\n  const graphData = {\n    nodes: [],\n    edges: []\n  }\n\n  const nodeKeys = Object.keys(nodes || {})\n  nodeKeys.forEach(key => {\n    const node = nodes[key]\n\n    graphData.nodes.push({\n      id: node.id,\n      type: node.data.type,\n      ...getShape(node.data.type),\n      label: node.data.name,\n      edges: node.edges,\n      font: {\n        color: '#363534',\n        strokeWidth: 2,\n        strokeColor: '#FFFFFF'\n      },\n      shadow: {\n        enabled: true,\n        size: 4,\n        x: 1,\n        y: 1\n      },\n      data: {\n        ...node.data\n      },\n      color: '#FFFFFF',\n      x: get(node, 'position.x'),\n      y: get(node, 'position.y')\n    })\n  })\n\n  const edgeKeys = Object.keys(edges || {})\n  edgeKeys.forEach(nodeId => {\n    const edgeList = edges[nodeId]\n\n    edgeList.forEach(edge => {\n      graphData.edges.push({\n        from: nodeId,\n        to: edge.node,\n        smooth: {\n          enabled: true,\n          type: 'cubizBezier',\n          roundness: 0.15\n        },\n        color: {\n          color: getLinkColor(get(edge, 'data.type.id')),\n          hover: '#501214',\n          highlight: '#501214'\n        },\n        dashes: get(edge, 'data.type.id') === 'custom',\n        type: get(edge, 'data.type', {}),\n        arrows: getArrowDirection(edge, nodeId)\n      })\n    })\n  })\n\n  return graphData\n}\n\nexport const SystemsGraph = () => {\n  const [systems, systemsDispatch] = useReducer(systemsReducer, { nodes: [], edges: [] })\n  const [activeNode, setActiveNode] = useState()\n  const lastAdded = useRef()\n  const selectedNodes = useRef([])\n  const holdingShift = useRef(false)\n\n  const graphContainer = useRef()\n  const graph = useRef()\n\n  const updateGraph = async () => {\n    const nodes = await Graph.getNodes()\n    const edges = await Graph.getEdges()\n    systemsDispatch({ type: 'update', nodes, edges })\n  }\n\n  const updateSearchResults = (results) => {\n    if (graph.current.network) {\n      if (results.length <= 0) {\n        const selected = graph.current.network.getSelectedNodes()\n        graph.current.network.unselectAll()\n\n        // Were there nodes selected? Zoom back out.\n        if (selected.length > 0) {\n          graph.current.network.fit({\n            animation: {\n              duration: 300,\n              easingFunction: 'easeInOutQuad'\n            }\n          })\n        }\n        return\n      }\n      graph.current.network.selectNodes(results)\n      graph.current.network.fit({\n        nodes: results,\n        animation: {\n          duration: 300,\n          easingFunction: 'easeInOutQuad'\n        }\n      })\n    }\n  }\n\n  useEffect(() => {\n    updateGraph()\n  }, [])\n\n  const resetActiveNode = () => setActiveNode(null)\n  const displayNodeDetails = useEvent('display-node-details')\n  useEvent('node-search-result', updateSearchResults)\n\n  const handleNodeSelect = useCallback(params => {\n    const node = get(params, `nodes[0]`, null)\n    if (params.nodes.length > 1 || holdingShift) return\n\n    if (node) {\n      if (!graph.current.network.isCluster(node) && !holdingShift.current) {\n        const matchingNode = systems.nodes.find(({ id }) => id === node)\n        if (matchingNode) {\n          setActiveNode(matchingNode)\n        }\n      }\n    }\n  }, [systems.nodes])\n\n  const handleNodeClick = useCallback(params => {\n    const node = graph.current.network.getNodeAt(params.pointer.DOM)\n    if (node) {\n      if (!graph.current.network.isCluster(node) && !holdingShift.current) {\n        const matchingNode = systems.nodes.find(({ id }) => id === node)\n        if (matchingNode) {\n          setActiveNode(matchingNode)\n        }\n      }\n\n      if (holdingShift.current && params.nodes[0]) {\n        const selected = [...selectedNodes.current, params.nodes[0]]\n        selectedNodes.current = selected\n        graph.current.network.selectNodes(selected)\n      }\n    } else {\n      selectedNodes.current = []\n    }\n  }, [systems.nodes])\n\n  const handleNodeDrag = useCallback(event => {\n    if (event.nodes.length > 0) {\n      const positions = graph.current.network.getPositions(event.nodes)\n      Graph.updateBatchNodePositions(positions)\n    }\n  }, [])\n\n  const handleKeyDown = useCallback(event => {\n    if (event.ctrlKey && event.keyCode === 70) {\n      event.preventDefault()\n      Subject.next('focus-search-bar')\n    }\n    if (event.shiftKey && !holdingShift.current) {\n      holdingShift.current = true\n    }\n  }, [holdingShift])\n\n  const handleKeyUp = useCallback(event => {\n    if (!event.shiftKey && holdingShift.current) {\n      holdingShift.current = false\n    }\n  }, [holdingShift])\n\n  useEventListener('keydown', handleKeyDown)\n  useEventListener('keyup', handleKeyUp)\n\n  useEffect(() => {\n    if (activeNode) displayNodeDetails(activeNode)\n  }, [activeNode, displayNodeDetails])\n\n  const updateLastAdded = (node) => {\n    lastAdded.current = node\n  }\n\n  useEvent('save-node-entry', updateGraph)\n  useEvent('deselect-active-node', resetActiveNode)\n  useEvent('node-added', updateLastAdded)\n\n  useEffect(() => {\n    const options = {\n      autoResize: false,\n      interaction: {\n        hover: true,\n        hoverConnectedEdges: true\n      },\n      physics: {\n        enabled: false\n      }\n    }\n\n    if (!graph.current) {\n      const start = new Date()\n      const systemGraph = Network\n        .inContainer(graphContainer.current)\n        .withEdges(systems.edges)\n        .withNodes(systems.nodes)\n        .withOptions(options)\n        .build()\n\n      console.log(`Network Build Time: ${new Date() - start}ms`)\n      graph.current = systemGraph\n\n      graph.current.network.on('selectNode', handleNodeSelect)\n      graph.current.network.on('dragEnd', handleNodeDrag)\n      graph.current.network.on('click', handleNodeClick)\n\n      document.addEventListener('contextmenu', e => e.preventDefault(), false)\n    } else {\n      graph.current.network.off('selectNode')\n      graph.current.network.off('dragEnd')\n      graph.current.network.off('click')\n\n      graph.current.network.on('selectNode', handleNodeSelect)\n      graph.current.network.on('click', handleNodeClick)\n      graph.current.network.on('dragEnd', handleNodeDrag)\n\n      console.log('redrawing')\n      graph.current.setData(systems)\n      if (lastAdded.current) {\n        graph.current.network.focus(lastAdded.current, {\n          scale: 1,\n          animation: {\n            duration: 300,\n            easingFunction: 'easeInOutCubic'\n          }\n        })\n        graph.current.network.selectNodes([lastAdded.current])\n      }\n    }\n  }, [systems, handleNodeClick, handleNodeDrag, handleNodeSelect])\n\n  return (\n    <>\n      <div style={{ overflow: 'hidden', height: 'calc(100% - 44px)' }} ref={graphContainer} id='graph' />\n      <Legend />\n    </>\n  )\n}\n","import dayjs from 'dayjs'\nimport get from 'lodash.get'\nimport { Graph } from './Graph'\nimport { Subject } from './Subject'\n\nexport const downloadFile = (filename, data) => {\n  const element = document.createElement('a')\n  element.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(data)}`)\n  element.setAttribute('download', `${filename} - ${dayjs().format('YYYY-MM-DD/THHmmss')}.json`)\n\n  element.style.display = 'none'\n  document.body.appendChild(element)\n  element.click()\n  document.body.removeChild(element)\n}\n\nconst handleFile = (event) => {\n  const reader = new FileReader()\n  reader.readAsBinaryString(event.target.files[0])\n\n  reader.onloadend = async () => {\n    const data = JSON.parse(reader.result)\n    const edges = get(data, 'edges', {})\n    const nodes = get(data, 'nodes', {})\n\n    Graph.saveUploadedData({ edges, nodes })\n    Subject.next('save-node-entry')\n  }\n}\n\nexport const uploadFile = () => {\n  const element = document.createElement('input')\n  element.setAttribute('type', 'file')\n  element.setAttribute('accept', '.json')\n\n  element.style.display = 'none'\n  element.addEventListener('change', handleFile)\n  element.click()\n}\n","import React, { useEffect } from 'react'\nimport { useEvent } from '../../hooks'\nimport { CommandBar as OfficeCommandBar } from 'office-ui-fabric-react/lib/CommandBar'\nimport { SearchBox } from 'office-ui-fabric-react/lib/SearchBox'\nimport { downloadFile, uploadFile } from '../../util/FileManager'\nimport { Graph, Subject } from '../../util'\nimport debounce from 'lodash.debounce'\nimport get from 'lodash.get'\n\nconst handleSearch = async (event, value) => {\n  const nodes = await Graph.getNodesArray()\n\n  let results = nodes.filter(node => {\n    const name = get(node, 'data.name', '').toLowerCase()\n    return name.includes(value.toLowerCase())\n  }).map(({ id }) => id)\n\n  if (!value) {\n    results = []\n  }\n\n  Subject.next('node-search-result', results)\n}\n\nconst SearchNodes = () => {\n  return (\n    <SearchBox\n      id='search-box-nodes'\n      placeholder='Search'\n      className='searchBox'\n      styles={{\n        root: {\n          width: '250px',\n          alignSelf: 'center'\n        }\n      }}\n      onChange={debounce(handleSearch, 500)}\n    />\n  )\n}\n\nexport const CommandBar = props => {\n  const toggleLeftPanel = useEvent('toggle-left-panel')\n  useEffect(() => {\n    const focusSearch = () => {\n      const searchBox = document.querySelector('#search-box-nodes')\n      searchBox.focus()\n    }\n\n    Subject.subscribe('focus-search-bar', focusSearch)\n  }, [])\n\n  const farItems = [\n    {\n      key: 'search',\n      onRender: SearchNodes\n    }\n  ]\n\n  const nearItems = [\n    {\n      key: 'addNode',\n      name: 'Add System',\n      iconProps: {\n        iconName: 'Add'\n      },\n      onClick: toggleLeftPanel\n    },\n    {\n      key: 'upload',\n      name: 'Upload',\n      iconProps: {\n        iconName: 'Upload'\n      },\n      onClick: () => {\n        uploadFile()\n      }\n    },\n    {\n      key: 'download',\n      name: 'Download',\n      iconProps: {\n        iconName: 'Download'\n      },\n      onClick: async () => {\n        const edges = await Graph.getEdges()\n        const nodes = await Graph.getNodes()\n\n        const filename = 'TR_Systems'\n        downloadFile(filename, JSON.stringify({ edges, nodes }, null, 2))\n      }\n    }\n  ]\n\n  return (\n    <div>\n      <OfficeCommandBar\n        items={nearItems}\n        farItems={farItems}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox'\n\nconst canChange = (nextPath, nextValue) => (currentRead, currentWrite) => {\n  if (nextPath === 'read') {\n    return nextValue || currentWrite || false\n  }\n\n  if (nextPath === 'write') {\n    return nextValue || currentRead || false\n  }\n  return false\n}\n\nexport const ConnectionReadWrite = props => {\n  const { read, write, onChange } = props\n\n  return (\n    <Stack style={{ marginRight: 8, marginTop: 8 }} verticalAlign='space-between' tokens={{ childrenGap: 4 }}>\n      <Checkbox checked={read} onChange={(event, value) => {\n        if (canChange('read', value)(read, write)) {\n          onChange('read', value)\n        }\n      }} label='Read' />\n      <Checkbox checked={write} onChange={(event, value) => {\n        if (canChange('write', value)(read, write)) {\n          onChange('write', value)\n        }\n      }} label='Write' />\n    </Stack>\n  )\n}\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown'\nimport { ConnectionReadWrite } from './ConnectionReadWrite'\nimport get from 'lodash.get'\nimport { IconButton } from 'office-ui-fabric-react'\n\nconst ConnectionContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  justify-content: flex-start;\n  padding: 8px;\n  margin-top: 12px;\n  border: 1px solid rgb(138, 136, 134);\n  box-sizing: border-box;\n  border-radius: 1px;\n\n  & > .ms-Dropdown-container {\n    flex: 1;\n    width: 100%;\n    margin-right: 4px;\n  }\n\n  & > .ms-Button--icon {\n    align-self: flex-end;\n  }\n`\n\nexport const Connection = props => {\n  const { handleRemove, id, edit, addNodeForm, nodeFormErrors, setNodeFormErrors, existingSystems, updateNodeForm } = props\n  const selectedTarget = get(addNodeForm, `connections[${id}].connectedTo.key`, null)\n  const selectedType = get(addNodeForm, `connections[${id}].connectionType.key`, null)\n\n  const selectedRead = get(addNodeForm, `connections[${id}].read`, true)\n  const selectedWrite = get(addNodeForm, `connections[${id}].write`, false)\n\n  const targetError = get(nodeFormErrors, `[${id}].target`)\n  const typeError = get(nodeFormErrors, `[${id}].type`)\n\n  useEffect(() => {\n    if (!edit) {\n      updateNodeForm({\n        path: `connections[${id}].read`,\n        value: true\n      })\n    }\n  }, [updateNodeForm, id, edit])\n\n  return (\n    <ConnectionContainer>\n      <IconButton\n        iconProps={{ iconName: 'ChromeClose' }}\n        onClick={() => {\n          const connection = get(addNodeForm, `connections[${id}]`, null)\n          if (connection) {\n            updateNodeForm({\n              path: `connections[${id}]`,\n              type: 'remove'\n            })\n          }\n          handleRemove()\n        }}\n      />\n      <Dropdown\n        label='Connected To'\n        placeholder={`What does this system connect to?`}\n        options={existingSystems}\n        errorMessage={targetError}\n        selectedKey={selectedTarget}\n        onChange={(event, value) => {\n          updateNodeForm({\n            path: `connections[${id}].connectedTo`,\n            value: { key: value.key, text: value.text }\n          })\n          if (`${id}` in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors[id]\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <Dropdown\n        label='Interface'\n        options={[\n          { key: 'builtin', text: 'Built In' },\n          { key: 'custom', text: 'Custom' }\n        ]}\n        placeholder='How does this system connect?'\n        selectedKey={selectedType}\n        errorMessage={typeError}\n        onChange={(event, value) => {\n          updateNodeForm({\n            path: `connections[${id}].connectionType`,\n            value: { key: value.key, text: value.text, color: value.color }\n          })\n          if (`${id}` in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors[id]\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <ConnectionReadWrite\n        read={selectedRead}\n        write={selectedWrite}\n        onChange={(path, value) => {\n          updateNodeForm({\n            path: `connections[${id}].${path}`,\n            value\n          })\n        }}\n      />\n    </ConnectionContainer>\n  )\n}\n","import React from 'react'\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown'\n\nconst areEqual = (prevProps, nextProps) => {\n  const keysUnchanged = prevProps.selectedKey === nextProps.selectedKey\n  const errorUnchanged = prevProps.errorMessage === nextProps.errorMessage\n  return keysUnchanged && errorUnchanged\n}\n\nexport const SystemType = React.memo(props => {\n  const { selectedKey, onChange, required, errorMessage } = props\n\n  return (\n    <Dropdown\n      required={required}\n      label='System Type'\n      options={[\n        { key: 'oncampus', text: 'On Campus' },\n        { key: 'cloud', text: 'Cloud' },\n        { key: 'external', text: 'External' }\n      ]}\n      errorMessage={errorMessage}\n      placeholder='Where does this system live?'\n      selectedKey={selectedKey}\n      onChange={onChange}\n    />\n  )\n}, areEqual)\n","import React from 'react'\nimport { TextField } from 'office-ui-fabric-react/lib/TextField'\nimport { ActionButton } from 'office-ui-fabric-react'\nimport { SystemType } from './SystemType'\n\nconst renderConnections = ({ connections, existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors }) => {\n  return connections.map(conn => React.cloneElement(conn, { existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors }))\n}\n\nconst checkURL = url => {\n  if (!url) return\n  try {\n    const checkedURL = new URL(url)\n    if (checkedURL) return ''\n  } catch (err) {\n    return err.message\n  }\n}\n\nexport const SystemFormView = props => {\n  const {\n    nodeFormErrors,\n    existingSystems,\n    setNodeFormErrors,\n    addNodeForm,\n    updateNodeForm,\n    connections,\n    addConnection,\n    edit,\n    loading\n  } = props\n  if (loading) return null\n  return (\n    <>\n      <TextField\n        label='Name'\n        placeholder='Choose a name'\n        errorMessage={nodeFormErrors.name}\n        required\n        onGetErrorMessage={(value => {\n          const newSystem = String(value).toLowerCase()\n          const nameExists = existingSystems.some(({ text }) => String(text).toLowerCase() === newSystem)\n          if (nameExists && !edit) {\n            setNodeFormErrors({\n              ...nodeFormErrors,\n              name: `The ${value} system already exists`\n            })\n          } else {\n            if (nodeFormErrors.name) {\n              const errors = {\n                ...nodeFormErrors\n              }\n              delete errors.name\n              setNodeFormErrors(errors)\n            }\n          }\n        })}\n        onChange={(event, value) => updateNodeForm({ path: 'name', value })}\n        value={addNodeForm.name || ''}\n      />\n      <SystemType\n        required\n        errorMessage={nodeFormErrors.type}\n        selectedKey={addNodeForm.type || null}\n        onChange={(event, value) => {\n          updateNodeForm({ path: 'type', value: value.key })\n          if ('type' in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors.type\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <TextField\n        label='Department'\n        placeholder='Was this built for another department?'\n        onChange={(event, value) => updateNodeForm({ path: 'department', value })}\n        value={addNodeForm.department || ''}\n      />\n      <TextField\n        label='URL'\n        placeholder='Is there a url to access this system?'\n        errorMessage={nodeFormErrors.url}\n        onChange={(event, value) => {\n          updateNodeForm({ path: 'url', value })\n          if ('url' in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors.url\n            setNodeFormErrors(errors)\n          }\n        }}\n        onGetErrorMessage={value => {\n          if (!value) return\n          return checkURL(value)\n        }}\n        value={addNodeForm.url || ''}\n      />\n      <TextField\n        label='Description'\n        placeholder='Enter some information others may want to know about this system'\n        multiline\n        rows={4}\n        onChange={(event, value) => updateNodeForm({ path: 'description', value })}\n        value={addNodeForm.description || ''}\n      />\n      {renderConnections({ connections, existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors })}\n      <ActionButton\n        onClick={addConnection}\n        iconProps={{ iconName: 'Add' }}\n      >\n        Add Connection\n      </ActionButton>\n    </>\n  )\n}\n","import React, { useState, useEffect, useReducer } from 'react'\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel'\nimport { Graph } from '../../util'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { PrimaryButton, DefaultButton } from 'office-ui-fabric-react'\nimport { useEvent } from '../../hooks'\nimport get from 'lodash.get'\nimport uuid from 'uuid/v4'\nimport set from 'lodash.set'\nimport unset from 'lodash.unset'\nimport { Connection } from './Connection'\nimport { Network } from '../../util/Network'\nimport { SystemFormView } from './SystemFormView'\n\nconst makeConnections = (system, nodes) => {\n  const connections = {}\n  system.edges.forEach(edge => {\n    connections[edge.id] = {\n      read: edge.data.read,\n      write: edge.data.write,\n      connectionType: {\n        key: edge.data.type.id,\n        text: edge.data.type.label\n      },\n      connectedTo: {\n        key: edge.id,\n        text: get(nodes.filter(node => node.id === edge.id), '[0].data.name', '')\n      }\n    }\n  })\n  return connections\n}\n\nconst checkURL = url => {\n  if (!url) return\n  try {\n    const checkedURL = new URL(url)\n    if (checkedURL) return null\n  } catch (err) {\n    return err.message\n  }\n}\n\nconst makeFormState = system => {\n  const { network, getNodes } = Network.build()\n  const nodes = network.getConnectedNodes(system.id)\n\n  const connectedNodes = getNodes().filter(({ id }) => nodes.includes(id))\n\n  const formState = {\n    name: get(system, 'data.name'),\n    id: get(system, 'id'),\n    type: get(system, 'data.type'),\n    department: get(system, 'data.department'),\n    url: get(system, 'data.url'),\n    description: get(system, 'data.description'),\n    connections: makeConnections(system, connectedNodes)\n  }\n  return formState\n}\n\nconst addNodeReducer = (state, action) => {\n  if (action.path === '') return {}\n  const addNodeState = { ...state }\n  switch (action.type) {\n    case 'remove':\n      unset(addNodeState, action.path)\n      return addNodeState\n    case 'edit':\n      return { ...action.formState }\n    default:\n      set(addNodeState, action.path, action.value)\n      return addNodeState\n  }\n}\n\nconst connectionReducer = (connections, action) => {\n  switch (action.type) {\n    case 'add':\n      const id = uuid()\n      return [\n        ...connections,\n        <Connection\n          key={id}\n          id={id}\n          handleRemove={() => action.dispatch({ type: 'remove', id })}\n        />\n      ]\n    case 'remove':\n      return connections.filter(({ key }) => key !== action.id)\n    case 'reset':\n      return []\n    case 'edit':\n      const connKeys = Object.keys(action.connections)\n      return connKeys.map(key => {\n        const id = key\n        const dispatch = get(action, 'dispatch', null)\n\n        if (!dispatch || !id) return null\n\n        return (\n          <Connection\n            edit\n            key={id}\n            id={id}\n            handleRemove={() => dispatch({ type: 'remove', id })}\n          />\n        )\n      }).filter(item => item)\n    default:\n      return connections\n  }\n}\n\nconst getSystems = async () => {\n  const nodes = await Graph.getNodesArray()\n  return nodes.map(node => ({ key: node.id, text: node.data.name })).sort((a, b) => {\n    if (a.text < b.text) return -1\n    if (a.text > b.text) return 1\n    return 0\n  })\n}\n\nconst validate = (addNodeForm, nodeFormErrors) => {\n  let errors = {}\n  if (nodeFormErrors) {\n    errors = {\n      ...nodeFormErrors\n    }\n  }\n\n  if (!addNodeForm.type) {\n    errors.type = 'A system type must be selected'\n  }\n\n  if (!addNodeForm.name) {\n    errors.name = 'A system name is required'\n  }\n\n  if (addNodeForm.url) {\n    const error = checkURL(addNodeForm.url)\n    if (error) errors.url = error\n  }\n\n  if (addNodeForm.connections) {\n    const keys = Object.keys(addNodeForm.connections || {})\n    keys.forEach(key => {\n      const target = get(addNodeForm, `connections[${key}].connectedTo.key`, null)\n      const type = get(addNodeForm, `connections[${key}].connectionType.key`, null)\n\n      if (!type) set(errors, `[${key}].type`, 'The connection must have a type selected')\n      if (!target) set(errors, `[${key}].target`, 'You must select another system to connect to')\n    })\n  }\n\n  return errors\n}\n\nexport const SystemForm = (props) => {\n  const [loading, setLoading] = useState(true)\n  const [edit, setEdit] = useState(false)\n  const [isOpen, setIsOpen] = useState(false)\n  const [addNodeForm, updateNodeForm] = useReducer(addNodeReducer, {})\n  const [existingSystems, setExistingSystems] = useState()\n  const [nodeFormErrors, setNodeFormErrors] = useState({})\n  const [connections, connDispatch] = useReducer(connectionReducer, [])\n\n  const toggle = () => setIsOpen(!isOpen)\n  const resetForm = () => updateNodeForm({ path: '', value: {} })\n  const resetConnections = () => connDispatch({ type: 'reset' })\n\n  const handleEditSystem = (system) => {\n    const formState = makeFormState(system)\n    connDispatch({\n      type: 'edit',\n      connections: formState.connections || {},\n      dispatch: connDispatch\n    })\n    updateNodeForm({ type: 'edit', formState })\n    setEdit(true)\n    setIsOpen(true)\n  }\n\n  useEvent('edit-system-panel', handleEditSystem)\n\n  const addConnection = () => {\n    connDispatch({\n      type: 'add',\n      dispatch: connDispatch,\n      existingSystems,\n      addNodeForm,\n      updateNodeForm\n    })\n  }\n\n  const submitSystem = async () => {\n    const errors = validate(addNodeForm, nodeFormErrors)\n    if (Object.keys(errors).length > 0) {\n      setNodeFormErrors({\n        ...nodeFormErrors,\n        ...errors\n      })\n      return\n    }\n\n    const connections = get(addNodeForm, 'connections', {})\n    const data = {\n      description: get(addNodeForm, 'description', ''),\n      name: get(addNodeForm, 'name', ''),\n      type: get(addNodeForm, 'type', ''),\n      url: get(addNodeForm, 'url', ''),\n      department: get(addNodeForm, 'department', '')\n    }\n\n    let id = null\n    if (edit) {\n      const node = await Graph.makeNode({ id: addNodeForm.id, connections, data })\n      id = addNodeForm.id\n      await Graph.addNode(node)\n    } else {\n      const node = await Graph.makeNode({ connections, data })\n      id = node.id\n      await Graph.addNode(node)\n    }\n\n    broadcastNodeSave()\n    nodeAdded(id)\n    resetConnections()\n    resetForm()\n    if (edit) {\n      dismiss()\n    }\n  }\n\n  useEvent('toggle-left-panel', toggle)\n  const dismiss = () => {\n    resetForm()\n    resetConnections()\n    setIsOpen(false)\n    setEdit(false)\n  }\n\n  const updateExistingSystems = async () => {\n    const systems = await getSystems()\n    setLoading(false)\n    setExistingSystems(systems)\n  }\n\n  useEffect(() => {\n    updateExistingSystems()\n  }, [])\n\n  const broadcastNodeSave = useEvent('save-node-entry', updateExistingSystems)\n  const nodeAdded = useEvent('node-added')\n\n  return (\n    <Panel\n      headerText={`${edit ? 'Edit' : 'Add'} System`}\n      isOpen={isOpen}\n      onDismiss={dismiss}\n      isFooterAtBottom\n      onRenderFooterContent={() => (\n        <Stack horizontal horizontalAlign='space-between' tokens={{ childrenGap: 12 }}>\n          <DefaultButton text='Cancel' onClick={dismiss} />\n          <PrimaryButton text='Save System' onClick={submitSystem} />\n        </Stack>\n      )}\n      type={PanelType.medium}\n    >\n      <SystemFormView\n        loading={loading}\n        edit={edit}\n        existingSystems={existingSystems}\n        nodeFormErrors={nodeFormErrors}\n        setNodeFormErrors={setNodeFormErrors}\n        addNodeForm={addNodeForm}\n        updateNodeForm={updateNodeForm}\n        connections={connections}\n        addConnection={addConnection}\n      />\n    </Panel>\n  )\n}\n","import React from 'react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Text } from 'office-ui-fabric-react/lib/Text'\n\nconst NodeDetailView = props => {\n  const { description, department, url } = props\n  return (\n    <Stack tokens={{ childrenGap: 8 }}>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>URL</Text>\n        <a href={url} target='_blank' rel='noopener noreferrer'>{url}</a>\n      </Stack>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Department</Text>\n        <Text>{department}</Text>\n      </Stack>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Description</Text>\n        <Text>{description}</Text>\n      </Stack>\n    </Stack>\n  )\n}\n\nexport default NodeDetailView\n","import React, { useState } from 'react'\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel'\nimport { IconButton } from 'office-ui-fabric-react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Text } from 'office-ui-fabric-react/lib/Text'\nimport styled from 'styled-components'\nimport get from 'lodash.get'\nimport { useEvent } from '../../hooks'\nimport NodeDetailView from './NodeDetailView'\n\nconst CustomPanel = styled(Panel)`\n  & > .ms-Panel-main {\n    transition: width 300ms ease-in-out;\n  }\n`\n\nexport const NodeDetail = props => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [node, setNode] = useState(null)\n  const displayNode = (node) => {\n    setNode(node)\n    setIsOpen(true)\n  }\n  const closePanel = () => setIsOpen(false)\n\n  useEvent('display-node-details', displayNode)\n  const editSystem = useEvent('edit-system-panel')\n  const deselectActiveNode = useEvent('deselect-active-node')\n  const name = get(node, 'data.name', 'Very Unnamed System')\n  const description = get(node, 'data.description', 'No description has been entered.')\n  const department = get(node, 'data.department', 'No department has been entered.')\n  const url = get(node, 'data.url', `${name} has no url`)\n\n  const handleEdit = () => {\n    editSystem(node)\n    setIsOpen(false)\n    deselectActiveNode()\n  }\n\n  return (\n    <CustomPanel\n      isOpen={isOpen}\n      onDismiss={() => {\n        deselectActiveNode()\n        closePanel()\n      }}\n      onRenderHeader={(props) => {\n        return (\n          <Stack horizontal tokens={{ childrenGap: 12 }}>\n            <Text variant='xLarge' style={{ marginLeft: 16, marginBottom: 12 }}>{props.headerText}</Text>\n            <IconButton\n              iconProps={{\n                iconName: 'Edit'\n              }}\n              onClick={handleEdit}\n            />\n          </Stack>\n        )\n      }}\n      isLightDismiss\n      type={PanelType.customNear}\n      customWidth={400}\n      headerText={name}\n    >\n      <NodeDetailView\n        department={department}\n        description={description}\n        url={url}\n      />\n    </CustomPanel>\n  )\n}\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\n\nconst cubeMove = keyframes`\n    25% { \n      transform: translateX(42px) rotate(-90deg) scale(0.5);\n      -webkit-transform: translateX(42px) rotate(-90deg) scale(0.5);\n    } 50% { \n      transform: translateX(42px) translateY(42px) rotate(-179deg);\n      -webkit-transform: translateX(42px) translateY(42px) rotate(-179deg);\n    } 50.1% { \n      transform: translateX(42px) translateY(42px) rotate(-180deg);\n      -webkit-transform: translateX(42px) translateY(42px) rotate(-180deg);\n    } 75% { \n      transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\n      -webkit-transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\n    } 100% { \n      transform: rotate(-360deg);\n      -webkit-transform: rotate(-360deg);\n    }\n`\n\nconst Spinner = styled.div`\n  margin: 100px auto;\n  width: 40px;\n  height: 40px;\n  align-self: center;\n  justify-self: center;\n  position: relative;\n`\n\nconst cubeCSS = css`\n  background-color: #501214;\n  width: 15px;\n  height: 15px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  \n  -webkit-animation: ${cubeMove} 1.8s infinite ease-in-out;\n  animation: ${cubeMove} 1.8s infinite ease-in-out;\n`\n\nconst CubeOne = styled.div`\n  ${cubeCSS}\n`\nconst CubeTwo = styled.div`\n  ${cubeCSS}\n  animation-delay: -0.9s;\n`\n\nexport const Loading = props => {\n  return (\n    <Spinner>\n      <CubeOne />\n      <CubeTwo />\n    </Spinner>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { SystemsGraph, NodeDetail, SystemForm, CommandBar } from './components'\n\nconst Page = styled.div`\n  background-color: #e8e3db;\n  flex: 1;\n  flex-direction: column;\n  display: flex;\n`\n\nfunction App () {\n  return (\n    <Page>\n      <CommandBar />\n      <SystemsGraph />\n      <SystemForm />\n      <NodeDetail />\n    </Page>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons'\nimport App from './App'\nimport './index.css'\n\ninitializeIcons()\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  render(<App />, document.getElementById('root'))\n})\n"],"sourceRoot":""}