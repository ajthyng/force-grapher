{"version":3,"sources":["util/Subject.js","util/NodeManager.js","util/Graph.js","hooks/useEvent.js","components/SystemsGraph/SystemsGraph.js","util/FileManager.js","components/CommandBar/CommandBar.js","components/AddNodeForm/ConnectionReadWrite.js","components/AddNodeForm/Connection.js","components/AddNodeForm/SystemType.js","components/AddNodeForm/AddNodeForm.js","components/NodeDetail/NodeDetail.js","App.js","index.js"],"names":["_handlers","Subject","subscribe","event","handler","push","unsubscribe","filter","func","next","_len","arguments","length","args","Array","_key","forEach","apply","Object","freeze","NodeManager","_get","key","defaultValue","JSON","parse","localStorage","getItem","_set","value","setItem","stringify","getEdges","getNodesObject","saveUploadedData","_ref","edges","nodes","getNodes","keys","reduce","acc","cur","_NodeManager","Graph","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","abrupt","stop","this","_ref2","_callee2","_context2","setEdges","_ref3","_callee3","_context3","console","log","_x","setNodes","_ref4","_callee4","_context4","_x2","addNode","_ref5","_callee5","node","_nodes","_context5","id","Error","sent","makeEdges","_x3","addEdge","_ref6","_callee6","node1","node2","data","_edges","_context6","isArray","objectSpread","_x4","_x5","_x6","addDirectedEdge","_ref7","_callee7","_context7","_x7","_x8","_x9","removeDirectedEdge","_ref8","_callee8","_updatedEdges","_context8","omit","_x10","removeEdge","_ref9","_callee9","_context9","_x11","_x12","_ref11","_callee10","i","edge","read","write","_context10","get","_x13","makeNode","_ref10","connections","uuid","connectionKeys","info","concat","type","label","text","_Graph","useEvent","useEffect","systemsReducer","state","action","buildGraphData","getLinkColor","graphData","size","widthConstraint","minimum","maximum","shape","getShape","name","color","nodeId","from","to","arrows","SystemsGraph","props","_useReducer","useReducer","_useReducer2","slicedToArray","systems","systemsDispatch","_useState","useState","_useState2","activeNode","setActiveNode","network","useRef","graph","displayNodeDetails","DataSet","current","setData","Network","physics","solver","on","getNodeAt","pointer","DOM","isCluster","openCluster","matchingNode","find","clusterByConnection","clusterNodeProperties","params","document","addEventListener","e","preventDefault","react_default","createElement","style","height","ref","handleFile","reader","FileReader","readAsBinaryString","target","files","onloadend","result","CommandBar","items","iconProps","iconName","onClick","element","setAttribute","display","click","uploadFile","filename","encodeURIComponent","dayjs","format","body","appendChild","removeChild","downloadFile","CommandBar_CommandBar","canChange","nextPath","nextValue","currentRead","currentWrite","ConnectionReadWrite","onChange","Stack","marginRight","marginLeft","alignSelf","verticalAlign","tokens","childrenGap","Checkbox","checked","ConnectionContainer","styled","div","_templateObject","Connection","handleRemove","addNodeForm","nodeFormErrors","setNodeFormErrors","existingSystems","updateNodeForm","selectedTarget","selectedType","selectedRead","selectedWrite","targetError","typeError","path","Dropdown","placeholder","options","errorMessage","selectedKey","defineProperty","ConnectionReadWrite_ConnectionReadWrite","IconButton","SystemType","required","addNodeReducer","addNodeState","unset","set","connectionReducer","toConsumableArray","Connection_Connection","dispatch","getSystems","map","validate","errors","AddNodeForm","isOpen","setIsOpen","_useState3","_useState4","setExistingSystems","_useState5","_useState6","connDispatch","resetForm","resetConnections","submitSystem","description","url","department","broadcastNodeSave","_useReducer3","_useReducer4","Panel","headerText","onDismiss","PanelType","medium","TextField","onGetErrorMessage","newSystem","String","toLowerCase","some","SystemType_SystemType","multiline","rows","conn","React","cloneElement","renderConnections","ActionButton","horizontal","horizontalAlign","DefaultButton","PrimaryButton","readWriteStatus","Text","NodeDetail","setNode","deselectActiveNode","NodeDetail_Connection","parseConnections","isLightDismiss","customNear","customWidth","textDecoration","variant","Page","App_templateObject","App","CommandBar_CommandBar_CommandBar","AddNodeForm_AddNodeForm","NodeDetail_NodeDetail","SystemsGraph_SystemsGraph","initializeIcons","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.1ea61e46.chunk.js","sourcesContent":["const _handlers = {}\n\nexport const Subject = {\n  subscribe (event, handler) {\n    if (!_handlers[event]) _handlers[event] = []\n    _handlers[event].push(handler)\n  },\n  unsubscribe (event, handler) {\n    if (!_handlers[event]) return\n    _handlers[event] = _handlers[event].filter(func => func !== handler)\n  },\n  next (event, ...args) {\n    if (!_handlers[event]) return\n    _handlers[event].forEach(handler => {\n      if (typeof handler === 'function') {\n        handler(...args)\n      }\n    })\n  }\n}\n\nObject.freeze(Subject)\n","const _NodeManager = () => {\n  const _get = (key, defaultValue) => JSON.parse(localStorage.getItem(key)) || defaultValue\n  const _set = (key, value) => localStorage.setItem(key, JSON.stringify(value))\n  const getNodesObject = () => {\n    return _get('_nodes', {})\n  }\n\n  const getNodes = () => {\n    const nodes = _get('_nodes', {})\n    const nodeKeys = Object.keys(nodes)\n\n    return nodeKeys.reduce((acc, cur) => {\n      acc.push(nodes[cur])\n      return acc\n    }, [])\n  }\n\n  const getEdges = () => {\n    return _get('_edges', {})\n  }\n\n  const saveUploadedData = ({ edges, nodes }) => {\n    _set('_edges', edges)\n    _set('_nodes', nodes)\n  }\n\n  return {\n    getEdges,\n    getNodesObject,\n    saveUploadedData,\n    getNodes\n  }\n}\n\nexport const NodeManager = _NodeManager()\n","import omit from 'lodash.omit'\nimport get from 'lodash.get'\nimport uuid from 'uuid/v4'\n\nconst _Graph = () => {\n  const _get = (key, defaultValue) => JSON.parse(localStorage.getItem(key)) || defaultValue\n  const _set = (key, value) => localStorage.setItem(key, JSON.stringify(value))\n\n  const getEdges = async () => {\n    return _get('_edges', {})\n  }\n\n  const getNodes = async () => {\n    return _get('_nodes', {})\n  }\n\n  const setEdges = async (edges) => {\n    console.log(edges)\n    return _set('_edges', edges)\n  }\n\n  const setNodes = async (nodes) => {\n    return _set('_nodes', nodes)\n  }\n\n  const addNode = async (node) => {\n    if (!node.id) throw new Error('Nodes must have IDs to be added')\n    const _nodes = await getNodes()\n\n    _nodes[node.id] = node\n\n    await makeEdges(node)\n    await setNodes(_nodes)\n  }\n\n  const addEdge = async (node1, node2, data) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to add edges')\n\n    const _edges = await getEdges()\n\n    if (!Array.isArray(_edges[node1.id])) _edges[node1.id] = []\n    if (!Array.isArray(_edges[node2.id])) _edges[node2.id] = []\n\n    _edges[node1.id].push({ node: node2.id, data })\n    _edges[node2.id].push({ node: node1.id, data })\n\n    await setEdges({ ..._edges })\n  }\n\n  const addDirectedEdge = async (node1, node2, data) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to add directed edges')\n\n    const _edges = await getEdges()\n\n    if (!Array.isArray(_edges[node1.id])) _edges[node1.id] = []\n\n    _edges[node1.id].push({ node: node2.id, data })\n\n    await setEdges({ ..._edges })\n  }\n\n  const removeDirectedEdge = async (node1) => {\n    if (!node1.id) throw new Error('Nodes must have IDs to remove directed eges')\n\n    const _edges = await getEdges()\n\n    const _updatedEdges = omit(_edges, node1.id)\n\n    await setEdges(_updatedEdges)\n  }\n\n  const removeEdge = async (node1, node2) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to remove edges')\n\n    const _edges = await getEdges()\n\n    const _updatedEdges = omit(_edges, [node1.id, node2.id])\n\n    await setEdges(_updatedEdges)\n  }\n\n  const makeNode = ({ data, connections }) => {\n    const node = {\n      id: uuid(),\n      edges: [],\n      data: {\n        ...(data || {})\n      }\n    }\n\n    const connectionKeys = Object.keys(connections || {})\n\n    if (connectionKeys.length <= 0) return node\n\n    connectionKeys.forEach(key => {\n      const info = get(connections, `${[key]}.connectedTo`, null)\n      if (!info) throw new Error('You cannot make a connection without a target')\n      const type = get(connections, `${[key]}.connectionType`, null)\n      if (!type) throw new Error('You cannot make a connection without a type')\n\n      const read = get(connections, `${[key]}.read`, null)\n      const write = get(connections, `${[key]}.write`, null)\n\n      if (!read && !write) throw new Error('You must specify a read or a write option')\n\n      const data = get(connections, `[${key}].data`, {})\n\n      node.edges.push({\n        id: info.key,\n        data: {\n          ...data,\n          read,\n          write,\n          type: {\n            id: type.key,\n            label: type.text\n          }\n        }\n      })\n    })\n\n    return node\n  }\n\n  const makeEdges = async (node) => {\n    const edges = get(node, 'edges', [])\n    if (edges.length <= 0) return\n\n    for (let i = 0; i < edges.length; i++) {\n      const edge = edges[i]\n\n      const read = get(edge, 'data.read')\n      const write = get(edge, 'data.write')\n\n      const node1 = {\n        id: get(node, 'id')\n      }\n      const node2 = {\n        id: get(edge, 'id')\n      }\n\n      if (read && write) {\n        await addEdge(node1, node2, get(edge, 'data'))\n      } else if (read) {\n        await addDirectedEdge(node2, node1, get(edge, 'data'))\n      } else if (write) {\n        await addDirectedEdge(node1, node2, get(edge, 'data'))\n      }\n    }\n  }\n\n  return {\n    addNode,\n    removeEdge,\n    removeDirectedEdge,\n    makeNode\n  }\n}\n\nexport const Graph = _Graph()\n","import { useEffect } from 'react'\nimport { Subject } from '../util/Subject'\n\nexport const useEvent = (event, handler) => {\n  useEffect(() => {\n    if (typeof handler !== 'function') return\n    Subject.subscribe(event, handler)\n    return () => Subject.unsubscribe(event, handler)\n  }, [event, handler])\n\n  return value => Subject.next(event, value)\n}\n","import React, { useReducer, useEffect, useState, useRef } from 'react'\nimport { Network, DataSet } from 'vis-network'\nimport { NodeManager } from '../../util'\nimport { useEvent } from '../../hooks'\nimport get from 'lodash.get'\n\nconst systemsReducer = (state, action) => {\n  switch (action.type) {\n    case 'update':\n      const nodes = NodeManager.getNodes()\n      const edges = NodeManager.getEdges()\n      return buildGraphData(nodes, edges)\n    default:\n      return state\n  }\n}\n\nconst getLinkColor = (type) => {\n  switch (type) {\n    case 'custom':\n      return '#4b721d'\n    case 'builtin':\n      return '#deb407'\n    default:\n      return '#A0A0A0'\n  }\n}\n\nconst getShape = (type) => {\n  switch (type) {\n    case 'cloud':\n      return { size: 40, widthConstraint: { minimum: 40, maximum: 100 } }\n    case 'external':\n      return { shape: 'circle', size: 40, widthConstraint: { minimum: 40, maximum: 100 } }\n    case 'oncampus':\n    default:\n      return { shape: 'box', size: 40, widthConstraint: { minimum: 40, maximum: 100 } }\n  }\n}\n\nconst buildGraphData = (nodes, edges) => {\n  const graphData = {\n    nodes: [],\n    edges: []\n  }\n  if (!Array.isArray(nodes)) {\n    return {\n      nodes: [],\n      edges: []\n    }\n  }\n\n  const nodeKeys = Object.keys(nodes || {})\n  nodeKeys.forEach(key => {\n    const node = nodes[key]\n\n    graphData.nodes.push({\n      id: node.id,\n      type: node.data.type,\n      ...getShape(node.data.type),\n      label: node.data.name,\n      data: {\n        ...node.data\n      },\n      color: '#FFFFFF'\n    })\n  })\n\n  const edgeKeys = Object.keys(edges || {})\n  edgeKeys.forEach(nodeId => {\n    const edgeList = edges[nodeId]\n\n    edgeList.forEach(edge => {\n      graphData.edges.push({\n        from: nodeId,\n        to: edge.node,\n        color: getLinkColor(get(edge, 'data.type.id')),\n        type: get(edge, 'data.type', {}),\n        arrows: 'to'\n      })\n    })\n  })\n\n  return graphData\n}\n\nexport const SystemsGraph = props => {\n  const [systems, systemsDispatch] = useReducer(systemsReducer, buildGraphData(NodeManager.getNodes(), NodeManager.getEdges()))\n  const [activeNode, setActiveNode] = useState()\n\n  const network = useRef()\n  const graph = useRef()\n\n  const updateGraph = () => {\n    systemsDispatch({ type: 'update' })\n  }\n  const resetActiveNode = () => setActiveNode(null)\n  const displayNodeDetails = useEvent('display-node-details')\n\n  useEffect(() => {\n    if (activeNode) displayNodeDetails(activeNode)\n  }, [activeNode, displayNodeDetails])\n\n  useEvent('save-node-entry', updateGraph)\n  useEvent('deselect-active-node', resetActiveNode)\n\n  useEffect(() => {\n    const nodes = new DataSet(systems.nodes)\n    const edges = new DataSet(systems.edges)\n\n    const options = {\n      physics: {\n        solver: 'repulsion'\n      }\n    }\n\n    const data = { nodes, edges }\n    if (!network.current) {\n      network.current = new Network(graph.current, data, options)\n      network.current.on('oncontext', event => {\n        const node = network.current.getNodeAt(event.pointer.DOM)\n        if (network.current.isCluster(node)) {\n          network.current.openCluster(node)\n        } else {\n          const matchingNode = systems.nodes.find(({ id }) => id === node)\n          if (!matchingNode) return\n          network.current.clusterByConnection(node, { clusterNodeProperties: { label: matchingNode.data.name } })\n        }\n      })\n      network.current.on('selectNode', params => {\n        const node = get(params, `nodes[0]`, null)\n        if (node) {\n          if (!network.current.isCluster(node)) {\n            setActiveNode(node)\n          }\n        }\n      })\n      document.addEventListener('contextmenu', e => e.preventDefault(), false)\n    } else {\n      network.current.setData(data)\n    }\n  }, [systems])\n\n  return <div style={{ height: '100%' }} ref={graph} id='graph' />\n}\n","import dayjs from 'dayjs'\nimport get from 'lodash.get'\nimport { NodeManager } from './NodeManager'\nimport { Subject } from './Subject'\n\nexport const downloadFile = (filename, data) => {\n  const element = document.createElement('a')\n  element.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(data)}`)\n  element.setAttribute('download', `${filename} - ${dayjs().format('YYYY-MM-DD/THHmmss')}.json`)\n\n  element.style.display = 'none'\n  document.body.appendChild(element)\n  element.click()\n  document.body.removeChild(element)\n}\n\nconst handleFile = (event) => {\n  const reader = new FileReader()\n  reader.readAsBinaryString(event.target.files[0])\n\n  reader.onloadend = async () => {\n    const data = JSON.parse(reader.result)\n    const edges = get(data, 'edges', {})\n    const nodes = get(data, 'nodes', {})\n\n    NodeManager.saveUploadedData({ edges, nodes })\n    Subject.next('save-node-entry')\n  }\n}\n\nexport const uploadFile = () => {\n  const element = document.createElement('input')\n  element.setAttribute('type', 'file')\n  element.setAttribute('accept', '.json')\n\n  element.style.display = 'none'\n  element.addEventListener('change', handleFile)\n  element.click()\n}\n","import React from 'react'\nimport { useEvent } from '../../hooks'\nimport { CommandBar as OfficeCommandBar } from 'office-ui-fabric-react/lib/CommandBar'\nimport { downloadFile, uploadFile } from '../../util/FileManager'\nimport { NodeManager } from '../../util/NodeManager'\nexport const CommandBar = props => {\n  const toggleLeftPanel = useEvent('toggle-left-panel')\n\n  const items = [\n    {\n      key: 'addNode',\n      name: 'Add System',\n      iconProps: {\n        iconName: 'Add'\n      },\n      onClick: toggleLeftPanel\n    },\n    {\n      key: 'upload',\n      name: 'Upload',\n      iconProps: {\n        iconName: 'Upload'\n      },\n      onClick: () => {\n        uploadFile()\n      }\n    },\n    {\n      key: 'download',\n      name: 'Download',\n      iconProps: {\n        iconName: 'Download'\n      },\n      onClick: () => {\n        const edges = NodeManager.getEdges()\n        const nodes = NodeManager.getNodesObject()\n\n        const filename = 'TR_Systems'\n        downloadFile(filename, JSON.stringify({ edges, nodes }, null, 2))\n      }\n    }\n  ]\n\n  return (\n    <OfficeCommandBar\n      items={items}\n    />\n  )\n}\n","import React from 'react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox'\n\nconst canChange = (nextPath, nextValue) => (currentRead, currentWrite) => {\n  if (nextPath === 'read') {\n    return nextValue || currentWrite || false\n  }\n\n  if (nextPath === 'write') {\n    return nextValue || currentRead || false\n  }\n  return false\n}\n\nexport const ConnectionReadWrite = props => {\n  const { read, write, onChange } = props\n\n  return (\n    <Stack style={{ marginRight: 8, marginLeft: 8, alignSelf: 'center' }} verticalAlign='space-between' tokens={{ childrenGap: 4 }}>\n      <Checkbox checked={read} onChange={(event, value) => {\n        if (canChange('read', value)(read, write)) {\n          onChange('read', value)\n        }\n      }} label='Read' />\n      <Checkbox checked={write} onChange={(event, value) => {\n        if (canChange('write', value)(read, write)) {\n          onChange('write', value)\n        }\n      }} label='Write' />\n    </Stack>\n  )\n}\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown'\nimport { ConnectionReadWrite } from './ConnectionReadWrite'\nimport get from 'lodash.get'\nimport { IconButton } from 'office-ui-fabric-react'\n\nconst ConnectionContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding-top: 16px;\n\n  & > .ms-Dropdown-container {\n    flex: 1;\n    margin-right: 4px;\n  }\n\n  & > .ms-Button--icon {\n    align-self: flex-end;\n  }\n`\n\nexport const Connection = props => {\n  const { handleRemove, id, addNodeForm, nodeFormErrors, setNodeFormErrors, existingSystems, updateNodeForm } = props\n  const selectedTarget = get(addNodeForm, `connections[${id}].connectedTo.key`, null)\n  const selectedType = get(addNodeForm, `connections[${id}].connectionType.key`, null)\n\n  const selectedRead = get(addNodeForm, `connections[${id}].read`, true)\n  const selectedWrite = get(addNodeForm, `connections[${id}].write`, false)\n\n  const targetError = get(nodeFormErrors, `[${id}].target`)\n  const typeError = get(nodeFormErrors, `[${id}].type`)\n\n  useEffect(() => {\n    updateNodeForm({\n      path: `connections[${id}].read`,\n      value: true\n    })\n  }, [updateNodeForm, id])\n\n  return (\n    <ConnectionContainer>\n      <Dropdown\n        label='Connected To'\n        placeholder={`What does ${addNodeForm.name || 'this system'} connect to?`}\n        options={existingSystems}\n        errorMessage={targetError}\n        selectedKey={selectedTarget}\n        onChange={(event, value) => {\n          updateNodeForm({\n            path: `connections[${id}].connectedTo`,\n            value: { key: value.key, text: value.text }\n          })\n          setNodeFormErrors({\n            ...nodeFormErrors,\n            [id]: { type: null }\n          })\n        }}\n      />\n      <Dropdown\n        label='Interface'\n        options={[\n          { key: 'builtin', text: 'Built In' },\n          { key: 'custom', text: 'Custom' }\n        ]}\n        placeholder='How does this system connect?'\n        selectedKey={selectedType}\n        errorMessage={typeError}\n        onChange={(event, value) => {\n          updateNodeForm({\n            path: `connections[${id}].connectionType`,\n            value: { key: value.key, text: value.text, color: value.color }\n          })\n          setNodeFormErrors({\n            ...nodeFormErrors,\n            [id]: { type: null }\n          })\n        }}\n      />\n      <ConnectionReadWrite\n        read={selectedRead}\n        write={selectedWrite}\n        onChange={(path, value) => {\n          updateNodeForm({\n            path: `connections[${id}].${path}`,\n            value\n          })\n        }}\n      />\n      <IconButton\n        iconProps={{ iconName: 'Delete' }}\n        onClick={() => {\n          const connection = get(addNodeForm, `connections[${id}]`, null)\n          if (connection) {\n            updateNodeForm({\n              path: `connections[${id}]`,\n              type: 'remove'\n            })\n          }\n          handleRemove()\n        }}\n      />\n    </ConnectionContainer>\n  )\n}\n","import React from 'react'\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown'\n\nexport const SystemType = props => {\n  const { selectedKey, onChange, required, errorMessage } = props\n  return (\n    <Dropdown\n      required={required}\n      label='System Type'\n      options={[\n        { key: 'oncampus', text: 'On Campus' },\n        { key: 'cloud', text: 'Cloud' },\n        { key: 'external', text: 'External' }\n      ]}\n      errorMessage={errorMessage}\n      placeholder='Where does this system live?'\n      selectedKey={selectedKey}\n      onChange={onChange}\n    />\n  )\n}\n","import React, { useState, useEffect, useReducer } from 'react'\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel'\nimport { NodeManager, Graph } from '../../util'\nimport { TextField } from 'office-ui-fabric-react/lib/TextField'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { ActionButton, PrimaryButton, DefaultButton } from 'office-ui-fabric-react'\nimport { useEvent } from '../../hooks'\nimport get from 'lodash.get'\nimport uuid from 'uuid/v4'\nimport set from 'lodash.set'\nimport unset from 'lodash.unset'\nimport { Connection } from './Connection'\nimport { SystemType } from './SystemType'\n\nconst addNodeReducer = (state, action) => {\n  if (action.path === '') return {}\n  const addNodeState = { ...state }\n  switch (action.type) {\n    case 'remove':\n      unset(addNodeState, action.path)\n      return addNodeState\n    default:\n      set(addNodeState, action.path, action.value)\n      return addNodeState\n  }\n}\n\nconst connectionReducer = (connections, action) => {\n  switch (action.type) {\n    case 'add':\n      const id = uuid()\n      return [\n        ...connections,\n        <Connection\n          key={id}\n          id={id}\n          handleRemove={() => action.dispatch({ type: 'remove', id })}\n        />\n      ]\n    case 'remove':\n      return connections.filter(({ key }) => key !== action.id)\n    case 'reset':\n      return []\n    default:\n      return connections\n  }\n}\n\nconst getSystems = () => {\n  const nodes = NodeManager.getNodes()\n  return nodes.map(node => ({ key: node.id, text: node.data.name }))\n}\n\nconst renderConnections = ({ connections, existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors }) => {\n  return connections.map(conn => React.cloneElement(conn, { existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors }))\n}\n\nconst validate = (addNodeForm) => {\n  const errors = {}\n  if (!addNodeForm.type) {\n    errors.type = 'A system type must be selected'\n  }\n\n  if (!addNodeForm.name) {\n    errors.name = 'A system name is required'\n  }\n\n  if (addNodeForm.connections) {\n    const keys = Object.keys(addNodeForm.connections || {})\n    keys.forEach(key => {\n      const target = get(addNodeForm, `connections[${key}].connectedTo.key`, null)\n      const type = get(addNodeForm, `connections[${key}].connectionType.key`, null)\n\n      if (!type) set(errors, `[${key}].type`, 'The connection must have a type selected')\n      if (!target) set(errors, `[${key}].target`, 'You must select another system to connect to')\n    })\n  }\n\n  return errors\n}\n\nexport const AddNodeForm = props => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [existingSystems, setExistingSystems] = useState(getSystems())\n  const [nodeFormErrors, setNodeFormErrors] = useState({})\n  const [connections, connDispatch] = useReducer(connectionReducer, [])\n\n  const toggle = () => setIsOpen(!isOpen)\n  const resetForm = () => updateNodeForm({ path: '', value: {} })\n  const resetConnections = () => connDispatch({ type: 'reset' })\n\n  const addConnection = () => {\n    connDispatch({\n      type: 'add',\n      dispatch: connDispatch,\n      existingSystems,\n      addNodeForm,\n      updateNodeForm\n    })\n  }\n\n  useEffect(() => {\n\n  }, [])\n\n  const submitSystem = async () => {\n    const errors = validate(addNodeForm)\n    console.log(addNodeForm)\n    if (Object.keys(errors).length > 0) {\n      setNodeFormErrors({\n        ...nodeFormErrors,\n        ...errors\n      })\n      return\n    }\n\n    const connections = get(addNodeForm, 'connections', {})\n    const data = {\n      description: get(addNodeForm, 'description', ''),\n      name: get(addNodeForm, 'name', ''),\n      type: get(addNodeForm, 'type', ''),\n      url: get(addNodeForm, 'url', ''),\n      department: get(addNodeForm, 'department', '')\n    }\n\n    const node = Graph.makeNode({ connections, data })\n\n    await Graph.addNode(node)\n\n    broadcastNodeSave()\n    resetConnections()\n    resetForm()\n  }\n\n  const [addNodeForm, updateNodeForm] = useReducer(addNodeReducer, {})\n\n  useEvent('toggle-left-panel', toggle)\n  const dismiss = () => {\n    resetForm()\n    resetConnections()\n    setIsOpen(false)\n  }\n\n  const updateExistingSystems = () => {\n    const systems = getSystems()\n    setExistingSystems(systems)\n  }\n\n  const broadcastNodeSave = useEvent('save-node-entry', updateExistingSystems)\n\n  return (\n    <Panel\n      headerText='Add a New System Node'\n      isOpen={isOpen}\n      onDismiss={() => setIsOpen(false)}\n      type={PanelType.medium}\n    >\n      <TextField\n        label='Name'\n        placeholder='Choose a name'\n        errorMessage={nodeFormErrors.name}\n        required\n        onGetErrorMessage={(value => {\n          const newSystem = String(value).toLowerCase()\n          if (existingSystems.some(({ text }) => String(text).toLowerCase() === newSystem)) {\n            setNodeFormErrors({\n              ...nodeFormErrors,\n              name: `The ${value} system already exists`\n            })\n          } else {\n            setNodeFormErrors({\n              ...nodeFormErrors,\n              name: null\n            })\n          }\n        })}\n        onChange={(event, value) => updateNodeForm({ path: 'name', value })}\n        value={addNodeForm.name || ''}\n      />\n      <SystemType\n        required\n        errorMessage={nodeFormErrors.type}\n        selectedKey={addNodeForm.type || null}\n        onChange={(event, value) => {\n          updateNodeForm({ path: 'type', value: value.key })\n          setNodeFormErrors({\n            ...nodeFormErrors,\n            type: null\n          })\n        }}\n      />\n      <TextField\n        label='Department'\n        placeholder='Was this built for another department?'\n        onChange={(event, value) => updateNodeForm({ path: 'department', value })}\n        value={addNodeForm.department || ''}\n      />\n      <TextField\n        label='URL'\n        placeholder='Is there a url to access this system?'\n        onChange={(event, value) => updateNodeForm({ path: 'url', value })}\n        value={addNodeForm.url || ''}\n      />\n      <TextField\n        label='Description'\n        placeholder='Enter some information others may want to know about this system'\n        multiline\n        rows={4}\n        onChange={(event, value) => updateNodeForm({ path: 'description', value })}\n        value={addNodeForm.description || ''}\n      />\n      {renderConnections({ connections, existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors })}\n      <ActionButton\n        onClick={addConnection}\n        iconProps={{ iconName: 'Add' }}\n      >\n        Add Connection\n      </ActionButton>\n      <Stack horizontal horizontalAlign='end' tokens={{ childrenGap: 12 }}>\n        <DefaultButton text='Cancel' onClick={dismiss} />\n        <PrimaryButton text='Add System' onClick={submitSystem} />\n      </Stack>\n    </Panel>\n  )\n}\n","import React, { useState } from 'react'\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Text } from 'office-ui-fabric-react/lib/Text'\nimport { useEvent } from '../../hooks'\nimport { NodeManager } from '../../util'\nimport get from 'lodash.get'\n\nconst parseConnections = (node) => {\n  if (!node) return []\n  const edges = NodeManager.getEdges()\n  const nodes = NodeManager.getNodesObject()\n\n  const edgeKeys = Object.keys(edges || {})\n  return edgeKeys.reduce((acc, cur) => {\n    const nodeEdges = edges[cur]\n    nodeEdges\n      .filter(edge => edge.node === node.id)\n      .forEach(edge => {\n        const to = get(nodes, `[${cur}].data.name`)\n\n        const type = get(edge, 'data.type.label')\n        const read = get(edge, 'data.read')\n        const write = get(edge, 'data.write')\n\n        acc.push(<Connection to={to} read={read} write={write} type={type} />)\n      })\n    return acc\n  }, [])\n}\n\nconst Connection = ({ to, type, read, write }) => {\n  let readWriteStatus = ''\n  if (read && write) {\n    readWriteStatus = '(Read and Write)'\n  } else if (read) {\n    readWriteStatus = '(Read)'\n  } else if (write) {\n    readWriteStatus = '(Write)'\n  }\n  return (\n    <Text>{to} - {type} {readWriteStatus}</Text>\n  )\n}\n\nexport const NodeDetail = props => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [node, setNode] = useState(null)\n  const displayNode = (node) => {\n    setNode(node)\n    setIsOpen(true)\n  }\n  const closePanel = () => setIsOpen(false)\n\n  useEvent('display-node-details', displayNode)\n  const deselectActiveNode = useEvent('deselect-active-node')\n  const name = get(node, 'name', 'Very Unnamed System')\n  const description = get(node, 'data.description', 'No description has been entered.')\n  const department = get(node, 'data.department', 'No department has been entered.')\n  const url = get(node, 'data.url', `${name} has no url`)\n\n  const connections = parseConnections(node)\n\n  return (\n    <Panel\n      isOpen={isOpen}\n      onDismiss={() => {\n        deselectActiveNode()\n        closePanel()\n      }}\n      isLightDismiss\n      type={PanelType.customNear}\n      customWidth={400}\n      headerText={name}\n    >\n      <Stack tokens={{ childrenGap: 8 }}>\n        <Stack tokens={{ childrenGap: 4 }}>\n          <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Description</Text>\n          <Text>{description}</Text>\n        </Stack>\n        <Stack tokens={{ childrenGap: 4 }}>\n          <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Department</Text>\n          <Text>{department}</Text>\n        </Stack>\n        <Stack tokens={{ childrenGap: 4 }}>\n          <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>URL</Text>\n          <Text>{url}</Text>\n        </Stack>\n        <Stack>\n          <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Connections</Text>\n          {connections}\n        </Stack>\n      </Stack>\n    </Panel>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { SystemsGraph, NodeDetail, AddNodeForm, CommandBar } from './components'\n\nconst Page = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: #e8e3db;\n`\nfunction App () {\n  return (\n    <Page>\n      <CommandBar />\n      <AddNodeForm />\n      <NodeDetail />\n      <SystemsGraph />\n    </Page>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons'\nimport App from './App'\n\ninitializeIcons()\n\nrender(<App />, document.getElementById('root'))\n"],"sourceRoot":""}