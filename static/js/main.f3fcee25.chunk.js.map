{"version":3,"sources":["components/Legend/Legend.js","util/Subject.js","util/Graph.js","util/Network.js","hooks/useEvent.js","hooks/useEventListener.js","components/SystemsGraph/SystemsGraph.js","util/FileManager.js","components/CommandBar/CommandBar.js","components/SystemForm/ConnectionReadWrite.js","components/SystemForm/Connection.js","components/SystemForm/SystemType.js","components/SystemForm/SystemFormView.js","components/SystemForm/SystemForm.js","components/NodeDetail/NodeDetailView.js","components/NodeDetail/NodeDetail.js","components/Loading/Loading.js","components/DiagramForm/DiagramFormView.js","components/DiagramForm/DiagramForm.js","App.js","index.js"],"names":["LegendContainer","styled","div","_templateObject","LegendIcon","i","_templateObject2","OnCampus","attrs","props","className","_templateObject3","External","_templateObject4","Cloud","_templateObject5","NodeContainer","_templateObject6","Label","span","_templateObject7","Node","Icon","icon","react_default","a","createElement","label","EdgeContainer","_templateObject8","EdgeStyle","_templateObject9","_ref","dashed","_ref2","color","EdgeStyleContainer","_templateObject10","Edge","Legend","Legend_Node","Legend_Edge","_handlers","Subject","subscribe","event","handler","push","unsubscribe","filter","func","next","_len","arguments","length","args","Array","_key","forEach","apply","Object","freeze","Graph","_get","key","defaultValue","value","localStorage","getItem","JSON","parse","err","_set","setItem","stringify","fixEdges","oldEdges","edges","objectSpread","edgeKeys","keys","didFix","nodeEdges","currentEdgeID","edge","node","otherEdges","otherEdgeIndex","findIndex","splice","updateNodePosition","asyncToGenerator","regenerator_default","mark","_callee","x","y","nodes","wrap","_context","prev","getNodes","sent","position","abrupt","setNodes","stop","_x","this","updateBatchNodePositions","_ref3","_callee2","existingNodes","_context2","entries","_ref4","_ref5","slicedToArray","_ref5$","_x2","getEdges","_ref6","_callee3","current","_edges","_fixEdges","_edges2","_context3","getCurrentDiagram","updateDiagrams","removeItem","get","setEdges","getNodesArray","_ref7","_callee4","_context4","values","_ref8","_callee5","_context5","_nodes","getDiagrams","_ref9","_callee6","_context6","_ref10","_callee7","diagram","diagrams","_context7","_id","_x3","_ref11","_callee8","_context8","_x4","_ref12","_callee9","_context9","_x5","addNode","_ref13","_callee10","_context10","id","Error","makeEdges","_x6","addEdge","_ref14","_callee11","node1","node2","data","_context11","isArray","addDirectedEdge","_x7","_x8","_x9","_ref15","_callee12","node2TargetID","_context12","_ref16","_x10","_x11","_x12","removeDirectedEdge","_ref17","_callee13","_context13","_ref18","_x13","_x14","removeEdge","_ref19","_callee14","_context14","_ref20","_x15","_x16","makeNode","_ref22","_callee15","_ref21","connections","connectionKeys","previousEdges","removeEdges","_context15","concat","undefined","map","item","uuid","index","remove","info","type","read","write","existingEdgeIndex","text","_x17","_ref23","_callee16","_loop","cleanup","_context17","prevEdge","_context16","find","_ref24","delegateYield","differenceby","_x18","setCurrentDiagram","_ref25","_callee17","_context18","_x19","setName","_ref26","_callee18","name","_context19","_name","_x20","saveUploadedData","_ref28","_callee19","_ref27","_context20","_x21","_ref29","_callee20","diagramKeys","_context21","makeNewDiagram","_ref31","_callee21","_ref30","_context22","_x22","_Graph","Network","_options","_container","_network","makeData","DataSet","builder","withEdges","withNodes","withOptions","options","inContainer","element","build","VisNetwork","once","fit","animation","duration","easingFunction","network","setData","_Network","useEvent","useEffect","useEventListener","eventName","window","savedHandler","useRef","addEventListener","eventListener","removeEventListener","systemsReducer","state","action","buildGraphData","getLinkColor","getArrowDirection","graphData","shape","shapeProperties","size","face","code","getShape","font","strokeWidth","strokeColor","shadow","enabled","nodeId","from","to","smooth","roundness","hover","highlight","dashes","arrows","SystemsGraph","_useReducer","useReducer","_useReducer2","systems","systemsDispatch","_useState","useState","_useState2","activeNode","setActiveNode","lastAdded","selectedNodes","holdingShift","graphContainer","graph","updateGraph","displayNodeDetails","results","selected","getSelectedNodes","unselectAll","selectNodes","handleNodeSelect","useCallback","params","isCluster","matchingNode","handleNodeClick","getNodeAt","pointer","DOM","toConsumableArray","handleNodeDrag","positions","getPositions","handleKeyDown","ctrlKey","keyCode","preventDefault","shiftKey","handleKeyUp","off","on","console","log","focus","scale","start","Date","systemGraph","autoResize","interaction","hoverConnectedEdges","physics","document","e","Fragment","style","overflow","height","ref","Legend_Legend","downloadFile","filename","setAttribute","encodeURIComponent","dayjs","format","display","body","appendChild","click","removeChild","handleFile","reader","FileReader","readAsBinaryString","target","files","onloadend","result","handleSearch","toLowerCase","includes","SearchNodes","SearchBox","placeholder","styles","root","width","alignSelf","onChange","debounce","CommandBar","toggleSystemForm","toggleDiagramForm","querySelector","farItems","onRender","nearItems","iconProps","iconName","subMenuProps","items","onClick","uploadFile","_onClick","CommandBar_CommandBar","canChange","nextPath","nextValue","currentRead","currentWrite","ConnectionReadWrite","Stack","marginRight","marginTop","verticalAlign","tokens","childrenGap","Checkbox","checked","ConnectionContainer","Connection_templateObject","Connection","handleRemove","edit","addNodeForm","nodeFormErrors","setNodeFormErrors","existingSystems","updateNodeForm","selectedTarget","selectedType","selectedRead","selectedWrite","targetError","typeError","path","IconButton","Dropdown","errorMessage","selectedKey","errors","ConnectionReadWrite_ConnectionReadWrite","SystemType","React","memo","required","prevProps","nextProps","keysUnchanged","errorUnchanged","SystemFormView","addConnection","loading","TextField","onGetErrorMessage","newSystem","String","some","department","url","URL","message","checkURL","multiline","rows","description","conn","cloneElement","renderConnections","ActionButton","makeConnections","system","connectionType","connectedTo","addNodeReducer","addNodeState","unset","formState","set","connectionReducer","Connection_Connection","dispatch","getSystems","sort","b","validate","error","SystemForm","setLoading","_useState3","_useState4","setEdit","_useState5","_useState6","isOpen","setIsOpen","_useState7","_useState8","setExistingSystems","_useState9","_useState10","_useReducer3","_useReducer4","connDispatch","resetForm","resetConnections","_Network$build","getConnectedNodes","connectedNodes","makeFormState","submitSystem","_node","broadcastNodeSave","nodeAdded","dismiss","updateExistingSystems","Panel","headerText","onDismiss","isFooterAtBottom","onRenderFooterContent","horizontal","horizontalAlign","DefaultButton","PrimaryButton","PanelType","medium","SystemFormView_SystemFormView","NodeDetailView","Text","textDecoration","variant","href","rel","CustomPanel","NodeDetail_templateObject","NodeDetail","setNode","editSystem","deselectActiveNode","handleEdit","onRenderHeader","marginLeft","marginBottom","isLightDismiss","customNear","customWidth","NodeDetail_NodeDetailView","cubeMove","keyframes","Loading_templateObject","cubeCSS","Loading_templateObject2","css","Loading_templateObject3","Loading_templateObject4","Loading_templateObject5","Form","DiagramFormView_templateObject","ButtonGroup","DiagramFormView_templateObject2","Title","DiagramFormView_templateObject3","Close","DiagramFormView_templateObject4","DialogFormView","form","setForm","setErrors","submit","handleNameChange","handleCopyChange","Toggle","inlineLabel","onText","offText","copy","formReducer","removedState","updatedState","DiagramForm","initialForm","openDiagramForm","closeDiagramForm","broadcastGraphDataUpdate","shouldCopy","Modal","isBlocking","DiagramFormView_DialogFormView","Page","App_templateObject","App","CommandBar_CommandBar_CommandBar","DiagramForm_DiagramForm","SystemsGraph_SystemsGraph","SystemForm_SystemForm","NodeDetail_NodeDetail","initializeIcons","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.f3fcee25.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst LegendContainer = styled.div`\n  transform: scale(0.3) translate3d(-392px, 450px, 0);\n  position: absolute;\n  bottom: 12px;\n  left: 12px;\n  width: 300px;\n  border: solid 2px #808080;\n  border-radius: 3px;\n  background-color: #e8e3db;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  display: flex;\n  padding: 12px;\n\n  @media only screen and (max-width: 767px) {\n    display: none;\n  }\n\n  transition: transform 300ms ease-in-out;\n\n  &:hover {\n    transform: scale(1) translate3d(0, 0, 0);\n  }\n`\n\nconst LegendIcon = styled.i`\n  color: white;\n  font-size: 60px;\n  text-shadow: 2px 2px 4px #808080;\n  margin: 8px;\n  min-width: 60px;\n`\n\nconst OnCampus = styled(LegendIcon).attrs(props => ({ className: 'ion-md-star' }))``\nconst External = styled(LegendIcon).attrs(props => ({ className: 'ion-md-square' }))``\nconst Cloud = styled(LegendIcon).attrs(props => ({ className: 'ion-md-cloud' }))``\n\nconst NodeContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`\n\nconst Label = styled.span`\n  color: #363534;\n  font-size: 18px;\n`\n\nconst Node = props => {\n  const Icon = props.icon\n  return (\n    <NodeContainer>\n      <Icon />\n      <Label>{props.label}</Label>\n    </NodeContainer>\n  )\n}\n\nconst EdgeContainer = styled(NodeContainer)`\n  margin-top: 12px;\n  margin-bottom: 24px;\n`\n\nconst EdgeStyle = styled.div`\n  width: 45px;\n  min-width: 45px;\n  border-top: ${({ dashed }) => dashed ? 'dashed' : 'solid'} ${({ color }) => color} 4px;\n`\n\nconst EdgeStyleContainer = styled.div`\n  width: 60px;\n  min-width: 60px;\n  margin: 8px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst Edge = props => {\n  const { color, label, dashed } = props\n  return (\n    <EdgeContainer>\n      <EdgeStyleContainer>\n        <EdgeStyle color={color} dashed={dashed} />\n      </EdgeStyleContainer>\n      <Label >{label}</Label>\n    </EdgeContainer>\n  )\n}\n\nexport const Legend = props => {\n  return (\n    <LegendContainer>\n      <Node icon={OnCampus} label='On Campus System' />\n      <Node icon={External} label='External System' />\n      <Node icon={Cloud} label='Cloud System' />\n      <Edge color='#005481' dashed label='Custom Interface' />\n      <Edge color='#9e6614' label='Built-in Interface' />\n    </LegendContainer>\n  )\n}\n","const _handlers = {}\n\nexport const Subject = {\n  subscribe (event, handler) {\n    if (!_handlers[event]) _handlers[event] = []\n    _handlers[event].push(handler)\n  },\n  unsubscribe (event, handler) {\n    if (!_handlers[event]) return\n    _handlers[event] = _handlers[event].filter(func => func !== handler)\n  },\n  next (event, ...args) {\n    if (!_handlers[event]) return\n    _handlers[event].forEach(handler => {\n      if (typeof handler === 'function') {\n        handler(...args)\n      }\n    })\n  }\n}\n\nObject.freeze(Subject)\n","import get from 'lodash.get'\nimport differenceby from 'lodash.differenceby'\nimport uuid from 'uuid/v4'\n\nconst shouldFixEdges = true\n\nconst _Graph = () => {\n  const _get = (key, defaultValue) => {\n    const value = localStorage.getItem(key) || defaultValue\n    try {\n      const parsed = JSON.parse(value)\n      return parsed\n    } catch (err) {\n      return value\n    }\n  }\n  const _set = (key, value) => localStorage.setItem(key, JSON.stringify(value))\n\n  const fixEdges = oldEdges => {\n    const edges = { ...oldEdges }\n    const edgeKeys = Object.keys(edges)\n    let didFix = false\n\n    edgeKeys.forEach(key => {\n      const nodeEdges = edges[key]\n      const currentEdgeID = key\n      nodeEdges.forEach(edge => {\n        if (edge.node === key) return\n        const otherEdges = edges[edge.node]\n        const otherEdgeIndex = otherEdges && otherEdges.findIndex(edge => edge.node === currentEdgeID)\n        if (otherEdgeIndex >= 0) {\n          otherEdges.splice(otherEdgeIndex, 1)\n          if (!didFix) didFix = true\n        }\n      })\n\n      if (edges.length <= 0) delete nodeEdges[key]\n    })\n\n    return { edges, didFix }\n  }\n\n  const updateNodePosition = async ({ node, x, y }) => {\n    const nodes = await getNodes()\n    if (nodes[node]) {\n      nodes[node].position = {\n        x,\n        y\n      }\n    }\n    return setNodes(nodes)\n  }\n\n  const updateBatchNodePositions = async (nodes) => {\n    const existingNodes = await getNodes()\n    Object.entries(nodes).forEach(([node, { x, y }]) => {\n      if (existingNodes[node]) {\n        existingNodes[node].position = { x, y }\n      }\n    })\n    return setNodes(existingNodes)\n  }\n\n  const getEdges = async () => {\n    const current = await getCurrentDiagram()\n    if (!current._edges) {\n      const edges = await _get('_edges', {})\n      if (edges) {\n        current._edges = edges\n        await updateDiagrams(current)\n        await localStorage.removeItem('_edges')\n      }\n    }\n\n    const _edges = get(current, `_edges`, {})\n    if (shouldFixEdges) {\n      const { didFix, edges } = fixEdges(_edges)\n      if (didFix) {\n        await setEdges(edges)\n      }\n    }\n    return _edges\n  }\n\n  const getNodesArray = async () => {\n    const nodes = await getNodes()\n    return Object.values(nodes)\n  }\n\n  const getNodes = async () => {\n    const current = await getCurrentDiagram()\n    if (!current._nodes) {\n      const nodes = await _get('_nodes', {})\n      if (nodes) {\n        current._nodes = nodes\n        await updateDiagrams(current)\n        await localStorage.removeItem('_nodes')\n      }\n    }\n\n    return get(current, `_nodes`, {})\n  }\n\n  const getDiagrams = async () => {\n    return _get('_diagrams', {})\n  }\n\n  const updateDiagrams = async (diagram) => {\n    const diagrams = await getDiagrams()\n    diagrams[diagram._id] = diagram\n    return _set('_diagrams', diagrams)\n  }\n\n  const setEdges = async (edges) => {\n    const current = await getCurrentDiagram()\n    current._edges = edges\n    return updateDiagrams(current)\n  }\n\n  const setNodes = async (nodes) => {\n    const current = await getCurrentDiagram()\n    current._nodes = nodes\n    return updateDiagrams(current)\n  }\n\n  const addNode = async (node) => {\n    if (!node.id) throw new Error('Nodes must have IDs to be added')\n    const _nodes = await getNodes()\n\n    _nodes[node.id] = node\n\n    await makeEdges(node)\n    await setNodes(_nodes)\n  }\n\n  const addEdge = async (node1, node2, data) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to add edges')\n\n    const _edges = await getEdges()\n\n    if (!Array.isArray(_edges[node1.id])) _edges[node1.id] = []\n\n    await addDirectedEdge(node1, node2, data)\n  }\n\n  const addDirectedEdge = async (node1, node2, data) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to add directed edges')\n\n    const _edges = await getEdges()\n\n    if (!Array.isArray(_edges[node1.id])) _edges[node1.id] = []\n\n    const node2TargetID = _edges[node1.id].findIndex(({ node }) => node === node2.id)\n\n    if (node2TargetID >= 0) {\n      // Replace edge because it exists already\n      _edges[node1.id][node2TargetID] = { node: node2.id, data }\n    } else {\n      // Add edge, it does not exist\n      _edges[node1.id].push({ node: node2.id, data })\n    }\n\n    await setEdges({ ..._edges })\n  }\n\n  const removeDirectedEdge = async (node1, node2) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to remove directed eges')\n\n    const _edges = await getEdges()\n\n    _edges[node1.id] = _edges[node1.id] && _edges[node1.id].filter(({ node }) => node !== node2.id)\n\n    await setEdges(_edges)\n  }\n\n  const removeEdge = async (node1, node2) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to remove edges')\n\n    const _edges = await getEdges()\n\n    _edges[node1.id] = _edges[node1.id] && _edges[node1.id].filter(({ node }) => node !== node2.id)\n\n    await setEdges(_edges)\n  }\n\n  const makeNode = async ({ id, data, connections }) => {\n    let node = null\n    if (id) {\n      const nodes = await getNodes()\n      const position = get(nodes, `[${id}].position`, { x: undefined, y: undefined })\n      node = {\n        id,\n        edges: [],\n        previousEdges: nodes[id].edges.map(item => ({ ...item })),\n        position,\n        data: {\n          ...nodes[id].data,\n          ...data\n        }\n      }\n    } else {\n      node = {\n        id: uuid(),\n        edges: [],\n        data: {\n          ...(data || {})\n        }\n      }\n    }\n\n    const connectionKeys = Object.keys(connections || {})\n    const previousEdges = get(node, 'previousEdges', [])\n\n    if (connectionKeys.length <= 0 && previousEdges.length > 0) {\n      const edges = await getEdges()\n      delete edges[node.id]\n      const removeEdges = []\n      Object.keys(edges).forEach(key => {\n        edges[key].forEach((edge, index) => {\n          if (edge.node === node.id) {\n            removeEdges.push({ key, index })\n          }\n        })\n      })\n      removeEdges.forEach(remove => {\n        edges[remove.key].splice(remove.index, 1)\n      })\n      await setEdges({ ...edges })\n      return node\n    }\n\n    connectionKeys.forEach(key => {\n      const info = get(connections, `${[key]}.connectedTo`, null)\n      if (!info) throw new Error('You cannot make a connection without a target')\n      const type = get(connections, `${[key]}.connectionType`, null)\n      if (!type) throw new Error('You cannot make a connection without a type')\n\n      const read = get(connections, `${[key]}.read`, null)\n      const write = get(connections, `${[key]}.write`, null)\n\n      if (!read && !write) throw new Error('You must specify a read or a write option')\n\n      const data = get(connections, `[${key}].data`, {})\n\n      const existingEdgeIndex = node.edges.findIndex(edge => edge.id === key)\n\n      if (existingEdgeIndex >= 0) {\n        node.edges[existingEdgeIndex] = {\n          id: info.key,\n          data: {\n            ...data,\n            read,\n            write,\n            type: {\n              id: type.key,\n              label: type.text\n            }\n          }\n        }\n      } else {\n        node.edges.push({\n          id: info.key,\n          data: {\n            ...data,\n            read,\n            write,\n            type: {\n              id: type.key,\n              label: type.text\n            }\n          }\n        })\n      }\n    })\n    return node\n  }\n\n  const makeEdges = async (node) => {\n    const edges = get(node, 'edges', [])\n    const previousEdges = get(node, 'previousEdges', [])\n\n    if (edges.length <= 0) return\n\n    for (let i = 0; i < edges.length; i++) {\n      const edge = edges[i]\n\n      const read = get(edge, 'data.read')\n      const write = get(edge, 'data.write')\n\n      const node1 = {\n        id: get(node, 'id')\n      }\n      const node2 = {\n        id: get(edge, 'id')\n      }\n\n      const prevEdge = previousEdges.find(({ id }) => id === edge.id)\n\n      const prev = {\n        read: get(prevEdge, `data.read`, read),\n        write: get(prevEdge, `data.write`, write)\n      }\n\n      if (prev.read && !read) {\n        await removeDirectedEdge(node2, node1)\n      }\n\n      if (prev.write && !write) {\n        await removeDirectedEdge(node1, node2)\n      }\n\n      if (read && write) {\n        await addEdge(node1, node2, get(edge, 'data'))\n      } else if (read) {\n        await addDirectedEdge(node2, node1, get(edge, 'data'))\n      } else if (write) {\n        await addDirectedEdge(node1, node2, get(edge, 'data'))\n      }\n    }\n\n    const cleanup = differenceby(previousEdges, node.edges, 'id')\n\n    if (cleanup.length >= 0) {\n      for (let i = 0; i < cleanup.length; i++) {\n        const edge = cleanup[i]\n\n        const read = get(edge, 'data.read')\n        const write = get(edge, 'data.write')\n\n        const node1 = {\n          id: get(node, 'id')\n        }\n        const node2 = {\n          id: get(edge, 'id')\n        }\n\n        if (read && write) {\n          await removeEdge(node1, node2)\n        } else if (read) {\n          await removeDirectedEdge(node2, node1)\n        } else if (write) {\n          await removeDirectedEdge(node1, node2)\n        }\n      }\n    }\n  }\n\n  const setCurrentDiagram = async (id) => {\n    return _set('_currentDiagram', id)\n  }\n\n  const setName = async (name) => {\n    const current = await getCurrentDiagram()\n    current._name = name\n    return updateDiagrams(current)\n  }\n\n  const saveUploadedData = async ({ edges, nodes, id, name }) => {\n    if (id) {\n      await setCurrentDiagram(id)\n    }\n\n    if (name) {\n      await setName(name)\n    }\n    await setNodes(nodes)\n    await setEdges(edges)\n  }\n\n  const getCurrentDiagram = async () => {\n    const diagrams = await getDiagrams()\n    let current = _get('_currentDiagram', null)\n    const diagramKeys = Object.keys(diagrams)\n    if (!current) {\n      if (diagramKeys.length > 0) {\n        current = diagramKeys[0]\n      } else {\n        current = uuid()\n      }\n      _set('_currentDiagram', current)\n    }\n    const diagram = diagrams[current]\n\n    return diagram || { _id: current }\n  }\n\n  const makeNewDiagram = async ({ name, edges, nodes }) => {\n    const _id = uuid()\n    const diagram = {\n      _id,\n      _name: name,\n      _edges: edges,\n      _nodes: nodes\n    }\n\n    await updateDiagrams(diagram)\n    return diagram\n  }\n\n  return {\n    getNodes,\n    getEdges,\n    addNode,\n    removeEdge,\n    removeDirectedEdge,\n    updateNodePosition,\n    updateBatchNodePositions,\n    saveUploadedData,\n    getCurrentDiagram,\n    makeNewDiagram,\n    getNodesArray,\n    setCurrentDiagram,\n    makeNode\n  }\n}\n\nexport const Graph = _Graph()\n","import { Network as VisNetwork, DataSet } from 'vis-network'\nimport { Graph } from './Graph'\n\nconst _Network = () => {\n  let _nodes = []\n  let _edges = []\n  let _options = {}\n  let _container = null\n  let _network = null\n\n  const inContainer = element => {\n    _container = element\n    return builder\n  }\n\n  const withNodes = nodes => {\n    _nodes = nodes\n    return builder\n  }\n\n  const withEdges = edges => {\n    _edges = edges\n    return builder\n  }\n\n  const withOptions = options => {\n    _options = options\n    return builder\n  }\n\n  const makeData = () => {\n    return {\n      nodes: new DataSet(_nodes),\n      edges: new DataSet(_edges)\n    }\n  }\n\n  const build = () => {\n    if (!_network) {\n      _network = new VisNetwork(_container, makeData(), _options)\n      _network.once('afterDrawing', function () {\n        _network.fit({\n          animation: {\n            duration: 600,\n            easingFunction: 'easeInOutQuad'\n          }\n        })\n      })\n    }\n    return {\n      network: _network,\n      setData: ({ nodes, edges }) => {\n        _nodes = nodes\n        _edges = edges\n        _network.setData(makeData())\n      },\n      updateNodePosition: Graph.updateNodePosition,\n      getNodes: () => _nodes,\n      getEdges: () => _edges\n    }\n  }\n\n  const builder = {\n    withEdges,\n    withNodes,\n    withOptions,\n    inContainer,\n    build\n  }\n\n  return builder\n}\n\nexport const Network = _Network()\n","import { useEffect } from 'react'\nimport { Subject } from '../util/Subject'\n\nexport const useEvent = (event, handler) => {\n  useEffect(() => {\n    if (typeof handler !== 'function') return\n    Subject.subscribe(event, handler)\n    return () => Subject.unsubscribe(event, handler)\n  }, [event, handler])\n\n  return value => Subject.next(event, value)\n}\n","import { useRef, useEffect } from 'react'\n\nexport const useEventListener = (eventName, handler, element = window) => {\n  // Create a ref that stores handler\n  const savedHandler = useRef()\n\n  // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n  useEffect(() => {\n    savedHandler.current = handler\n  }, [handler])\n\n  useEffect(\n    () => {\n      // Make sure element supports addEventListener\n      // On\n      const isSupported = element && element.addEventListener\n      if (!isSupported) return\n\n      // Create event listener that calls handler function stored in ref\n      const eventListener = event => savedHandler.current(event)\n\n      // Add event listener\n      element.addEventListener(eventName, eventListener)\n\n      // Remove event listener on cleanup\n      return () => {\n        element.removeEventListener(eventName, eventListener)\n      }\n    },\n    [eventName, element] // Re-run if eventName or element changes\n  )\n}\n","import React, { useReducer, useEffect, useCallback, useState, useRef } from 'react'\nimport { Legend } from '../Legend'\nimport { Network, Graph, Subject } from '../../util'\nimport { useEvent, useEventListener } from '../../hooks'\nimport get from 'lodash.get'\n\nconst systemsReducer = (state, action) => {\n  switch (action.type) {\n    case 'update':\n      const nodes = action.nodes\n      const edges = action.edges\n      return buildGraphData(nodes, edges)\n    default:\n      return state\n  }\n}\n\nconst getLinkColor = (type) => {\n  switch (type) {\n    case 'custom':\n      return '#005481'\n    case 'builtin':\n      return '#9e6614'\n    default:\n      return '#A0A0A0'\n  }\n}\n\nconst getShape = (type) => {\n  switch (type) {\n    case 'cloud':\n      // Cloud shape\n      return { shape: 'icon', shapeProperties: { size: 25 }, icon: { face: 'Ionicons', code: '\\uf2c9', color: '#FFF' } }\n    case 'external':\n      return { shape: 'icon', shapeProperties: { size: 25 }, icon: { face: 'Ionicons', code: '\\uf381', color: '#FFF' } }\n    case 'oncampus':\n    default:\n      // Square Shape\n      return { shape: 'icon', shapeProperties: { size: 25 }, icon: { face: 'Ionicons', code: '\\uf384', color: '#FFF' } }\n  }\n}\n\nconst getArrowDirection = (edge) => {\n  const read = get(edge, 'data.read')\n  const write = get(edge, 'data.write')\n\n  if (read && write) return 'from, to'\n  return 'to'\n}\n\nconst buildGraphData = (nodes, edges) => {\n  const graphData = {\n    nodes: [],\n    edges: []\n  }\n\n  const nodeKeys = Object.keys(nodes || {})\n  nodeKeys.forEach(key => {\n    const node = nodes[key]\n\n    graphData.nodes.push({\n      id: node.id,\n      type: node.data.type,\n      ...getShape(node.data.type),\n      label: node.data.name,\n      edges: node.edges,\n      font: {\n        color: '#363534',\n        strokeWidth: 2,\n        strokeColor: '#FFFFFF'\n      },\n      shadow: {\n        enabled: true,\n        size: 4,\n        x: 1,\n        y: 1\n      },\n      data: {\n        ...node.data\n      },\n      color: '#FFFFFF',\n      x: get(node, 'position.x'),\n      y: get(node, 'position.y')\n    })\n  })\n\n  const edgeKeys = Object.keys(edges || {})\n  edgeKeys.forEach(nodeId => {\n    const edgeList = edges[nodeId]\n\n    edgeList.forEach(edge => {\n      graphData.edges.push({\n        from: nodeId,\n        to: edge.node,\n        smooth: {\n          enabled: true,\n          type: 'cubizBezier',\n          roundness: 0.15\n        },\n        color: {\n          color: getLinkColor(get(edge, 'data.type.id')),\n          hover: '#501214',\n          highlight: '#501214'\n        },\n        dashes: get(edge, 'data.type.id') === 'custom',\n        type: get(edge, 'data.type', {}),\n        arrows: getArrowDirection(edge, nodeId)\n      })\n    })\n  })\n\n  return graphData\n}\n\nexport const SystemsGraph = () => {\n  const [systems, systemsDispatch] = useReducer(systemsReducer, { nodes: [], edges: [] })\n  const [activeNode, setActiveNode] = useState()\n  const lastAdded = useRef()\n  const selectedNodes = useRef([])\n  const holdingShift = useRef(false)\n\n  const graphContainer = useRef()\n  const graph = useRef()\n\n  const updateGraph = async () => {\n    const nodes = await Graph.getNodes()\n    const edges = await Graph.getEdges()\n    lastAdded.current = null\n    selectedNodes.current = []\n    holdingShift.current = false\n    systemsDispatch({ type: 'update', nodes, edges })\n  }\n\n  const updateSearchResults = (results) => {\n    if (graph.current.network) {\n      if (results.length <= 0) {\n        const selected = graph.current.network.getSelectedNodes()\n        graph.current.network.unselectAll()\n\n        // Were there nodes selected? Zoom back out.\n        if (selected.length > 0) {\n          graph.current.network.fit({\n            animation: {\n              duration: 300,\n              easingFunction: 'easeInOutQuad'\n            }\n          })\n        }\n        return\n      }\n      graph.current.network.selectNodes(results)\n      graph.current.network.fit({\n        nodes: results,\n        animation: {\n          duration: 300,\n          easingFunction: 'easeInOutQuad'\n        }\n      })\n    }\n  }\n\n  useEffect(() => {\n    updateGraph()\n  }, [])\n\n  const resetActiveNode = () => setActiveNode(null)\n  const displayNodeDetails = useEvent('display-node-details')\n  useEvent('node-search-result', updateSearchResults)\n\n  const handleNodeSelect = useCallback(params => {\n    const node = get(params, `nodes[0]`, null)\n    if (params.nodes.length > 1 || holdingShift) return\n\n    if (node) {\n      if (!graph.current.network.isCluster(node) && !holdingShift.current) {\n        const matchingNode = systems.nodes.find(({ id }) => id === node)\n        if (matchingNode) {\n          setActiveNode(matchingNode)\n        }\n      }\n    }\n  }, [systems.nodes])\n\n  const handleNodeClick = useCallback(params => {\n    const node = graph.current.network.getNodeAt(params.pointer.DOM)\n    if (node) {\n      if (!graph.current.network.isCluster(node) && !holdingShift.current) {\n        const matchingNode = systems.nodes.find(({ id }) => id === node)\n        if (matchingNode) {\n          setActiveNode(matchingNode)\n        }\n      }\n\n      if (holdingShift.current && params.nodes[0]) {\n        const selected = [...selectedNodes.current, params.nodes[0]]\n        selectedNodes.current = selected\n        graph.current.network.selectNodes(selected)\n      }\n    } else {\n      selectedNodes.current = []\n    }\n  }, [systems.nodes])\n\n  const handleNodeDrag = useCallback(event => {\n    if (event.nodes.length > 0) {\n      const positions = graph.current.network.getPositions(event.nodes)\n      Graph.updateBatchNodePositions(positions)\n    }\n  }, [])\n\n  const handleKeyDown = useCallback(event => {\n    if (event.ctrlKey && event.keyCode === 70) {\n      event.preventDefault()\n      Subject.next('focus-search-bar')\n    }\n    if (event.shiftKey && !holdingShift.current) {\n      holdingShift.current = true\n    }\n  }, [holdingShift])\n\n  const handleKeyUp = useCallback(event => {\n    if (!event.shiftKey && holdingShift.current) {\n      holdingShift.current = false\n    }\n  }, [holdingShift])\n\n  useEventListener('keydown', handleKeyDown)\n  useEventListener('keyup', handleKeyUp)\n\n  useEffect(() => {\n    if (activeNode) displayNodeDetails(activeNode)\n  }, [activeNode, displayNodeDetails])\n\n  const updateLastAdded = (node) => {\n    lastAdded.current = node\n  }\n\n  useEvent('graph-data-updated', updateGraph)\n  useEvent('deselect-active-node', resetActiveNode)\n  useEvent('node-added', updateLastAdded)\n\n  useEffect(() => {\n    const options = {\n      autoResize: false,\n      interaction: {\n        hover: true,\n        hoverConnectedEdges: true\n      },\n      physics: {\n        enabled: false\n      }\n    }\n\n    if (!graph.current) {\n      const start = new Date()\n      const systemGraph = Network\n        .inContainer(graphContainer.current)\n        .withEdges(systems.edges)\n        .withNodes(systems.nodes)\n        .withOptions(options)\n        .build()\n\n      console.log(`Network Build Time: ${new Date() - start}ms`)\n      graph.current = systemGraph\n\n      graph.current.network.on('selectNode', handleNodeSelect)\n      graph.current.network.on('dragEnd', handleNodeDrag)\n      graph.current.network.on('click', handleNodeClick)\n\n      document.addEventListener('contextmenu', e => e.preventDefault(), false)\n    } else {\n      graph.current.network.off('selectNode')\n      graph.current.network.off('dragEnd')\n      graph.current.network.off('click')\n\n      graph.current.network.on('selectNode', handleNodeSelect)\n      graph.current.network.on('click', handleNodeClick)\n      graph.current.network.on('dragEnd', handleNodeDrag)\n\n      console.log('redrawing')\n      graph.current.setData(systems)\n      if (lastAdded.current) {\n        graph.current.network.focus(lastAdded.current, {\n          scale: 1,\n          animation: {\n            duration: 300,\n            easingFunction: 'easeInOutCubic'\n          }\n        })\n        graph.current.network.selectNodes([lastAdded.current])\n      }\n    }\n  }, [systems, handleNodeClick, handleNodeDrag, handleNodeSelect])\n\n  return (\n    <>\n      <div style={{ overflow: 'hidden', height: 'calc(100% - 44px)' }} ref={graphContainer} id='graph' />\n      <Legend />\n    </>\n  )\n}\n","import dayjs from 'dayjs'\nimport get from 'lodash.get'\nimport uuid from 'uuid/v4'\nimport { Graph } from './Graph'\nimport { Subject } from './Subject'\n\nexport const downloadFile = async () => {\n  const current = await Graph.getCurrentDiagram()\n  const filename = get(current, '_name', 'Default Name')\n  const data = JSON.stringify({\n    id: get(current, '_id'),\n    name: get(current, '_name', 'Generic and Unnamed Diagram With Exceptionally Long Title'),\n    nodes: get(current, '_nodes', {}),\n    edges: get(current, '_edges', {})\n  })\n  const element = document.createElement('a')\n  element.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(data)}`)\n  element.setAttribute('download', `${filename} - ${dayjs().format('YYYY-MM-DD/THHmmss')}.json`)\n\n  element.style.display = 'none'\n  document.body.appendChild(element)\n  element.click()\n  document.body.removeChild(element)\n}\n\nconst handleFile = (event) => {\n  const reader = new FileReader()\n  reader.readAsBinaryString(event.target.files[0])\n\n  reader.onloadend = async () => {\n    const data = JSON.parse(reader.result)\n    const edges = get(data, 'edges', {})\n    const nodes = get(data, 'nodes', {})\n    const id = get(data, 'id', uuid())\n    const name = get(data, 'name', 'Unnamed System')\n\n    await Graph.saveUploadedData({ edges, nodes, name, id })\n    Subject.next('graph-data-updated')\n  }\n}\n\nexport const uploadFile = () => {\n  const element = document.createElement('input')\n  element.setAttribute('type', 'file')\n  element.setAttribute('accept', '.json')\n\n  element.style.display = 'none'\n  element.addEventListener('change', handleFile)\n  element.click()\n}\n","import React, { useEffect } from 'react'\nimport { useEvent } from '../../hooks'\nimport { CommandBar as OfficeCommandBar } from 'office-ui-fabric-react/lib/CommandBar'\nimport { SearchBox } from 'office-ui-fabric-react/lib/SearchBox'\nimport { downloadFile, uploadFile } from '../../util/FileManager'\nimport { Graph, Subject } from '../../util'\nimport debounce from 'lodash.debounce'\nimport get from 'lodash.get'\n\nconst handleSearch = async (event, value) => {\n  const nodes = await Graph.getNodesArray()\n\n  let results = nodes && nodes.filter(node => {\n    const name = get(node, 'data.name', '').toLowerCase()\n    return name.includes(value.toLowerCase())\n  }).map(({ id }) => id)\n\n  if (!value) {\n    results = []\n  }\n\n  Subject.next('node-search-result', results)\n}\n\nconst SearchNodes = () => {\n  return (\n    <SearchBox\n      id='search-box-nodes'\n      placeholder='Search'\n      className='searchBox'\n      styles={{\n        root: {\n          width: '250px',\n          alignSelf: 'center'\n        }\n      }}\n      onChange={debounce(handleSearch, 500)}\n    />\n  )\n}\n\nexport const CommandBar = props => {\n  const toggleSystemForm = useEvent('toggle-system-form')\n  const toggleDiagramForm = useEvent('toggle-diagram-form')\n\n  useEffect(() => {\n    const focusSearch = () => {\n      const searchBox = document.querySelector('#search-box-nodes')\n      searchBox.focus()\n    }\n\n    Subject.subscribe('focus-search-bar', focusSearch)\n  }, [])\n\n  const farItems = [\n    {\n      key: 'search',\n      onRender: SearchNodes\n    }\n  ]\n\n  const nearItems = [\n    {\n      key: 'add',\n      name: 'Add',\n      iconProps: {\n        iconName: 'Add'\n      },\n      subMenuProps: {\n        items: [\n          {\n            key: 'system',\n            name: 'System',\n            onClick: toggleSystemForm,\n            iconProps: {\n              iconName: 'GitGraph'\n            }\n          },\n          {\n            key: 'diagram',\n            name: 'Diagram',\n            onClick: toggleDiagramForm,\n            iconProps: {\n              iconName: 'VisioDiagram'\n            }\n          }\n        ]\n      }\n    },\n    {\n      key: 'upload',\n      name: 'Upload',\n      iconProps: {\n        iconName: 'Upload'\n      },\n      onClick: () => {\n        uploadFile()\n      }\n    },\n    {\n      key: 'download',\n      name: 'Download',\n      iconProps: {\n        iconName: 'Download'\n      },\n      onClick: async () => {\n        downloadFile()\n      }\n    }\n  ]\n\n  return (\n    <div>\n      <OfficeCommandBar\n        items={nearItems}\n        farItems={farItems}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox'\n\nconst canChange = (nextPath, nextValue) => (currentRead, currentWrite) => {\n  if (nextPath === 'read') {\n    return nextValue || currentWrite || false\n  }\n\n  if (nextPath === 'write') {\n    return nextValue || currentRead || false\n  }\n  return false\n}\n\nexport const ConnectionReadWrite = props => {\n  const { read, write, onChange } = props\n\n  return (\n    <Stack style={{ marginRight: 8, marginTop: 8 }} verticalAlign='space-between' tokens={{ childrenGap: 4 }}>\n      <Checkbox checked={read} onChange={(event, value) => {\n        if (canChange('read', value)(read, write)) {\n          onChange('read', value)\n        }\n      }} label='Read' />\n      <Checkbox checked={write} onChange={(event, value) => {\n        if (canChange('write', value)(read, write)) {\n          onChange('write', value)\n        }\n      }} label='Write' />\n    </Stack>\n  )\n}\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown'\nimport { ConnectionReadWrite } from './ConnectionReadWrite'\nimport get from 'lodash.get'\nimport { IconButton } from 'office-ui-fabric-react'\n\nconst ConnectionContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  justify-content: flex-start;\n  padding: 8px;\n  margin-top: 12px;\n  border: 1px solid rgb(138, 136, 134);\n  box-sizing: border-box;\n  border-radius: 1px;\n\n  & > .ms-Dropdown-container {\n    flex: 1;\n    width: 100%;\n    margin-right: 4px;\n  }\n\n  & > .ms-Button--icon {\n    align-self: flex-end;\n  }\n`\n\nexport const Connection = props => {\n  const { handleRemove, id, edit, addNodeForm, nodeFormErrors, setNodeFormErrors, existingSystems, updateNodeForm } = props\n  const selectedTarget = get(addNodeForm, `connections[${id}].connectedTo.key`, null)\n  const selectedType = get(addNodeForm, `connections[${id}].connectionType.key`, null)\n\n  const selectedRead = get(addNodeForm, `connections[${id}].read`, true)\n  const selectedWrite = get(addNodeForm, `connections[${id}].write`, false)\n\n  const targetError = get(nodeFormErrors, `[${id}].target`)\n  const typeError = get(nodeFormErrors, `[${id}].type`)\n\n  useEffect(() => {\n    if (!edit) {\n      updateNodeForm({\n        path: `connections[${id}].read`,\n        value: true\n      })\n    }\n  }, [updateNodeForm, id, edit])\n\n  return (\n    <ConnectionContainer>\n      <IconButton\n        iconProps={{ iconName: 'ChromeClose' }}\n        onClick={() => {\n          const connection = get(addNodeForm, `connections[${id}]`, null)\n          if (connection) {\n            updateNodeForm({\n              path: `connections[${id}]`,\n              type: 'remove'\n            })\n          }\n          handleRemove()\n        }}\n      />\n      <Dropdown\n        label='Connected To'\n        placeholder={`What does this system connect to?`}\n        options={existingSystems}\n        errorMessage={targetError}\n        selectedKey={selectedTarget}\n        onChange={(event, value) => {\n          updateNodeForm({\n            path: `connections[${id}].connectedTo`,\n            value: { key: value.key, text: value.text }\n          })\n          if (`${id}` in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors[id]\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <Dropdown\n        label='Interface'\n        options={[\n          { key: 'builtin', text: 'Built In' },\n          { key: 'custom', text: 'Custom' }\n        ]}\n        placeholder='How does this system connect?'\n        selectedKey={selectedType}\n        errorMessage={typeError}\n        onChange={(event, value) => {\n          updateNodeForm({\n            path: `connections[${id}].connectionType`,\n            value: { key: value.key, text: value.text, color: value.color }\n          })\n          if (`${id}` in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors[id]\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <ConnectionReadWrite\n        read={selectedRead}\n        write={selectedWrite}\n        onChange={(path, value) => {\n          updateNodeForm({\n            path: `connections[${id}].${path}`,\n            value\n          })\n        }}\n      />\n    </ConnectionContainer>\n  )\n}\n","import React from 'react'\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown'\n\nconst areEqual = (prevProps, nextProps) => {\n  const keysUnchanged = prevProps.selectedKey === nextProps.selectedKey\n  const errorUnchanged = prevProps.errorMessage === nextProps.errorMessage\n  return keysUnchanged && errorUnchanged\n}\n\nexport const SystemType = React.memo(props => {\n  const { selectedKey, onChange, required, errorMessage } = props\n\n  return (\n    <Dropdown\n      required={required}\n      label='System Type'\n      options={[\n        { key: 'oncampus', text: 'On Campus' },\n        { key: 'cloud', text: 'Cloud' },\n        { key: 'external', text: 'External' }\n      ]}\n      errorMessage={errorMessage}\n      placeholder='Where does this system live?'\n      selectedKey={selectedKey}\n      onChange={onChange}\n    />\n  )\n}, areEqual)\n","import React from 'react'\nimport { TextField } from 'office-ui-fabric-react/lib/TextField'\nimport { ActionButton } from 'office-ui-fabric-react'\nimport { SystemType } from './SystemType'\n\nconst renderConnections = ({ connections, existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors }) => {\n  return connections.map(conn => React.cloneElement(conn, { existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors }))\n}\n\nconst checkURL = url => {\n  if (!url) return\n  try {\n    const checkedURL = new URL(url)\n    if (checkedURL) return ''\n  } catch (err) {\n    return err.message\n  }\n}\n\nexport const SystemFormView = props => {\n  const {\n    nodeFormErrors,\n    existingSystems,\n    setNodeFormErrors,\n    addNodeForm,\n    updateNodeForm,\n    connections,\n    addConnection,\n    edit,\n    loading\n  } = props\n  if (loading) return null\n  return (\n    <>\n      <TextField\n        label='Name'\n        placeholder='Choose a name'\n        errorMessage={nodeFormErrors.name}\n        required\n        onGetErrorMessage={(value => {\n          const newSystem = String(value).toLowerCase()\n          const nameExists = existingSystems.some(({ text }) => String(text).toLowerCase() === newSystem)\n          if (nameExists && !edit) {\n            setNodeFormErrors({\n              ...nodeFormErrors,\n              name: `The ${value} system already exists`\n            })\n          } else {\n            if (nodeFormErrors.name) {\n              const errors = {\n                ...nodeFormErrors\n              }\n              delete errors.name\n              setNodeFormErrors(errors)\n            }\n          }\n        })}\n        onChange={(event, value) => updateNodeForm({ path: 'name', value })}\n        value={addNodeForm.name || ''}\n      />\n      <SystemType\n        required\n        errorMessage={nodeFormErrors.type}\n        selectedKey={addNodeForm.type || null}\n        onChange={(event, value) => {\n          updateNodeForm({ path: 'type', value: value.key })\n          if ('type' in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors.type\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <TextField\n        label='Department'\n        placeholder='Was this built for another department?'\n        onChange={(event, value) => updateNodeForm({ path: 'department', value })}\n        value={addNodeForm.department || ''}\n      />\n      <TextField\n        label='URL'\n        placeholder='Is there a url to access this system?'\n        errorMessage={nodeFormErrors.url}\n        onChange={(event, value) => {\n          updateNodeForm({ path: 'url', value })\n          if ('url' in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors.url\n            setNodeFormErrors(errors)\n          }\n        }}\n        onGetErrorMessage={value => {\n          if (!value) return\n          return checkURL(value)\n        }}\n        value={addNodeForm.url || ''}\n      />\n      <TextField\n        label='Description'\n        placeholder='Enter some information others may want to know about this system'\n        multiline\n        rows={4}\n        onChange={(event, value) => updateNodeForm({ path: 'description', value })}\n        value={addNodeForm.description || ''}\n      />\n      {renderConnections({ connections, existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors })}\n      <ActionButton\n        onClick={addConnection}\n        iconProps={{ iconName: 'Add' }}\n      >\n        Add Connection\n      </ActionButton>\n    </>\n  )\n}\n","import React, { useState, useEffect, useReducer } from 'react'\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel'\nimport { Graph } from '../../util'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { PrimaryButton, DefaultButton } from 'office-ui-fabric-react'\nimport { useEvent } from '../../hooks'\nimport get from 'lodash.get'\nimport uuid from 'uuid/v4'\nimport set from 'lodash.set'\nimport unset from 'lodash.unset'\nimport { Connection } from './Connection'\nimport { Network } from '../../util/Network'\nimport { SystemFormView } from './SystemFormView'\n\nconst makeConnections = (system, nodes) => {\n  const connections = {}\n  system.edges.forEach(edge => {\n    connections[edge.id] = {\n      read: edge.data.read,\n      write: edge.data.write,\n      connectionType: {\n        key: edge.data.type.id,\n        text: edge.data.type.label\n      },\n      connectedTo: {\n        key: edge.id,\n        text: get(nodes.filter(node => node.id === edge.id), '[0].data.name', '')\n      }\n    }\n  })\n  return connections\n}\n\nconst checkURL = url => {\n  if (!url) return\n  try {\n    const checkedURL = new URL(url)\n    if (checkedURL) return null\n  } catch (err) {\n    return err.message\n  }\n}\n\nconst makeFormState = system => {\n  const { network, getNodes } = Network.build()\n  const nodes = network.getConnectedNodes(system.id)\n\n  const connectedNodes = getNodes().filter(({ id }) => nodes.includes(id))\n\n  const formState = {\n    name: get(system, 'data.name'),\n    id: get(system, 'id'),\n    type: get(system, 'data.type'),\n    department: get(system, 'data.department'),\n    url: get(system, 'data.url'),\n    description: get(system, 'data.description'),\n    connections: makeConnections(system, connectedNodes)\n  }\n  return formState\n}\n\nconst addNodeReducer = (state, action) => {\n  if (action.path === '') return {}\n  const addNodeState = { ...state }\n  switch (action.type) {\n    case 'remove':\n      unset(addNodeState, action.path)\n      return addNodeState\n    case 'edit':\n      return { ...action.formState }\n    default:\n      set(addNodeState, action.path, action.value)\n      return addNodeState\n  }\n}\n\nconst connectionReducer = (connections, action) => {\n  switch (action.type) {\n    case 'add':\n      const id = uuid()\n      return [\n        ...connections,\n        <Connection\n          key={id}\n          id={id}\n          handleRemove={() => action.dispatch({ type: 'remove', id })}\n        />\n      ]\n    case 'remove':\n      return connections.filter(({ key }) => key !== action.id)\n    case 'reset':\n      return []\n    case 'edit':\n      const connKeys = Object.keys(action.connections)\n      return connKeys.map(key => {\n        const id = key\n        const dispatch = get(action, 'dispatch', null)\n\n        if (!dispatch || !id) return null\n\n        return (\n          <Connection\n            edit\n            key={id}\n            id={id}\n            handleRemove={() => dispatch({ type: 'remove', id })}\n          />\n        )\n      }).filter(item => item)\n    default:\n      return connections\n  }\n}\n\nconst getSystems = async () => {\n  const nodes = await Graph.getNodesArray()\n  return nodes.map(node => ({ key: node.id, text: node.data.name })).sort((a, b) => {\n    if (a.text < b.text) return -1\n    if (a.text > b.text) return 1\n    return 0\n  })\n}\n\nconst validate = (addNodeForm, nodeFormErrors) => {\n  let errors = {}\n  if (nodeFormErrors) {\n    errors = {\n      ...nodeFormErrors\n    }\n  }\n\n  if (!addNodeForm.type) {\n    errors.type = 'A system type must be selected'\n  }\n\n  if (!addNodeForm.name) {\n    errors.name = 'A system name is required'\n  }\n\n  if (addNodeForm.url) {\n    const error = checkURL(addNodeForm.url)\n    if (error) errors.url = error\n  }\n\n  if (addNodeForm.connections) {\n    const keys = Object.keys(addNodeForm.connections || {})\n    keys.forEach(key => {\n      const target = get(addNodeForm, `connections[${key}].connectedTo.key`, null)\n      const type = get(addNodeForm, `connections[${key}].connectionType.key`, null)\n\n      if (!type) set(errors, `[${key}].type`, 'The connection must have a type selected')\n      if (!target) set(errors, `[${key}].target`, 'You must select another system to connect to')\n    })\n  }\n\n  return errors\n}\n\nexport const SystemForm = (props) => {\n  const [loading, setLoading] = useState(true)\n  const [edit, setEdit] = useState(false)\n  const [isOpen, setIsOpen] = useState(false)\n  const [addNodeForm, updateNodeForm] = useReducer(addNodeReducer, {})\n  const [existingSystems, setExistingSystems] = useState()\n  const [nodeFormErrors, setNodeFormErrors] = useState({})\n  const [connections, connDispatch] = useReducer(connectionReducer, [])\n\n  const toggle = () => setIsOpen(!isOpen)\n  const resetForm = () => updateNodeForm({ path: '', value: {} })\n  const resetConnections = () => connDispatch({ type: 'reset' })\n\n  const handleEditSystem = (system) => {\n    const formState = makeFormState(system)\n    connDispatch({\n      type: 'edit',\n      connections: formState.connections || {},\n      dispatch: connDispatch\n    })\n    updateNodeForm({ type: 'edit', formState })\n    setEdit(true)\n    setIsOpen(true)\n  }\n\n  useEvent('edit-system-panel', handleEditSystem)\n\n  const addConnection = () => {\n    connDispatch({\n      type: 'add',\n      dispatch: connDispatch,\n      existingSystems,\n      addNodeForm,\n      updateNodeForm\n    })\n  }\n\n  const submitSystem = async () => {\n    const errors = validate(addNodeForm, nodeFormErrors)\n    if (Object.keys(errors).length > 0) {\n      setNodeFormErrors({\n        ...nodeFormErrors,\n        ...errors\n      })\n      return\n    }\n\n    const connections = get(addNodeForm, 'connections', {})\n    const data = {\n      description: get(addNodeForm, 'description', ''),\n      name: get(addNodeForm, 'name', ''),\n      type: get(addNodeForm, 'type', ''),\n      url: get(addNodeForm, 'url', ''),\n      department: get(addNodeForm, 'department', '')\n    }\n\n    let id = null\n    if (edit) {\n      const node = await Graph.makeNode({ id: addNodeForm.id, connections, data })\n      id = addNodeForm.id\n      await Graph.addNode(node)\n    } else {\n      const node = await Graph.makeNode({ connections, data })\n      id = node.id\n      await Graph.addNode(node)\n    }\n\n    broadcastNodeSave()\n    nodeAdded(id)\n    resetConnections()\n    resetForm()\n    if (edit) {\n      dismiss()\n    }\n  }\n\n  useEvent('toggle-system-form', toggle)\n  const dismiss = () => {\n    resetForm()\n    resetConnections()\n    setIsOpen(false)\n    setEdit(false)\n  }\n\n  const updateExistingSystems = async () => {\n    const systems = await getSystems()\n    setLoading(false)\n    setExistingSystems(systems)\n  }\n\n  useEffect(() => {\n    updateExistingSystems()\n  }, [])\n\n  const broadcastNodeSave = useEvent('graph-data-updated', updateExistingSystems)\n  const nodeAdded = useEvent('node-added')\n\n  return (\n    <Panel\n      headerText={`${edit ? 'Edit' : 'Add'} System`}\n      isOpen={isOpen}\n      onDismiss={dismiss}\n      isFooterAtBottom\n      onRenderFooterContent={() => (\n        <Stack horizontal horizontalAlign='space-between' tokens={{ childrenGap: 12 }}>\n          <DefaultButton text='Cancel' onClick={dismiss} />\n          <PrimaryButton text='Save System' onClick={submitSystem} />\n        </Stack>\n      )}\n      type={PanelType.medium}\n    >\n      <SystemFormView\n        loading={loading}\n        edit={edit}\n        existingSystems={existingSystems}\n        nodeFormErrors={nodeFormErrors}\n        setNodeFormErrors={setNodeFormErrors}\n        addNodeForm={addNodeForm}\n        updateNodeForm={updateNodeForm}\n        connections={connections}\n        addConnection={addConnection}\n      />\n    </Panel>\n  )\n}\n","import React from 'react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Text } from 'office-ui-fabric-react/lib/Text'\n\nconst NodeDetailView = props => {\n  const { description, department, url } = props\n  return (\n    <Stack tokens={{ childrenGap: 8 }}>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>URL</Text>\n        <a href={url} target='_blank' rel='noopener noreferrer'>{url}</a>\n      </Stack>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Department</Text>\n        <Text>{department}</Text>\n      </Stack>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Description</Text>\n        <Text>{description}</Text>\n      </Stack>\n    </Stack>\n  )\n}\n\nexport default NodeDetailView\n","import React, { useState } from 'react'\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel'\nimport { IconButton } from 'office-ui-fabric-react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Text } from 'office-ui-fabric-react/lib/Text'\nimport styled from 'styled-components'\nimport get from 'lodash.get'\nimport { useEvent } from '../../hooks'\nimport NodeDetailView from './NodeDetailView'\n\nconst CustomPanel = styled(Panel)`\n  & > .ms-Panel-main {\n    transition: width 300ms ease-in-out;\n  }\n`\n\nexport const NodeDetail = props => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [node, setNode] = useState(null)\n  const displayNode = (node) => {\n    setNode(node)\n    setIsOpen(true)\n  }\n  const closePanel = () => setIsOpen(false)\n\n  useEvent('display-node-details', displayNode)\n  const editSystem = useEvent('edit-system-panel')\n  const deselectActiveNode = useEvent('deselect-active-node')\n  const name = get(node, 'data.name', 'Very Unnamed System')\n  const description = get(node, 'data.description', 'No description has been entered.')\n  const department = get(node, 'data.department', 'No department has been entered.')\n  const url = get(node, 'data.url', `${name} has no url`)\n\n  const handleEdit = () => {\n    editSystem(node)\n    setIsOpen(false)\n    deselectActiveNode()\n  }\n\n  return (\n    <CustomPanel\n      isOpen={isOpen}\n      onDismiss={() => {\n        deselectActiveNode()\n        closePanel()\n      }}\n      onRenderHeader={(props) => {\n        return (\n          <Stack horizontal tokens={{ childrenGap: 12 }}>\n            <Text variant='xLarge' style={{ marginLeft: 16, marginBottom: 12 }}>{props.headerText}</Text>\n            <IconButton\n              iconProps={{\n                iconName: 'Edit'\n              }}\n              onClick={handleEdit}\n            />\n          </Stack>\n        )\n      }}\n      isLightDismiss\n      type={PanelType.customNear}\n      customWidth={400}\n      headerText={name}\n    >\n      <NodeDetailView\n        department={department}\n        description={description}\n        url={url}\n      />\n    </CustomPanel>\n  )\n}\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\n\nconst cubeMove = keyframes`\n    25% { \n      transform: translateX(42px) rotate(-90deg) scale(0.5);\n      -webkit-transform: translateX(42px) rotate(-90deg) scale(0.5);\n    } 50% { \n      transform: translateX(42px) translateY(42px) rotate(-179deg);\n      -webkit-transform: translateX(42px) translateY(42px) rotate(-179deg);\n    } 50.1% { \n      transform: translateX(42px) translateY(42px) rotate(-180deg);\n      -webkit-transform: translateX(42px) translateY(42px) rotate(-180deg);\n    } 75% { \n      transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\n      -webkit-transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\n    } 100% { \n      transform: rotate(-360deg);\n      -webkit-transform: rotate(-360deg);\n    }\n`\n\nconst Spinner = styled.div`\n  margin: 100px auto;\n  width: 40px;\n  height: 40px;\n  align-self: center;\n  justify-self: center;\n  position: relative;\n`\n\nconst cubeCSS = css`\n  background-color: #501214;\n  width: 15px;\n  height: 15px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  \n  -webkit-animation: ${cubeMove} 1.8s infinite ease-in-out;\n  animation: ${cubeMove} 1.8s infinite ease-in-out;\n`\n\nconst CubeOne = styled.div`\n  ${cubeCSS}\n`\nconst CubeTwo = styled.div`\n  ${cubeCSS}\n  animation-delay: -0.9s;\n`\n\nexport const Loading = props => {\n  return (\n    <Spinner>\n      <CubeOne />\n      <CubeTwo />\n    </Spinner>\n  )\n}\n","import React, { useCallback } from 'react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Text } from 'office-ui-fabric-react/lib/Text'\nimport { IconButton, DefaultButton, PrimaryButton, Toggle } from 'office-ui-fabric-react'\nimport { TextField } from 'office-ui-fabric-react/lib/TextField'\nimport styled from 'styled-components'\n\nconst Form = styled(Stack)`\n  padding: 12px;\n`\n\nconst ButtonGroup = styled(Stack)`\n  padding-top: 24px;\n`\n\nconst Title = styled(Text)`\n  padding: 12px;\n  margin-right: 40px;\n`\n\nconst Close = styled(IconButton).attrs(() => ({ iconProps: { iconName: 'ChromeClose' } }))``\n\nexport const DialogFormView = props => {\n  const { dismiss, form, setForm, setErrors, submit, errors } = props\n\n  const handleNameChange = useCallback((event, value) => {\n    if (value) setErrors({ type: 'remove', path: 'name' })\n    setForm({ type: 'update', path: 'name', value })\n  }, [setForm, setErrors])\n\n  const handleCopyChange = useCallback((event, value) => {\n    setForm({ type: 'update', path: 'copy', value })\n  }, [setForm])\n\n  return (\n    <Form tokens={{ childrenGap: 12 }}>\n      <Stack horizontal>\n        <Title variant='xxLarge'>Add New Diagram</Title>\n        <Close onClick={dismiss} />\n      </Stack>\n      <TextField\n        label='Name'\n        placeholder={`Enter a name for your diagram`}\n        errorMessage={errors.name || ''}\n        value={form.name || ''}\n        onChange={handleNameChange}\n      />\n      <Toggle\n        inlineLabel\n        onText='On'\n        offText='Off'\n        label='Copy Current Diagram'\n        checked={form.copy || false}\n        onChange={handleCopyChange}\n      />\n      <ButtonGroup horizontal horizontalAlign='space-between'>\n        <DefaultButton text='Cancel' onClick={dismiss} />\n        <PrimaryButton text='Submit' onClick={submit} />\n      </ButtonGroup>\n    </Form>\n  )\n}\n","import React, { useReducer, useCallback, useState } from 'react'\nimport { useEvent } from '../../hooks'\nimport { Graph } from '../../util'\nimport { Modal } from 'office-ui-fabric-react/lib/Modal'\nimport { DialogFormView } from './DiagramFormView'\nimport set from 'lodash.set'\nimport unset from 'lodash.unset'\n\nconst formReducer = (state, action) => {\n  if (action.path === '') return {}\n  switch (action.type) {\n    case 'remove':\n      const removedState = { ...state }\n      if (action.path) unset(removedState, action.path)\n      return removedState\n    case 'update':\n      const updatedState = { ...state }\n      return set(updatedState, action.path, action.value)\n    default:\n      return state\n  }\n}\n\nconst validate = form => {\n  const errors = {}\n  if (!form.name) errors.name = 'Diagrams must have a name, c\\'mon it\\'s one text field'\n  return errors\n}\n\nexport const DiagramForm = props => {\n  const { initialForm } = props\n  const [isOpen, setIsOpen] = useState(false)\n  const [form, setForm] = useReducer(formReducer, initialForm || {})\n  const [errors, setErrors] = useReducer(formReducer, {})\n\n  const openDiagramForm = useCallback(() => {\n    setIsOpen(true)\n  }, [setIsOpen])\n\n  const closeDiagramForm = useCallback(() => {\n    setIsOpen(false)\n  }, [setIsOpen])\n\n  useEvent('toggle-diagram-form', openDiagramForm)\n  const broadcastGraphDataUpdate = useEvent('graph-data-updated')\n\n  const submit = useCallback(async () => {\n    const errors = validate(form)\n    if (errors.name) {\n      setErrors({ type: 'update', path: 'name', value: errors.name })\n    } else {\n      const shouldCopy = form.copy\n      const diagram = {\n        name: form.name\n      }\n      if (shouldCopy) {\n        diagram.nodes = await Graph.getNodes()\n        diagram.edges = await Graph.getEdges()\n      }\n\n      const { _id } = await Graph.makeNewDiagram(diagram)\n      closeDiagramForm()\n      await Graph.setCurrentDiagram(_id)\n      broadcastGraphDataUpdate()\n    }\n  }, [setErrors, form, closeDiagramForm, broadcastGraphDataUpdate])\n\n  return (\n    <Modal\n      isBlocking={false}\n      onDismiss={closeDiagramForm}\n      isOpen={isOpen}\n    >\n      <DialogFormView\n        form={form}\n        setForm={setForm}\n        setErrors={setErrors}\n        errors={errors}\n        submit={submit}\n        dismiss={closeDiagramForm}\n      />\n    </Modal>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { DiagramForm, SystemsGraph, NodeDetail, SystemForm, CommandBar } from './components'\n\nconst Page = styled.div`\n  background-color: #e8e3db;\n  flex: 1;\n  flex-direction: column;\n  display: flex;\n`\n\nfunction App () {\n  return (\n    <Page>\n      <CommandBar />\n      <DiagramForm />\n      <SystemsGraph />\n      <SystemForm />\n      <NodeDetail />\n    </Page>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons'\nimport App from './App'\nimport './index.css'\n\ninitializeIcons()\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  render(<App />, document.getElementById('root'))\n})\n"],"sourceRoot":""}