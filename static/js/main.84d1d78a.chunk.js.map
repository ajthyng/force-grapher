{"version":3,"sources":["util/Subject.js","util/NodeManager.js","util/Graph.js","util/Network.js","hooks/useEvent.js","components/SystemsGraph/SystemsGraph.js","util/FileManager.js","components/CommandBar/CommandBar.js","components/SystemForm/ConnectionReadWrite.js","components/SystemForm/Connection.js","components/SystemForm/SystemType.js","components/SystemForm/SystemFormView.js","components/SystemForm/SystemForm.js","components/NodeDetail/NodeDetailView.js","components/NodeDetail/NodeDetail.js","components/Loading/Loading.js","App.js","index.js"],"names":["_handlers","Subject","subscribe","event","handler","push","unsubscribe","filter","func","next","_len","arguments","length","args","Array","_key","forEach","apply","Object","freeze","NodeManager","_get","key","defaultValue","JSON","parse","localStorage","getItem","_set","value","setItem","stringify","getEdges","getNodesObject","saveUploadedData","_ref","edges","nodes","getNodes","keys","reduce","acc","cur","_NodeManager","Graph","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","abrupt","stop","this","_ref2","_callee2","_context2","setEdges","_ref3","_callee3","_context3","_x","setNodes","_ref4","_callee4","_context4","_x2","addNode","_ref5","_callee5","node","_nodes","_context5","id","Error","sent","makeEdges","_x3","addEdge","_ref6","_callee6","node1","node2","data","_edges","_context6","isArray","addDirectedEdge","_x4","_x5","_x6","_ref7","_callee7","node2TargetID","_context7","findIndex","_ref8","objectSpread","_x7","_x8","_x9","removeDirectedEdge","_ref9","_callee8","_context8","_ref10","_x10","_x11","removeEdge","_ref11","_callee9","_context9","_ref12","_ref13","_x12","_x13","makeNode","_ref15","_callee10","_ref14","connections","connectionKeys","previousEdges","removeEdges","_context10","map","item","uuid","get","edge","index","remove","splice","info","concat","type","read","write","existingEdgeIndex","label","text","_x14","_ref16","_callee11","_loop","i","cleanup","_context12","prevEdge","_context11","find","_ref17","delegateYield","differenceby","_x15","_Graph","Network","_options","_container","_network","makeData","DataSet","builder","withEdges","withNodes","withOptions","options","inContainer","element","build","VisNetwork","network","setData","_Network","useEvent","useEffect","systemsReducer","state","action","buildGraphData","getLinkColor","graphData","size","widthConstraint","minimum","maximum","shape","getShape","name","color","nodeId","from","to","arrows","SystemsGraph","_useReducer","useReducer","_useReducer2","slicedToArray","systems","systemsDispatch","_useState","useState","_useState2","activeNode","setActiveNode","graphContainer","useRef","graph","displayNodeDetails","handleRightClick","useCallback","current","getNodeAt","pointer","DOM","isCluster","openCluster","matchingNode","clusterByConnection","clusterNodeProperties","handleNodeSelect","params","off","on","systemGraph","autoResize","document","addEventListener","e","preventDefault","react_default","createElement","style","overflow","flex","ref","handleFile","reader","FileReader","readAsBinaryString","target","files","onloadend","result","CommandBar","props","items","iconProps","iconName","onClick","setAttribute","display","click","uploadFile","filename","encodeURIComponent","dayjs","format","body","appendChild","removeChild","downloadFile","position","top","left","right","CommandBar_CommandBar","canChange","nextPath","nextValue","currentRead","currentWrite","ConnectionReadWrite","onChange","Stack","marginRight","marginTop","verticalAlign","tokens","childrenGap","Checkbox","checked","ConnectionContainer","styled","div","_templateObject","Connection","handleRemove","edit","addNodeForm","nodeFormErrors","setNodeFormErrors","existingSystems","updateNodeForm","selectedTarget","selectedType","selectedRead","selectedWrite","targetError","typeError","path","IconButton","Dropdown","placeholder","errorMessage","selectedKey","errors","ConnectionReadWrite_ConnectionReadWrite","SystemType","React","memo","required","prevProps","nextProps","keysUnchanged","errorUnchanged","SystemFormView","addConnection","Fragment","TextField","onGetErrorMessage","newSystem","String","toLowerCase","some","department","url","URL","err","message","checkURL","multiline","rows","description","conn","cloneElement","renderConnections","ActionButton","makeConnections","system","connectionType","connectedTo","addNodeReducer","addNodeState","unset","formState","set","connectionReducer","toConsumableArray","Connection_Connection","dispatch","getSystems","validate","SystemForm","setEdit","_useState3","_useState4","isOpen","setIsOpen","_useState5","_useState6","setExistingSystems","_useState7","_useState8","_useReducer3","_useReducer4","connDispatch","resetForm","resetConnections","_Network$build","getConnectedNodes","connectedNodes","includes","makeFormState","submitSystem","_node","broadcastNodeSave","dismiss","Panel","headerText","onDismiss","isFooterAtBottom","onRenderFooterContent","horizontal","horizontalAlign","DefaultButton","PrimaryButton","PanelType","medium","SystemFormView_SystemFormView","NodeDetailView","Text","textDecoration","variant","href","CustomPanel","NodeDetail_templateObject","readWriteStatus","NodeDetail","setNode","editSystem","deselectActiveNode","NodeDetail_Connection","parseConnections","handleEdit","onRenderHeader","marginLeft","marginBottom","isLightDismiss","customNear","customWidth","NodeDetail_NodeDetailView","cubeMove","keyframes","Loading_templateObject","cubeCSS","_templateObject2","css","_templateObject3","_templateObject4","_templateObject5","Page","App_templateObject","App","SystemsGraph_SystemsGraph","CommandBar_CommandBar_CommandBar","SystemForm_SystemForm","NodeDetail_NodeDetail","initializeIcons","render","src_App","getElementById"],"mappings":"4MAAMA,EAAY,GAELC,EAAU,CACrBC,UADqB,SACVC,EAAOC,GACXJ,EAAUG,KAAQH,EAAUG,GAAS,IAC1CH,EAAUG,GAAOE,KAAKD,IAExBE,YALqB,SAKRH,EAAOC,GACbJ,EAAUG,KACfH,EAAUG,GAASH,EAAUG,GAAOI,OAAO,SAAAC,GAAI,OAAIA,IAASJ,MAE9DK,KATqB,SASfN,GAAgB,QAAAO,EAAAC,UAAAC,OAANC,EAAM,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAANF,EAAME,EAAA,GAAAJ,UAAAI,GACff,EAAUG,IACfH,EAAUG,GAAOa,QAAQ,SAAAZ,GACA,oBAAZA,GACTA,EAAOa,WAAP,EAAWJ,OAMnBK,OAAOC,OAAOlB,GCrBd,IAkCamB,EAlCQ,WACnB,IAAMC,EAAO,SAACC,EAAKC,GAAN,OAAuBC,KAAKC,MAAMC,aAAaC,QAAQL,KAASC,GACvEK,EAAO,SAACN,EAAKO,GAAN,OAAgBH,aAAaI,QAAQR,EAAKE,KAAKO,UAAUF,KAwBtE,MAAO,CACLG,SAVe,WACf,OAAOX,EAAK,SAAU,KAUtBY,eAzBqB,WACrB,OAAOZ,EAAK,SAAU,KAyBtBa,iBARuB,SAAAC,GAAsB,IAAnBC,EAAmBD,EAAnBC,MAAOC,EAAYF,EAAZE,MACjCT,EAAK,SAAUQ,GACfR,EAAK,SAAUS,IAOfC,SAvBe,WACf,IAAMD,EAAQhB,EAAK,SAAU,IAG7B,OAFiBH,OAAOqB,KAAKF,GAEbG,OAAO,SAACC,EAAKC,GAE3B,OADAD,EAAIpC,KAAKgC,EAAMK,IACRD,GACN,MAoBoBE,6EC2NdC,EAzPE,WACb,IAAMvB,EAAO,SAACC,EAAKC,GAAN,OAAuBC,KAAKC,MAAMC,aAAaC,QAAQL,KAASC,GACvEK,EAAO,SAACN,EAAKO,GAAN,OAAgBH,aAAaI,QAAQR,EAAKE,KAAKO,UAAUF,KAEhEG,EAAQ,eAAAG,EAAAjB,OAAA2B,EAAA,EAAA3B,CAAA4B,EAAAC,EAAAC,KAAG,SAAAC,IAAA,OAAAH,EAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAA1C,MAAA,cAAA0C,EAAAE,OAAA,SACRhC,EAAK,SAAU,KADP,wBAAA8B,EAAAG,SAAAL,MAAH,yBAAAd,EAAAlB,MAAAsC,KAAA5C,YAAA,GAIR2B,EAAQ,eAAAkB,EAAAtC,OAAA2B,EAAA,EAAA3B,CAAA4B,EAAAC,EAAAC,KAAG,SAAAS,IAAA,OAAAX,EAAAC,EAAAG,KAAA,SAAAQ,GAAA,cAAAA,EAAAN,KAAAM,EAAAjD,MAAA,cAAAiD,EAAAL,OAAA,SACRhC,EAAK,SAAU,KADP,wBAAAqC,EAAAJ,SAAAG,MAAH,yBAAAD,EAAAvC,MAAAsC,KAAA5C,YAAA,GAIRgD,EAAQ,eAAAC,EAAA1C,OAAA2B,EAAA,EAAA3B,CAAA4B,EAAAC,EAAAC,KAAG,SAAAa,EAAOzB,GAAP,OAAAU,EAAAC,EAAAG,KAAA,SAAAY,GAAA,cAAAA,EAAAV,KAAAU,EAAArD,MAAA,cAAAqD,EAAAT,OAAA,SACRzB,EAAK,SAAUQ,IADP,wBAAA0B,EAAAR,SAAAO,MAAH,gBAAAE,GAAA,OAAAH,EAAA3C,MAAAsC,KAAA5C,YAAA,GAIRqD,EAAQ,eAAAC,EAAA/C,OAAA2B,EAAA,EAAA3B,CAAA4B,EAAAC,EAAAC,KAAG,SAAAkB,EAAO7B,GAAP,OAAAS,EAAAC,EAAAG,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAA1D,MAAA,cAAA0D,EAAAd,OAAA,SACRzB,EAAK,SAAUS,IADP,wBAAA8B,EAAAb,SAAAY,MAAH,gBAAAE,GAAA,OAAAH,EAAAhD,MAAAsC,KAAA5C,YAAA,GAIR0D,EAAO,eAAAC,EAAApD,OAAA2B,EAAA,EAAA3B,CAAA4B,EAAAC,EAAAC,KAAG,SAAAuB,EAAOC,GAAP,IAAAC,EAAA,OAAA3B,EAAAC,EAAAG,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAAjE,MAAA,UACT+D,EAAKG,GADI,CAAAD,EAAAjE,KAAA,cACM,IAAImE,MAAM,mCADhB,cAAAF,EAAAjE,KAAA,EAEO6B,IAFP,cAERmC,EAFQC,EAAAG,MAIPL,EAAKG,IAAMH,EAJJE,EAAAjE,KAAA,EAMRqE,EAAUN,GANF,cAAAE,EAAAjE,KAAA,GAORuD,EAASS,GAPD,yBAAAC,EAAApB,SAAAiB,MAAH,gBAAAQ,GAAA,OAAAT,EAAArD,MAAAsC,KAAA5C,YAAA,GAUPqE,EAAO,eAAAC,EAAA/D,OAAA2B,EAAA,EAAA3B,CAAA4B,EAAAC,EAAAC,KAAG,SAAAkC,EAAOC,EAAOC,EAAOC,GAArB,IAAAC,EAAA,OAAAxC,EAAAC,EAAAG,KAAA,SAAAqC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAA9E,MAAA,UACT0E,EAAMR,IAAOS,EAAMT,GADV,CAAAY,EAAA9E,KAAA,cACoB,IAAImE,MAAM,oCAD9B,cAAAW,EAAA9E,KAAA,EAGOuB,IAHP,cAGRsD,EAHQC,EAAAV,KAKT/D,MAAM0E,QAAQF,EAAOH,EAAMR,OAAMW,EAAOH,EAAMR,IAAM,IACpD7D,MAAM0E,QAAQF,EAAOF,EAAMT,OAAMW,EAAOF,EAAMT,IAAM,IAN3CY,EAAA9E,KAAA,EAQRgF,EAAgBN,EAAOC,EAAOC,GARtB,cAAAE,EAAA9E,KAAA,GASRgF,EAAgBL,EAAOD,EAAOE,GATtB,yBAAAE,EAAAjC,SAAA4B,MAAH,gBAAAQ,EAAAC,EAAAC,GAAA,OAAAX,EAAAhE,MAAAsC,KAAA5C,YAAA,GAYP8E,EAAe,eAAAI,EAAA3E,OAAA2B,EAAA,EAAA3B,CAAA4B,EAAAC,EAAAC,KAAG,SAAA8C,EAAOX,EAAOC,EAAOC,GAArB,IAAAC,EAAAS,EAAA,OAAAjD,EAAAC,EAAAG,KAAA,SAAA8C,GAAA,cAAAA,EAAA5C,KAAA4C,EAAAvF,MAAA,UACjB0E,EAAMR,IAAOS,EAAMT,GADF,CAAAqB,EAAAvF,KAAA,cACY,IAAImE,MAAM,6CADtB,cAAAoB,EAAAvF,KAAA,EAGDuB,IAHC,cAGhBsD,EAHgBU,EAAAnB,KAKjB/D,MAAM0E,QAAQF,EAAOH,EAAMR,OAAMW,EAAOH,EAAMR,IAAM,KAEnDoB,EAAgBT,EAAOH,EAAMR,IAAIsB,UAAU,SAAAC,GAAA,OAAAA,EAAG1B,OAAoBY,EAAMT,OAEzD,EACnBW,EAAOH,EAAMR,IAAIoB,GAAiB,CAAEvB,KAAMY,EAAMT,GAAIU,QAEpDC,EAAOH,EAAMR,IAAItE,KAAK,CAAEmE,KAAMY,EAAMT,GAAIU,SAZpBW,EAAAvF,KAAA,GAehBkD,EAASzC,OAAAiF,EAAA,EAAAjF,CAAA,GAAKoE,IAfE,yBAAAU,EAAA1C,SAAAwC,MAAH,gBAAAM,EAAAC,EAAAC,GAAA,OAAAT,EAAA5E,MAAAsC,KAAA5C,YAAA,GAkBf4F,EAAkB,eAAAC,EAAAtF,OAAA2B,EAAA,EAAA3B,CAAA4B,EAAAC,EAAAC,KAAG,SAAAyD,EAAOtB,EAAOC,GAAd,IAAAE,EAAA,OAAAxC,EAAAC,EAAAG,KAAA,SAAAwD,GAAA,cAAAA,EAAAtD,KAAAsD,EAAAjG,MAAA,UACpB0E,EAAMR,IAAOS,EAAMT,GADC,CAAA+B,EAAAjG,KAAA,cACS,IAAImE,MAAM,+CADnB,cAAA8B,EAAAjG,KAAA,EAGJuB,IAHI,cAGnBsD,EAHmBoB,EAAA7B,MAKlBM,EAAMR,IAAMW,EAAOH,EAAMR,IAAIpE,OAAO,SAAAoG,GAAA,OAAAA,EAAGnC,OAAoBY,EAAMT,KAL/C+B,EAAAjG,KAAA,EAOnBkD,EAAS2B,GAPU,wBAAAoB,EAAApD,SAAAmD,MAAH,gBAAAG,EAAAC,GAAA,OAAAL,EAAAvF,MAAAsC,KAAA5C,YAAA,GAUlBmG,EAAU,eAAAC,EAAA7F,OAAA2B,EAAA,EAAA3B,CAAA4B,EAAAC,EAAAC,KAAG,SAAAgE,EAAO7B,EAAOC,GAAd,IAAAE,EAAA,OAAAxC,EAAAC,EAAAG,KAAA,SAAA+D,GAAA,cAAAA,EAAA7D,KAAA6D,EAAAxG,MAAA,UACZ0E,EAAMR,IAAOS,EAAMT,GADP,CAAAsC,EAAAxG,KAAA,cACiB,IAAImE,MAAM,uCAD3B,cAAAqC,EAAAxG,KAAA,EAGIuB,IAHJ,cAGXsD,EAHW2B,EAAApC,MAKVM,EAAMR,IAAMW,EAAOH,EAAMR,IAAIpE,OAAO,SAAA2G,GAAA,OAAAA,EAAG1C,OAAoBY,EAAMT,KACxEW,EAAOF,EAAMT,IAAMW,EAAOF,EAAMT,IAAIpE,OAAO,SAAA4G,GAAA,OAAAA,EAAG3C,OAAoBW,EAAMR,KANvDsC,EAAAxG,KAAA,EAQXkD,EAAS2B,GARE,wBAAA2B,EAAA3D,SAAA0D,MAAH,gBAAAI,EAAAC,GAAA,OAAAN,EAAA9F,MAAAsC,KAAA5C,YAAA,GAWV2G,EAAQ,eAAAC,EAAArG,OAAA2B,EAAA,EAAA3B,CAAA4B,EAAAC,EAAAC,KAAG,SAAAwE,EAAAC,GAAA,IAAA9C,EAAAU,EAAAqC,EAAAlD,EAAAnC,EAAAsF,EAAAC,EAAAxF,EAAAyF,EAAA,OAAA/E,EAAAC,EAAAG,KAAA,SAAA4E,GAAA,cAAAA,EAAA1E,KAAA0E,EAAArH,MAAA,UAASkE,EAAT8C,EAAS9C,GAAIU,EAAboC,EAAapC,KAAMqC,EAAnBD,EAAmBC,YAC9BlD,EAAO,MACPG,EAFW,CAAAmD,EAAArH,KAAA,eAAAqH,EAAArH,KAAA,EAGO6B,IAHP,OAGPD,EAHOyF,EAAAjD,KAIbL,EAAO,CACLG,KACAvC,MAAO,GACPwF,cAAevF,EAAMsC,GAAIvC,MAAM2F,IAAI,SAAAC,GAAI,OAAA9G,OAAAiF,EAAA,EAAAjF,CAAA,GAAU8G,KACjD3C,KAAKnE,OAAAiF,EAAA,EAAAjF,CAAA,GACAmB,EAAMsC,GAAIU,KACVA,IAVMyC,EAAArH,KAAA,gBAcb+D,EAAO,CACLG,GAAIsD,MACJ7F,MAAO,GACPiD,KAAKnE,OAAAiF,EAAA,EAAAjF,CAAA,GACCmE,GAAQ,KAlBH,WAuBTsC,EAAiBzG,OAAOqB,KAAKmF,GAAe,IAC5CE,EAAgBM,IAAI1D,EAAM,gBAAiB,MAE7CmD,EAAe/G,QAAU,GAAKgH,EAAchH,OAAS,GA1B1C,CAAAkH,EAAArH,KAAA,gBAAAqH,EAAArH,KAAA,GA2BOuB,IA3BP,sBA2BPI,EA3BO0F,EAAAjD,MA4BAL,EAAKG,IACZkD,EAAc,GACpB3G,OAAOqB,KAAKH,GAAOpB,QAAQ,SAAAM,GACzBc,EAAMd,GAAKN,QAAQ,SAACmH,EAAMC,GACpBD,EAAK3D,OAASA,EAAKG,IACrBkD,EAAYxH,KAAK,CAAEiB,MAAK8G,cAI9BP,EAAY7G,QAAQ,SAAAqH,GAClBjG,EAAMiG,EAAO/G,KAAKgH,OAAOD,EAAOD,MAAO,KAtC5BN,EAAArH,KAAA,GAwCPkD,EAASzC,OAAAiF,EAAA,EAAAjF,CAAA,GAAKkB,IAxCP,eAAA0F,EAAAzE,OAAA,SAyCNmB,GAzCM,eA4CfmD,EAAe3G,QAAQ,SAAAM,GACrB,IAAMiH,EAAOL,IAAIR,EAAD,GAAAc,OAAiB,CAAClH,GAAlB,gBAAsC,MACtD,IAAKiH,EAAM,MAAM,IAAI3D,MAAM,iDAC3B,IAAM6D,EAAOP,IAAIR,EAAD,GAAAc,OAAiB,CAAClH,GAAlB,mBAAyC,MACzD,IAAKmH,EAAM,MAAM,IAAI7D,MAAM,+CAE3B,IAAM8D,EAAOR,IAAIR,EAAD,GAAAc,OAAiB,CAAClH,GAAlB,SAA+B,MACzCqH,EAAQT,IAAIR,EAAD,GAAAc,OAAiB,CAAClH,GAAlB,UAAgC,MAEjD,IAAKoH,IAASC,EAAO,MAAM,IAAI/D,MAAM,6CAErC,IAAMS,EAAO6C,IAAIR,EAAD,IAAAc,OAAkBlH,EAAlB,UAA+B,IAEzCsH,EAAoBpE,EAAKpC,MAAM6D,UAAU,SAAAkC,GAAI,OAAIA,EAAKxD,KAAOrD,IAE/DsH,GAAqB,EACvBpE,EAAKpC,MAAMwG,GAAqB,CAC9BjE,GAAI4D,EAAKjH,IACT+D,KAAKnE,OAAAiF,EAAA,EAAAjF,CAAA,GACAmE,EADD,CAEFqD,OACAC,QACAF,KAAM,CACJ9D,GAAI8D,EAAKnH,IACTuH,MAAOJ,EAAKK,SAKlBtE,EAAKpC,MAAM/B,KAAK,CACdsE,GAAI4D,EAAKjH,IACT+D,KAAKnE,OAAAiF,EAAA,EAAAjF,CAAA,GACAmE,EADD,CAEFqD,OACAC,QACAF,KAAM,CACJ9D,GAAI8D,EAAKnH,IACTuH,MAAOJ,EAAKK,YAjFPhB,EAAAzE,OAAA,SAuFRmB,GAvFQ,yBAAAsD,EAAAxE,SAAAkE,MAAH,gBAAAuB,GAAA,OAAAxB,EAAAtG,MAAAsC,KAAA5C,YAAA,GA0FRmE,EAAS,eAAAkE,EAAA9H,OAAA2B,EAAA,EAAA3B,CAAA4B,EAAAC,EAAAC,KAAG,SAAAiG,EAAOzE,GAAP,IAAApC,EAAAwF,EAAAsB,EAAAC,EAAAC,EAAAjB,EAAAO,EAAAC,EAAAxD,EAAAC,EAAA,OAAAtC,EAAAC,EAAAG,KAAA,SAAAmG,GAAA,cAAAA,EAAAjG,KAAAiG,EAAA5I,MAAA,UACV2B,EAAQ8F,IAAI1D,EAAM,QAAS,IAC3BoD,EAAgBM,IAAI1D,EAAM,gBAAiB,MAE7CpC,EAAMxB,QAAU,GAJJ,CAAAyI,EAAA5I,KAAA,eAAA4I,EAAAhG,OAAA,iBAAA6F,EAAApG,EAAAC,EAAAC,KAAA,SAAAkG,EAMPC,GANO,IAAAhB,EAAAO,EAAAC,EAAAxD,EAAAC,EAAAkE,EAAAlG,EAAA,OAAAN,EAAAC,EAAAG,KAAA,SAAAqG,GAAA,cAAAA,EAAAnG,KAAAmG,EAAA9I,MAAA,UAOR0H,EAAO/F,EAAM+G,GAEbT,EAAOR,IAAIC,EAAM,aACjBQ,EAAQT,IAAIC,EAAM,cAElBhD,EAAQ,CACZR,GAAIuD,IAAI1D,EAAM,OAEVY,EAAQ,CACZT,GAAIuD,IAAIC,EAAM,OAGVmB,EAAW1B,EAAc4B,KAAK,SAAAC,GAAA,OAAAA,EAAG9E,KAAgBwD,EAAKxD,OAEtDvB,EAAO,CACXsF,KAAMR,IAAIoB,EAAD,YAAwBZ,GACjCC,MAAOT,IAAIoB,EAAD,aAAyBX,KAG5BD,MAASA,EA1BJ,CAAAa,EAAA9I,KAAA,gBAAA8I,EAAA9I,KAAA,GA2BN8F,EAAmBnB,EAAOD,GA3BpB,YA8BV/B,EAAKuF,OAAUA,EA9BL,CAAAY,EAAA9I,KAAA,gBAAA8I,EAAA9I,KAAA,GA+BN8F,EAAmBpB,EAAOC,GA/BpB,YAkCVsD,IAAQC,EAlCE,CAAAY,EAAA9I,KAAA,gBAAA8I,EAAA9I,KAAA,GAmCNuE,EAAQG,EAAOC,EAAO8C,IAAIC,EAAM,SAnC1B,QAAAoB,EAAA9I,KAAA,qBAoCHiI,EApCG,CAAAa,EAAA9I,KAAA,gBAAA8I,EAAA9I,KAAA,GAqCNgF,EAAgBL,EAAOD,EAAO+C,IAAIC,EAAM,SArClC,QAAAoB,EAAA9I,KAAA,qBAsCHkI,EAtCG,CAAAY,EAAA9I,KAAA,gBAAA8I,EAAA9I,KAAA,GAuCNgF,EAAgBN,EAAOC,EAAO8C,IAAIC,EAAM,SAvClC,yBAAAoB,EAAAjG,SAAA4F,KAMPC,EAAI,EANG,YAMAA,EAAI/G,EAAMxB,QANV,CAAAyI,EAAA5I,KAAA,gBAAA4I,EAAAK,cAAAR,EAMPC,GANO,eAMkBA,IANlBE,EAAA5I,KAAA,sBA2CV2I,EAAUO,IAAa/B,EAAepD,EAAKpC,MAAO,OAE5CxB,QAAU,GA7CN,CAAAyI,EAAA5I,KAAA,SA8CL0I,EAAI,EA9CC,aA8CEA,EAAIC,EAAQxI,QA9Cd,CAAAyI,EAAA5I,KAAA,YA+CN0H,EAAOiB,EAAQD,GAEfT,EAAOR,IAAIC,EAAM,aACjBQ,EAAQT,IAAIC,EAAM,cAElBhD,EAAQ,CACZR,GAAIuD,IAAI1D,EAAM,OAEVY,EAAQ,CACZT,GAAIuD,IAAIC,EAAM,QAGZO,IAAQC,EA3DA,CAAAU,EAAA5I,KAAA,gBAAA4I,EAAA5I,KAAA,GA4DJqG,EAAW3B,EAAOC,GA5Dd,QAAAiE,EAAA5I,KAAA,qBA6DDiI,EA7DC,CAAAW,EAAA5I,KAAA,gBAAA4I,EAAA5I,KAAA,GA8DJ8F,EAAmBnB,EAAOD,GA9DtB,QAAAkE,EAAA5I,KAAA,qBA+DDkI,EA/DC,CAAAU,EAAA5I,KAAA,gBAAA4I,EAAA5I,KAAA,GAgEJ8F,EAAmBpB,EAAOC,GAhEtB,QA8CsB+D,IA9CtBE,EAAA5I,KAAA,kCAAA4I,EAAA/F,SAAA2F,MAAH,gBAAAW,GAAA,OAAAZ,EAAA/H,MAAAsC,KAAA5C,YAAA,GAsEf,MAAO,CACL0D,UACAyC,aACAP,qBACAe,YAIiBuC,WC9LRC,EA7DI,WACf,IAAIrF,EAAS,GACTa,EAAS,GACTyE,EAAW,GACXC,EAAa,KACbC,EAAW,KAsBTC,EAAW,WACf,MAAO,CACL7H,MAAO,IAAI8H,IAAQ1F,GACnBrC,MAAO,IAAI+H,IAAQ7E,KAoBjB8E,EAAU,CACdC,UAlCgB,SAAAjI,GAEhB,OADAkD,EAASlD,EACFgI,GAiCPE,UAxCgB,SAAAjI,GAEhB,OADAoC,EAASpC,EACF+H,GAuCPG,YA/BkB,SAAAC,GAElB,OADAT,EAAWS,EACJJ,GA8BPK,YA/CkB,SAAAC,GAElB,OADAV,EAAaU,EACNN,GA8CPO,MArBY,WAIZ,OAHKV,IACHA,EAAW,IAAIW,IAAWZ,EAAYE,IAAYH,IAE7C,CACLc,QAASZ,EACTa,QAAS,SAAA3I,GAAsB,IAAnBE,EAAmBF,EAAnBE,MAAOD,EAAYD,EAAZC,MACjBqC,EAASpC,EACTiD,EAASlD,EACT6H,EAASa,QAAQZ,MAEnB5H,SAAU,kBAAMmC,GAChBzC,SAAU,kBAAMsD,MAYpB,OAAO8E,EAGcW,GC5DVC,EAAW,SAAC7K,EAAOC,GAO9B,OANA6K,oBAAU,WACR,GAAuB,oBAAZ7K,EAEX,OADAH,EAAQC,UAAUC,EAAOC,GAClB,kBAAMH,EAAQK,YAAYH,EAAOC,KACvC,CAACD,EAAOC,IAEJ,SAAAyB,GAAK,OAAI5B,EAAQQ,KAAKN,EAAO0B,KCLhCqJ,EAAiB,SAACC,EAAOC,GAC7B,OAAQA,EAAO3C,MACb,IAAK,SACH,IAAMpG,EAAQjB,EAAYkB,WACpBF,EAAQhB,EAAYY,WAC1B,OAAOqJ,EAAehJ,EAAOD,GAC/B,QACE,OAAO+I,IAIPG,EAAe,SAAC7C,GACpB,OAAQA,GACN,IAAK,SACH,MAAO,UACT,IAAK,UACH,MAAO,UACT,QACE,MAAO,YAgBP4C,EAAiB,SAAChJ,EAAOD,GAC7B,IAAMmJ,EAAY,CAChBlJ,MAAO,GACPD,MAAO,IAET,OAAKtB,MAAM0E,QAAQnD,IAOFnB,OAAOqB,KAAKF,GAAS,IAC7BrB,QAAQ,SAAAM,GACf,IAAMkD,EAAOnC,EAAMf,GAEnBiK,EAAUlJ,MAAMhC,KAAhBa,OAAAiF,EAAA,EAAAjF,CAAA,CACEyD,GAAIH,EAAKG,GACT8D,KAAMjE,EAAKa,KAAKoD,MA9BL,SAACA,GAChB,OAAQA,GACN,IAAK,QACH,MAAO,CAAE+C,KAAM,GAAIC,gBAAiB,CAAEC,QAAS,GAAIC,QAAS,MAC9D,IAAK,WACH,MAAO,CAAEC,MAAO,SAAUJ,KAAM,GAAIC,gBAAiB,CAAEC,QAAS,GAAIC,QAAS,MAC/E,IAAK,WACL,QACE,MAAO,CAAEC,MAAO,MAAOJ,KAAM,GAAIC,gBAAiB,CAAEC,QAAS,GAAIC,QAAS,OAuBvEE,CAASrH,EAAKa,KAAKoD,MAHxB,CAIEI,MAAOrE,EAAKa,KAAKyG,KACjB1J,MAAOoC,EAAKpC,MACZiD,KAAKnE,OAAAiF,EAAA,EAAAjF,CAAA,GACAsD,EAAKa,MAEV0G,MAAO,eAIM7K,OAAOqB,KAAKH,GAAS,IAC7BpB,QAAQ,SAAAgL,GACE5J,EAAM4J,GAEdhL,QAAQ,SAAAmH,GACfoD,EAAUnJ,MAAM/B,KAAK,CACnB4L,KAAMD,EACNE,GAAI/D,EAAK3D,KACTuH,MAAOT,EAAapD,IAAIC,EAAM,iBAC9BM,KAAMP,IAAIC,EAAM,YAAa,IAC7BgE,OAAQ,WAKPZ,GAtCE,CACLlJ,MAAO,GACPD,MAAO,KAuCAgK,EAAe,WAAM,IAAAC,EACGC,qBAAWpB,EAAgBG,EAAejK,EAAYkB,WAAYlB,EAAYY,aADjFuK,EAAArL,OAAAsL,EAAA,EAAAtL,CAAAmL,EAAA,GACzBI,EADyBF,EAAA,GAChBG,EADgBH,EAAA,GAAAI,EAEIC,qBAFJC,EAAA3L,OAAAsL,EAAA,EAAAtL,CAAAyL,EAAA,GAEzBG,EAFyBD,EAAA,GAEbE,EAFaF,EAAA,GAI1BG,EAAiBC,mBACjBC,EAAQD,mBAMRE,EAAqBnC,EAAS,wBAE9BoC,EAAmBC,sBAAY,SAAAlN,GACnC,IAAMqE,EAAO0I,EAAMI,QAAQzC,QAAQ0C,UAAUpN,EAAMqN,QAAQC,KAC3D,GAAIP,EAAMI,QAAQzC,QAAQ6C,UAAUlJ,GAClC0I,EAAMI,QAAQzC,QAAQ8C,YAAYnJ,OAC7B,CACL,IAAMoJ,EAAenB,EAAQpK,MAAMmH,KAAK,SAAArH,GAAA,OAAAA,EAAGwC,KAAgBH,IAC3D,IAAKoJ,EAAc,OACnBV,EAAMI,QAAQzC,QAAQgD,oBAAoBrJ,EAAM,CAAEsJ,sBAAuB,CAAEjF,MAAO+E,EAAavI,KAAKyG,UAErG,CAACW,IAEEsB,EAAmBV,sBAAY,SAAAW,GACnC,IAAMxJ,EAAO0D,IAAI8F,EAAD,WAAqB,MACrC,GAAIxJ,IACG0I,EAAMI,QAAQzC,QAAQ6C,UAAUlJ,GAAO,CAC1C,IAAMoJ,EAAenB,EAAQpK,MAAMmH,KAAK,SAAAhG,GAAA,OAAAA,EAAGmB,KAAgBH,IACvDoJ,GACFb,EAAca,KAInB,CAACnB,EAAQpK,QAuCZ,OArCA4I,oBAAU,WACJ6B,GAAYK,EAAmBL,IAClC,CAACA,EAAYK,IAEhBnC,EAAS,kBAjCW,WAClB0B,EAAgB,CAAEjE,KAAM,aAiC1BuC,EAAS,uBA/Be,kBAAM+B,EAAc,QAiC5C9B,oBAAU,WAKR,GAAKiC,EAAMI,QAgBTJ,EAAMI,QAAQzC,QAAQoD,IAAI,YAAab,GACvCF,EAAMI,QAAQzC,QAAQoD,IAAI,aAAcF,GACxCb,EAAMI,QAAQzC,QAAQqD,GAAG,YAAad,GACtCF,EAAMI,QAAQzC,QAAQqD,GAAG,aAAcH,GAEvCb,EAAMI,QAAQxC,QAAQ2B,OArBJ,CAClB,IAAM0B,EAAcrE,EACjBW,YAAYuC,EAAeM,SAC3BjD,UAAUoC,EAAQrK,OAClBkI,UAAUmC,EAAQpK,OAClBkI,YATW,CACd6D,YAAY,IASTzD,QAEHuC,EAAMI,QAAUa,EAEhBjB,EAAMI,QAAQzC,QAAQqD,GAAG,YAAad,GACtCF,EAAMI,QAAQzC,QAAQqD,GAAG,aAAcH,GAEvChB,EAAcN,EAAQpK,MAAMmH,KAAK,SAAA5F,GAAA,MAAmB,yCAAnBA,EAAGe,MACpC0J,SAASC,iBAAiB,cAAe,SAAAC,GAAC,OAAIA,EAAEC,mBAAkB,KASnE,CAAC/B,EAASsB,EAAkBX,IAExBqB,EAAA1L,EAAA2L,cAAA,OAAKC,MAAO,CAAEC,SAAU,SAAUC,KAAM,GAAKC,IAAK9B,EAAgBrI,GAAG,qCC/IxEoK,EAAa,SAAC5O,GAClB,IAAM6O,EAAS,IAAIC,WACnBD,EAAOE,mBAAmB/O,EAAMgP,OAAOC,MAAM,IAE7CJ,EAAOK,UAAPnO,OAAA2B,EAAA,EAAA3B,CAAA4B,EAAAC,EAAAC,KAAmB,SAAAC,IAAA,IAAAoC,EAAAjD,EAAAC,EAAA,OAAAS,EAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAA1C,MAAA,OACX4E,EAAO7D,KAAKC,MAAMuN,EAAOM,QACzBlN,EAAQ8F,IAAI7C,EAAM,QAAS,IAC3BhD,EAAQ6F,IAAI7C,EAAM,QAAS,IAEjCjE,EAAYc,iBAAiB,CAAEE,QAAOC,UACtCpC,EAAQQ,KAAK,mBANI,wBAAA0C,EAAAG,SAAAL,OCdRsM,EAAa,SAAAC,GACxB,IAEMC,EAAQ,CACZ,CACEnO,IAAK,UACLwK,KAAM,aACN4D,UAAW,CACTC,SAAU,OAEZC,QAToB5E,EAAS,sBAW/B,CACE1J,IAAK,SACLwK,KAAM,SACN4D,UAAW,CACTC,SAAU,UAEZC,QAAS,YDMW,WACxB,IAAMlF,EAAU2D,SAASK,cAAc,SACvChE,EAAQmF,aAAa,OAAQ,QAC7BnF,EAAQmF,aAAa,SAAU,SAE/BnF,EAAQiE,MAAMmB,QAAU,OACxBpF,EAAQ4D,iBAAiB,SAAUS,GACnCrE,EAAQqF,QCZFC,KAGJ,CACE1O,IAAK,WACLwK,KAAM,WACN4D,UAAW,CACTC,SAAU,YAEZC,QAAS,WACP,IAAMxN,EAAQhB,EAAYY,WACpBK,EAAQjB,EAAYa,kBD/BN,SAACgO,EAAU5K,GACrC,IAAMqF,EAAU2D,SAASK,cAAc,KACvChE,EAAQmF,aAAa,OAArB,iCAAArH,OAA8D0H,mBAAmB7K,KACjFqF,EAAQmF,aAAa,WAArB,GAAArH,OAAoCyH,EAApC,OAAAzH,OAAkD2H,MAAQC,OAAO,sBAAjE,UAEA1F,EAAQiE,MAAMmB,QAAU,OACxBzB,SAASgC,KAAKC,YAAY5F,GAC1BA,EAAQqF,QACR1B,SAASgC,KAAKE,YAAY7F,GC0BpB8F,CADiB,aACMhP,KAAKO,UAAU,CAAEK,QAAOC,SAAS,KAAM,OAKpE,OACEoM,EAAA1L,EAAA2L,cAAA,OAAKC,MAAO,CAAE8B,SAAU,QAASC,IAAK,EAAGC,KAAM,EAAGC,MAAO,IACvDnC,EAAA1L,EAAA2L,cAACmC,EAAA,EAAD,CACEpB,MAAOA,6GC3CTqB,EAAY,SAACC,EAAUC,GAAX,OAAyB,SAACC,EAAaC,GACvD,MAAiB,SAAbH,EACKC,GAAaE,IAAgB,EAGrB,UAAbH,IACKC,GAAaC,KAEf,IAGIE,EAAsB,SAAA3B,GAAS,IAClC9G,EAA0B8G,EAA1B9G,KAAMC,EAAoB6G,EAApB7G,MAAOyI,EAAa5B,EAAb4B,SAErB,OACE3C,EAAA1L,EAAA2L,cAAC2C,EAAA,EAAD,CAAO1C,MAAO,CAAE2C,YAAa,EAAGC,UAAW,GAAKC,cAAc,gBAAgBC,OAAQ,CAAEC,YAAa,IACnGjD,EAAA1L,EAAA2L,cAACiD,EAAA,EAAD,CAAUC,QAASlJ,EAAM0I,SAAU,SAACjR,EAAO0B,GACrCiP,EAAU,OAAQjP,EAAlBiP,CAAyBpI,EAAMC,IACjCyI,EAAS,OAAQvP,IAElBgH,MAAM,SACT4F,EAAA1L,EAAA2L,cAACiD,EAAA,EAAD,CAAUC,QAASjJ,EAAOyI,SAAU,SAACjR,EAAO0B,GACtCiP,EAAU,QAASjP,EAAnBiP,CAA0BpI,EAAMC,IAClCyI,EAAS,QAASvP,IAEnBgH,MAAM,ieCtBf,IAAMgJ,EAAsBC,IAAOC,IAAVC,KAsBZC,EAAa,SAAAzC,GAAS,IACzB0C,EAA4G1C,EAA5G0C,aAAcvN,EAA8F6K,EAA9F7K,GAAIwN,EAA0F3C,EAA1F2C,KAAMC,EAAoF5C,EAApF4C,YAAaC,EAAuE7C,EAAvE6C,eAAgBC,EAAuD9C,EAAvD8C,kBAAmBC,EAAoC/C,EAApC+C,gBAAiBC,EAAmBhD,EAAnBgD,eAC3FC,EAAiBvK,IAAIkK,EAAD,eAAA5J,OAA6B7D,EAA7B,qBAAoD,MACxE+N,EAAexK,IAAIkK,EAAD,eAAA5J,OAA6B7D,EAA7B,wBAAuD,MAEzEgO,EAAezK,IAAIkK,EAAD,eAAA5J,OAA6B7D,EAA7B,WAAyC,GAC3DiO,EAAgB1K,IAAIkK,EAAD,eAAA5J,OAA6B7D,EAA7B,YAA0C,GAE7DkO,EAAc3K,IAAImK,EAAD,IAAA7J,OAAqB7D,EAArB,aACjBmO,EAAY5K,IAAImK,EAAD,IAAA7J,OAAqB7D,EAArB,WAWrB,OATAsG,oBAAU,WACHkH,GACHK,EAAe,CACbO,KAAI,eAAAvK,OAAiB7D,EAAjB,UACJ9C,OAAO,KAGV,CAAC2Q,EAAgB7N,EAAIwN,IAGtB1D,EAAA1L,EAAA2L,cAACmD,EAAD,KACEpD,EAAA1L,EAAA2L,cAACsE,EAAA,EAAD,CACEtD,UAAW,CAAEC,SAAU,eACvBC,QAAS,WACY1H,IAAIkK,EAAD,eAAA5J,OAA6B7D,EAA7B,KAAoC,OAExD6N,EAAe,CACbO,KAAI,eAAAvK,OAAiB7D,EAAjB,KACJ8D,KAAM,WAGVyJ,OAGJzD,EAAA1L,EAAA2L,cAACuE,EAAA,EAAD,CACEpK,MAAM,eACNqK,YAAW,oCACX1I,QAAS+H,EACTY,aAAcN,EACdO,YAAaX,EACbrB,SAAU,SAACjR,EAAO0B,GAKhB,GAJA2Q,EAAe,CACbO,KAAI,eAAAvK,OAAiB7D,EAAjB,iBACJ9C,MAAO,CAAEP,IAAKO,EAAMP,IAAKwH,KAAMjH,EAAMiH,QAEnC,GAAAN,OAAG7D,KAAQ0N,EAAgB,CAC7B,IAAMgB,EAAMnS,OAAAiF,EAAA,EAAAjF,CAAA,GACPmR,UAEEgB,EAAO1O,GACd2N,EAAkBe,OAIxB5E,EAAA1L,EAAA2L,cAACuE,EAAA,EAAD,CACEpK,MAAM,YACN2B,QAAS,CACP,CAAElJ,IAAK,UAAWwH,KAAM,YACxB,CAAExH,IAAK,SAAUwH,KAAM,WAEzBoK,YAAY,gCACZE,YAAaV,EACbS,aAAcL,EACd1B,SAAU,SAACjR,EAAO0B,GAKhB,GAJA2Q,EAAe,CACbO,KAAI,eAAAvK,OAAiB7D,EAAjB,oBACJ9C,MAAO,CAAEP,IAAKO,EAAMP,IAAKwH,KAAMjH,EAAMiH,KAAMiD,MAAOlK,EAAMkK,SAEtD,GAAAvD,OAAG7D,KAAQ0N,EAAgB,CAC7B,IAAMgB,EAAMnS,OAAAiF,EAAA,EAAAjF,CAAA,GACPmR,UAEEgB,EAAO1O,GACd2N,EAAkBe,OAIxB5E,EAAA1L,EAAA2L,cAAC4E,EAAD,CACE5K,KAAMiK,EACNhK,MAAOiK,EACPxB,SAAU,SAAC2B,EAAMlR,GACf2Q,EAAe,CACbO,KAAI,eAAAvK,OAAiB7D,EAAjB,MAAA6D,OAAwBuK,GAC5BlR,kCCxGC0R,GAAaC,IAAMC,KAAK,SAAAjE,GAAS,IACpC4D,EAAkD5D,EAAlD4D,YAAahC,EAAqC5B,EAArC4B,SAAUsC,EAA2BlE,EAA3BkE,SAAUP,EAAiB3D,EAAjB2D,aAEzC,OACE1E,EAAA1L,EAAA2L,cAACuE,EAAA,EAAD,CACES,SAAUA,EACV7K,MAAM,cACN2B,QAAS,CACP,CAAElJ,IAAK,WAAYwH,KAAM,aACzB,CAAExH,IAAK,QAASwH,KAAM,SACtB,CAAExH,IAAK,WAAYwH,KAAM,aAE3BqK,aAAcA,EACdD,YAAY,+BACZE,YAAaA,EACbhC,SAAUA,KArBC,SAACuC,EAAWC,GAC3B,IAAMC,EAAgBF,EAAUP,cAAgBQ,EAAUR,YACpDU,EAAiBH,EAAUR,eAAiBS,EAAUT,aAC5D,OAAOU,GAAiBC,ICabC,GAAiB,SAAAvE,GAAS,IAEnC6C,EAQE7C,EARF6C,eACAE,EAOE/C,EAPF+C,gBACAD,EAME9C,EANF8C,kBACAF,EAKE5C,EALF4C,YACAI,EAIEhD,EAJFgD,eACA9K,EAGE8H,EAHF9H,YACAsM,EAEExE,EAFFwE,cACA7B,EACE3C,EADF2C,KAEF,OACE1D,EAAA1L,EAAA2L,cAAAD,EAAA1L,EAAAkR,SAAA,KACExF,EAAA1L,EAAA2L,cAACwF,GAAA,EAAD,CACErL,MAAM,OACNqK,YAAY,gBACZC,aAAcd,EAAevG,KAC7B4H,UAAQ,EACRS,kBAAoB,SAAAtS,GAClB,IAAMuS,EAAYC,OAAOxS,GAAOyS,cAEhC,GADmB/B,EAAgBgC,KAAK,SAAA/Q,GAAA,IAAGsF,EAAHtF,EAAGsF,KAAH,OAAcuL,OAAOvL,GAAMwL,gBAAkBF,MAClEjC,EACjBG,EAAkBpR,OAAAiF,EAAA,EAAAjF,CAAA,GACbmR,EADY,CAEfvG,KAAI,OAAAtD,OAAS3G,EAAT,kCAGN,GAAIwQ,EAAevG,KAAM,CACvB,IAAMuH,EAAMnS,OAAAiF,EAAA,EAAAjF,CAAA,GACPmR,UAEEgB,EAAOvH,KACdwG,EAAkBe,KAIxBjC,SAAU,SAACjR,EAAO0B,GAAR,OAAkB2Q,EAAe,CAAEO,KAAM,OAAQlR,WAC3DA,MAAOuQ,EAAYtG,MAAQ,KAE7B2C,EAAA1L,EAAA2L,cAAC6E,GAAD,CACEG,UAAQ,EACRP,aAAcd,EAAe5J,KAC7B2K,YAAahB,EAAY3J,MAAQ,KACjC2I,SAAU,SAACjR,EAAO0B,GAEhB,GADA2Q,EAAe,CAAEO,KAAM,OAAQlR,MAAOA,EAAMP,MACxC,SAAU+Q,EAAgB,CAC5B,IAAMgB,EAAMnS,OAAAiF,EAAA,EAAAjF,CAAA,GACPmR,UAEEgB,EAAO5K,KACd6J,EAAkBe,OAIxB5E,EAAA1L,EAAA2L,cAACwF,GAAA,EAAD,CACErL,MAAM,aACNqK,YAAY,yCACZ9B,SAAU,SAACjR,EAAO0B,GAAR,OAAkB2Q,EAAe,CAAEO,KAAM,aAAclR,WACjEA,MAAOuQ,EAAYoC,YAAc,KAEnC/F,EAAA1L,EAAA2L,cAACwF,GAAA,EAAD,CACErL,MAAM,MACNqK,YAAY,wCACZ9B,SAAU,SAACjR,EAAO0B,GAAR,OAAkB2Q,EAAe,CAAEO,KAAM,MAAOlR,WAC1DsS,kBAAmB,SAAAtS,GAAK,OA1Ef,SAAA4S,GACf,GAAKA,EACL,IAEE,GADmB,IAAIC,IAAID,GACX,OAAO,KACvB,MAAOE,GACP,OAAOA,EAAIC,SAoEqBC,CAAShT,IACrCA,MAAOuQ,EAAYqC,KAAO,KAE5BhG,EAAA1L,EAAA2L,cAACwF,GAAA,EAAD,CACErL,MAAM,cACNqK,YAAY,mEACZ4B,WAAS,EACTC,KAAM,EACN3D,SAAU,SAACjR,EAAO0B,GAAR,OAAkB2Q,EAAe,CAAEO,KAAM,cAAelR,WAClEA,MAAOuQ,EAAY4C,aAAe,KAvFhB,SAAA7S,GAAsG,IAAnGuF,EAAmGvF,EAAnGuF,YAAa6K,EAAsFpQ,EAAtFoQ,gBAAiBH,EAAqEjQ,EAArEiQ,YAAaI,EAAwDrQ,EAAxDqQ,eAAgBF,EAAwCnQ,EAAxCmQ,kBAAmBD,EAAqBlQ,EAArBkQ,eACzG,OAAO3K,EAAYK,IAAI,SAAAkN,GAAI,OAAIzB,IAAM0B,aAAaD,EAAM,CAAE1C,kBAAiBH,cAAaI,iBAAgBF,oBAAmBD,qBAwFtH8C,CAAkB,CAAEzN,cAAa6K,kBAAiBH,cAAaI,iBAAgBF,oBAAmBD,mBACnG5D,EAAA1L,EAAA2L,cAAC0G,GAAA,EAAD,CACExF,QAASoE,EACTtE,UAAW,CAAEC,SAAU,QAFzB,oBCjFA0F,GAAkB,SAACC,EAAQjT,GAC/B,IAAMqF,EAAc,GAepB,OAdA4N,EAAOlT,MAAMpB,QAAQ,SAAAmH,GACnBT,EAAYS,EAAKxD,IAAM,CACrB+D,KAAMP,EAAK9C,KAAKqD,KAChBC,MAAOR,EAAK9C,KAAKsD,MACjB4M,eAAgB,CACdjU,IAAK6G,EAAK9C,KAAKoD,KAAK9D,GACpBmE,KAAMX,EAAK9C,KAAKoD,KAAKI,OAEvB2M,YAAa,CACXlU,IAAK6G,EAAKxD,GACVmE,KAAMZ,IAAI7F,EAAM9B,OAAO,SAAAiE,GAAI,OAAIA,EAAKG,KAAOwD,EAAKxD,KAAK,gBAAiB,QAIrE+C,GAqBH+N,GAAiB,SAACtK,EAAOC,GAC7B,GAAoB,KAAhBA,EAAO2H,KAAa,MAAO,GAC/B,IAAM2C,EAAYxU,OAAAiF,EAAA,EAAAjF,CAAA,GAAQiK,GAC1B,OAAQC,EAAO3C,MACb,IAAK,SAEH,OADAkN,IAAMD,EAActK,EAAO2H,MACpB2C,EACT,IAAK,OACH,OAAOxU,OAAAiF,EAAA,EAAAjF,CAAA,GAAKkK,EAAOwK,WACrB,QAEE,OADAC,IAAIH,EAActK,EAAO2H,KAAM3H,EAAOvJ,OAC/B6T,IAIPI,GAAoB,SAACpO,EAAa0D,GACtC,OAAQA,EAAO3C,MACb,IAAK,MACH,IAAM9D,EAAKsD,MACX,SAAAO,OAAAtH,OAAA6U,EAAA,EAAA7U,CACKwG,GADL,CAEE+G,EAAA1L,EAAA2L,cAACsH,EAAD,CACE1U,IAAKqD,EACLA,GAAIA,EACJuN,aAAc,kBAAM9G,EAAO6K,SAAS,CAAExN,KAAM,SAAU9D,YAG5D,IAAK,SACH,OAAO+C,EAAYnH,OAAO,SAAAiD,GAAA,OAAAA,EAAGlC,MAAkB8J,EAAOzG,KACxD,IAAK,QACH,MAAO,GACT,IAAK,OAEH,OADiBzD,OAAOqB,KAAK6I,EAAO1D,aACpBK,IAAI,SAAAzG,GAClB,IAAMqD,EAAKrD,EACL2U,EAAW/N,IAAIkD,EAAQ,WAAY,MAEzC,OAAK6K,GAAatR,EAGhB8J,EAAA1L,EAAA2L,cAACsH,EAAD,CACE7D,MAAI,EACJ7Q,IAAKqD,EACLA,GAAIA,EACJuN,aAAc,kBAAM+D,EAAS,CAAExN,KAAM,SAAU9D,UAPtB,OAU5BpE,OAAO,SAAAyH,GAAI,OAAIA,IACpB,QACE,OAAON,IAIPwO,GAAa,WAEjB,OADc9U,EAAYkB,WACbyF,IAAI,SAAAvD,GAAI,MAAK,CAAElD,IAAKkD,EAAKG,GAAImE,KAAMtE,EAAKa,KAAKyG,SAGtDqK,GAAW,SAAC/D,EAAaC,GAC7B,IAAIgB,EAAS,IACThB,IACFgB,EAAMnS,OAAAiF,EAAA,EAAAjF,CAAA,GACDmR,IAIFD,EAAY3J,OACf4K,EAAO5K,KAAO,kCAGX2J,EAAYtG,OACfuH,EAAOvH,KAAO,6BAGZsG,EAAY1K,cACDxG,OAAOqB,KAAK6P,EAAY1K,aAAe,IAC/C1G,QAAQ,SAAAM,GACX,IAAM6N,EAASjH,IAAIkK,EAAD,eAAA5J,OAA6BlH,EAA7B,qBAAqD,MAC1D4G,IAAIkK,EAAD,eAAA5J,OAA6BlH,EAA7B,wBAAwD,OAE7DuU,IAAIxC,EAAD,IAAA7K,OAAalH,EAAb,UAA0B,4CACnC6N,GAAQ0G,IAAIxC,EAAD,IAAA7K,OAAalH,EAAb,YAA4B,kDAIhD,OAAO+R,GAGI+C,GAAa,SAAC5G,GAAU,IAAA7C,EACXC,oBAAS,GADEC,EAAA3L,OAAAsL,EAAA,EAAAtL,CAAAyL,EAAA,GAC5BwF,EAD4BtF,EAAA,GACtBwJ,EADsBxJ,EAAA,GAAAyJ,EAEP1J,oBAAS,GAFF2J,EAAArV,OAAAsL,EAAA,EAAAtL,CAAAoV,EAAA,GAE5BE,EAF4BD,EAAA,GAEpBE,EAFoBF,EAAA,GAAAlK,EAGGC,qBAAWmJ,GAAgB,IAH9BlJ,EAAArL,OAAAsL,EAAA,EAAAtL,CAAAmL,EAAA,GAG5B+F,EAH4B7F,EAAA,GAGfiG,EAHejG,EAAA,GAAAmK,EAIW9J,mBAASsJ,MAJpBS,EAAAzV,OAAAsL,EAAA,EAAAtL,CAAAwV,EAAA,GAI5BnE,EAJ4BoE,EAAA,GAIXC,EAJWD,EAAA,GAAAE,EAKSjK,mBAAS,IALlBkK,EAAA5V,OAAAsL,EAAA,EAAAtL,CAAA2V,EAAA,GAK5BxE,EAL4ByE,EAAA,GAKZxE,EALYwE,EAAA,GAAAC,EAMCzK,qBAAWwJ,GAAmB,IAN/BkB,EAAA9V,OAAAsL,EAAA,EAAAtL,CAAA6V,EAAA,GAM5BrP,EAN4BsP,EAAA,GAMfC,EANeD,EAAA,GAS7BE,EAAY,kBAAM1E,EAAe,CAAEO,KAAM,GAAIlR,MAAO,MACpDsV,EAAmB,kBAAMF,EAAa,CAAExO,KAAM,WAcpDuC,EAAS,oBAZgB,SAACsK,GACxB,IAAMM,EAvHY,SAAAN,GAAU,IAAA8B,EACAtN,EAAQa,QAA9BE,EADsBuM,EACtBvM,QAASvI,EADa8U,EACb9U,SACXD,EAAQwI,EAAQwM,kBAAkB/B,EAAO3Q,IAEzC2S,EAAiBhV,IAAW/B,OAAO,SAAA4B,GAAA,IAAGwC,EAAHxC,EAAGwC,GAAH,OAAYtC,EAAMkV,SAAS5S,KAWpE,MATkB,CAChBmH,KAAM5D,IAAIoN,EAAQ,aAClB3Q,GAAIuD,IAAIoN,EAAQ,MAChB7M,KAAMP,IAAIoN,EAAQ,aAClBd,WAAYtM,IAAIoN,EAAQ,mBACxBb,IAAKvM,IAAIoN,EAAQ,YACjBN,YAAa9M,IAAIoN,EAAQ,oBACzB5N,YAAa2N,GAAgBC,EAAQgC,IA0GnBE,CAAclC,GAChC2B,EAAa,CACXxO,KAAM,OACNf,YAAakO,EAAUlO,aAAe,GACtCuO,SAAUgB,IAEZzE,EAAe,CAAE/J,KAAM,OAAQmN,cAC/BS,GAAQ,GACRI,GAAU,KAKZ,IAUMgB,EAAY,eAAA7T,EAAA1C,OAAA2B,EAAA,EAAA3B,CAAA4B,EAAAC,EAAAC,KAAG,SAAAC,IAAA,IAAAoQ,EAAA3L,EAAArC,EAAAb,EAAAkT,EAAA,OAAA5U,EAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAA1C,MAAA,UACb4S,EAAS8C,GAAS/D,EAAaC,KACjCnR,OAAOqB,KAAK8Q,GAAQzS,OAAS,GAFd,CAAAuC,EAAA1C,KAAA,eAGjB6R,EAAkBpR,OAAAiF,EAAA,EAAAjF,CAAA,GACbmR,EACAgB,IALYlQ,EAAAE,OAAA,oBAUbqE,EAAcQ,IAAIkK,EAAa,cAAe,IAC9C/M,EAAO,CACX2P,YAAa9M,IAAIkK,EAAa,cAAe,IAC7CtG,KAAM5D,IAAIkK,EAAa,OAAQ,IAC/B3J,KAAMP,IAAIkK,EAAa,OAAQ,IAC/BqC,IAAKvM,IAAIkK,EAAa,MAAO,IAC7BoC,WAAYtM,IAAIkK,EAAa,aAAc,MAGzCD,EAnBe,CAAAhP,EAAA1C,KAAA,gBAAA0C,EAAA1C,KAAA,EAoBEmC,EAAM0E,SAAS,CAAE3C,GAAIyN,EAAYzN,GAAI+C,cAAarC,SApBpD,cAoBXb,EApBWrB,EAAA0B,KAAA1B,EAAA1C,KAAA,GAqBXmC,EAAMyB,QAAQG,GArBH,QAAArB,EAAA1C,KAAA,wBAAA0C,EAAA1C,KAAA,GAuBEmC,EAAM0E,SAAS,CAAEI,cAAarC,SAvBhC,eAuBXb,EAvBWrB,EAAA0B,KAAA1B,EAAA1C,KAAA,GAwBXmC,EAAMyB,QAAQG,GAxBH,QA2BnBmT,IACAR,IACAD,IA7BmB,yBAAA/T,EAAAG,SAAAL,MAAH,yBAAAW,EAAA3C,MAAAsC,KAAA5C,YAAA,GAgClBqK,EAAS,oBA5DM,kBAAMyL,GAAWD,KA6DhC,IAAMoB,EAAU,WACdV,IACAC,IACAV,GAAU,GACVJ,GAAQ,IAQJsB,EAAoB3M,EAAS,kBALL,WAC5B,IAAMyB,EAAUyJ,KAChBU,EAAmBnK,KAKrB,OACEgC,EAAA1L,EAAA2L,cAACmJ,EAAA,EAAD,CACEC,WAAU,GAAAtP,OAAK2J,EAAO,OAAS,MAArB,WACVqE,OAAQA,EACRuB,UAAWH,EACXI,kBAAgB,EAChBC,sBAAuB,kBACrBxJ,EAAA1L,EAAA2L,cAAC2C,EAAA,EAAD,CAAO6G,YAAU,EAACC,gBAAgB,gBAAgB1G,OAAQ,CAAEC,YAAa,KACvEjD,EAAA1L,EAAA2L,cAAC0J,EAAA,EAAD,CAAetP,KAAK,SAAS8G,QAASgI,IACtCnJ,EAAA1L,EAAA2L,cAAC2J,EAAA,EAAD,CAAevP,KAAK,cAAc8G,QAAS6H,MAG/ChP,KAAM6P,IAAUC,QAEhB9J,EAAA1L,EAAA2L,cAAC8J,GAAD,CACErG,KAAMA,EACNI,gBAAiBA,EACjBF,eAAgBA,EAChBC,kBAAmBA,EACnBF,YAAaA,EACbI,eAAgBA,EAChB9K,YAAaA,EACbsM,cA/EgB,WACpBiD,EAAa,CACXxO,KAAM,MACNwN,SAAUgB,EACV1E,kBACAH,cACAI,kCC/ISiG,GAxBQ,SAAAjJ,GAAS,IACtBwF,EAA8CxF,EAA9CwF,YAAaR,EAAiChF,EAAjCgF,WAAYC,EAAqBjF,EAArBiF,IAAK/M,EAAgB8H,EAAhB9H,YACtC,OACE+G,EAAA1L,EAAA2L,cAAC2C,EAAA,EAAD,CAAOI,OAAQ,CAAEC,YAAa,IAC5BjD,EAAA1L,EAAA2L,cAAC2C,EAAA,EAAD,CAAOI,OAAQ,CAAEC,YAAa,IAC5BjD,EAAA1L,EAAA2L,cAACgK,GAAA,EAAD,CAAM/J,MAAO,CAAEgK,eAAgB,aAAeC,QAAQ,cAAtD,eACAnK,EAAA1L,EAAA2L,cAACgK,GAAA,EAAD,KAAO1D,IAETvG,EAAA1L,EAAA2L,cAAC2C,EAAA,EAAD,CAAOI,OAAQ,CAAEC,YAAa,IAC5BjD,EAAA1L,EAAA2L,cAACgK,GAAA,EAAD,CAAM/J,MAAO,CAAEgK,eAAgB,aAAeC,QAAQ,cAAtD,cACAnK,EAAA1L,EAAA2L,cAACgK,GAAA,EAAD,KAAOlE,IAET/F,EAAA1L,EAAA2L,cAAC2C,EAAA,EAAD,CAAOI,OAAQ,CAAEC,YAAa,IAC5BjD,EAAA1L,EAAA2L,cAACgK,GAAA,EAAD,CAAM/J,MAAO,CAAEgK,eAAgB,aAAeC,QAAQ,cAAtD,OACAnK,EAAA1L,EAAA2L,cAAA,KAAGmK,KAAMpE,GAAMA,IAEjBhG,EAAA1L,EAAA2L,cAAC2C,EAAA,EAAD,KACE5C,EAAA1L,EAAA2L,cAACgK,GAAA,EAAD,CAAM/J,MAAO,CAAEgK,eAAgB,aAAeC,QAAQ,cAAtD,eACClR,qJCXT,IAAMoR,GAAchH,YAAO+F,IAAP/F,CAAHiH,MA4BX9G,GAAa,SAAA9P,GAA+B,IAA5B+J,EAA4B/J,EAA5B+J,GAAIzD,EAAwBtG,EAAxBsG,KAAMC,EAAkBvG,EAAlBuG,KAAMC,EAAYxG,EAAZwG,MAChCqQ,EAAkB,GAQtB,OAPItQ,GAAQC,EACVqQ,EAAkB,mBACTtQ,EACTsQ,EAAkB,SACTrQ,IACTqQ,EAAkB,WAGlBvK,EAAA1L,EAAA2L,cAACgK,GAAA,EAAD,KAAOxM,EAAP,MAAczD,EAAd,IAAqBuQ,IAIZC,GAAa,SAAAzJ,GAAS,IAAA7C,EACLC,oBAAS,GADJC,EAAA3L,OAAAsL,EAAA,EAAAtL,CAAAyL,EAAA,GAC1B6J,EAD0B3J,EAAA,GAClB4J,EADkB5J,EAAA,GAAAyJ,EAET1J,mBAAS,MAFA2J,EAAArV,OAAAsL,EAAA,EAAAtL,CAAAoV,EAAA,GAE1B9R,EAF0B+R,EAAA,GAEpB2C,EAFoB3C,EAAA,GASjCvL,EAAS,uBANW,SAACxG,GACnB0U,EAAQ1U,GACRiS,GAAU,KAKZ,IAAM0C,EAAanO,EAAS,qBACtBoO,EAAqBpO,EAAS,wBAC9Bc,EAAO5D,IAAI1D,EAAM,YAAa,uBAC9BwQ,EAAc9M,IAAI1D,EAAM,mBAAoB,oCAC5CgQ,EAAatM,IAAI1D,EAAM,kBAAmB,mCAC1CiQ,EAAMvM,IAAI1D,EAAM,WAAP,GAAAgE,OAAsBsD,EAAtB,gBAETpE,EAtDiB,SAAClD,GACxB,IAAKA,EAAM,MAAO,GAClB,IAAMpC,EAAQhB,EAAYY,WACpBK,EAAQjB,EAAYa,iBAG1B,OADiBf,OAAOqB,KAAKH,GAAS,IACtBI,OAAO,SAACC,EAAKC,GAa3B,OAZkBN,EAAMM,GAErBnC,OAAO,SAAA4H,GAAI,OAAIA,EAAK3D,OAASA,EAAKG,KAClC3D,QAAQ,SAAAmH,GACP,IAAM+D,EAAKhE,IAAI7F,EAAD,IAAAmG,OAAY9F,EAAZ,gBAER+F,EAAOP,IAAIC,EAAM,mBACjBO,EAAOR,IAAIC,EAAM,aACjBQ,EAAQT,IAAIC,EAAM,cAExB1F,EAAIpC,KAAKoO,EAAA1L,EAAA2L,cAAC2K,GAAD,CAAY/X,IAAK6G,EAAK3D,KAAM0H,GAAIA,EAAIxD,KAAMA,EAAMC,MAAOA,EAAOF,KAAMA,OAE1EhG,GACN,IAkCiB6W,CAAiB9U,GAC/B+U,EAAa,WACjBJ,EAAW3U,GACXiS,GAAU,GACV2C,KAGF,OACE3K,EAAA1L,EAAA2L,cAACoK,GAAD,CACEtC,OAAQA,EACRuB,UAAW,WACTqB,IArBmB3C,GAAU,IAwB/B+C,eAAgB,SAAChK,GACf,OACEf,EAAA1L,EAAA2L,cAAC2C,EAAA,EAAD,CAAO6G,YAAU,EAACzG,OAAQ,CAAEC,YAAa,KACvCjD,EAAA1L,EAAA2L,cAACgK,GAAA,EAAD,CAAME,QAAQ,SAASjK,MAAO,CAAE8K,WAAY,GAAIC,aAAc,KAAOlK,EAAMsI,YAC3ErJ,EAAA1L,EAAA2L,cAACsE,EAAA,EAAD,CACEtD,UAAW,CACTC,SAAU,QAEZC,QAAS2J,MAKjBI,gBAAc,EACdlR,KAAM6P,IAAUsB,WAChBC,YAAa,IACb/B,WAAYhM,GAEZ2C,EAAA1L,EAAA2L,cAACoL,GAAD,CACEpS,YAAaA,EACb8M,WAAYA,EACZQ,YAAaA,EACbP,IAAKA,w9CCvGb,IAAMsF,GAAWC,YAAHC,MA4BRC,IATUpI,IAAOC,IAAVoI,MASGC,YAAHC,KAQUN,GACRA,KAGCjI,IAAOC,IAAVuI,KACTJ,IAEYpI,IAAOC,IAAVwI,KACTL,oKC3CJ,IAAMM,GAAO1I,IAAOC,IAAV0I,MAkBKC,OAXf,WACE,OACEjM,EAAA1L,EAAA2L,cAAC8L,GAAD,KACE/L,EAAA1L,EAAA2L,cAACiM,EAAD,MACAlM,EAAA1L,EAAA2L,cAACkM,EAAD,MACAnM,EAAA1L,EAAA2L,cAACmM,GAAD,MACApM,EAAA1L,EAAA2L,cAACoM,GAAD,QCZNC,cAEAC,iBAAOvM,EAAA1L,EAAA2L,cAACuM,GAAD,MAAS5M,SAAS6M,eAAe","file":"static/js/main.84d1d78a.chunk.js","sourcesContent":["const _handlers = {}\n\nexport const Subject = {\n  subscribe (event, handler) {\n    if (!_handlers[event]) _handlers[event] = []\n    _handlers[event].push(handler)\n  },\n  unsubscribe (event, handler) {\n    if (!_handlers[event]) return\n    _handlers[event] = _handlers[event].filter(func => func !== handler)\n  },\n  next (event, ...args) {\n    if (!_handlers[event]) return\n    _handlers[event].forEach(handler => {\n      if (typeof handler === 'function') {\n        handler(...args)\n      }\n    })\n  }\n}\n\nObject.freeze(Subject)\n","const _NodeManager = () => {\n  const _get = (key, defaultValue) => JSON.parse(localStorage.getItem(key)) || defaultValue\n  const _set = (key, value) => localStorage.setItem(key, JSON.stringify(value))\n  const getNodesObject = () => {\n    return _get('_nodes', {})\n  }\n\n  const getNodes = () => {\n    const nodes = _get('_nodes', {})\n    const nodeKeys = Object.keys(nodes)\n\n    return nodeKeys.reduce((acc, cur) => {\n      acc.push(nodes[cur])\n      return acc\n    }, [])\n  }\n\n  const getEdges = () => {\n    return _get('_edges', {})\n  }\n\n  const saveUploadedData = ({ edges, nodes }) => {\n    _set('_edges', edges)\n    _set('_nodes', nodes)\n  }\n\n  return {\n    getEdges,\n    getNodesObject,\n    saveUploadedData,\n    getNodes\n  }\n}\n\nexport const NodeManager = _NodeManager()\n","import get from 'lodash.get'\nimport differenceby from 'lodash.differenceby'\nimport uuid from 'uuid/v4'\n\nconst _Graph = () => {\n  const _get = (key, defaultValue) => JSON.parse(localStorage.getItem(key)) || defaultValue\n  const _set = (key, value) => localStorage.setItem(key, JSON.stringify(value))\n\n  const getEdges = async () => {\n    return _get('_edges', {})\n  }\n\n  const getNodes = async () => {\n    return _get('_nodes', {})\n  }\n\n  const setEdges = async (edges) => {\n    return _set('_edges', edges)\n  }\n\n  const setNodes = async (nodes) => {\n    return _set('_nodes', nodes)\n  }\n\n  const addNode = async (node) => {\n    if (!node.id) throw new Error('Nodes must have IDs to be added')\n    const _nodes = await getNodes()\n\n    _nodes[node.id] = node\n\n    await makeEdges(node)\n    await setNodes(_nodes)\n  }\n\n  const addEdge = async (node1, node2, data) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to add edges')\n\n    const _edges = await getEdges()\n\n    if (!Array.isArray(_edges[node1.id])) _edges[node1.id] = []\n    if (!Array.isArray(_edges[node2.id])) _edges[node2.id] = []\n\n    await addDirectedEdge(node1, node2, data)\n    await addDirectedEdge(node2, node1, data)\n  }\n\n  const addDirectedEdge = async (node1, node2, data) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to add directed edges')\n\n    const _edges = await getEdges()\n\n    if (!Array.isArray(_edges[node1.id])) _edges[node1.id] = []\n\n    const node2TargetID = _edges[node1.id].findIndex(({ node }) => node === node2.id)\n\n    if (node2TargetID >= 0) {\n      _edges[node1.id][node2TargetID] = { node: node2.id, data }\n    } else {\n      _edges[node1.id].push({ node: node2.id, data })\n    }\n\n    await setEdges({ ..._edges })\n  }\n\n  const removeDirectedEdge = async (node1, node2) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to remove directed eges')\n\n    const _edges = await getEdges()\n\n    _edges[node1.id] = _edges[node1.id].filter(({ node }) => node !== node2.id)\n\n    await setEdges(_edges)\n  }\n\n  const removeEdge = async (node1, node2) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to remove edges')\n\n    const _edges = await getEdges()\n\n    _edges[node1.id] = _edges[node1.id].filter(({ node }) => node !== node2.id)\n    _edges[node2.id] = _edges[node2.id].filter(({ node }) => node !== node1.id)\n\n    await setEdges(_edges)\n  }\n\n  const makeNode = async ({ id, data, connections }) => {\n    let node = null\n    if (id) {\n      const nodes = await getNodes()\n      node = {\n        id,\n        edges: [],\n        previousEdges: nodes[id].edges.map(item => ({ ...item })),\n        data: {\n          ...nodes[id].data,\n          ...data\n        }\n      }\n    } else {\n      node = {\n        id: uuid(),\n        edges: [],\n        data: {\n          ...(data || {})\n        }\n      }\n    }\n\n    const connectionKeys = Object.keys(connections || {})\n    const previousEdges = get(node, 'previousEdges', [])\n\n    if (connectionKeys.length <= 0 && previousEdges.length > 0) {\n      const edges = await getEdges()\n      delete edges[node.id]\n      const removeEdges = []\n      Object.keys(edges).forEach(key => {\n        edges[key].forEach((edge, index) => {\n          if (edge.node === node.id) {\n            removeEdges.push({ key, index })\n          }\n        })\n      })\n      removeEdges.forEach(remove => {\n        edges[remove.key].splice(remove.index, 1)\n      })\n      await setEdges({ ...edges })\n      return node\n    }\n\n    connectionKeys.forEach(key => {\n      const info = get(connections, `${[key]}.connectedTo`, null)\n      if (!info) throw new Error('You cannot make a connection without a target')\n      const type = get(connections, `${[key]}.connectionType`, null)\n      if (!type) throw new Error('You cannot make a connection without a type')\n\n      const read = get(connections, `${[key]}.read`, null)\n      const write = get(connections, `${[key]}.write`, null)\n\n      if (!read && !write) throw new Error('You must specify a read or a write option')\n\n      const data = get(connections, `[${key}].data`, {})\n\n      const existingEdgeIndex = node.edges.findIndex(edge => edge.id === key)\n\n      if (existingEdgeIndex >= 0) {\n        node.edges[existingEdgeIndex] = {\n          id: info.key,\n          data: {\n            ...data,\n            read,\n            write,\n            type: {\n              id: type.key,\n              label: type.text\n            }\n          }\n        }\n      } else {\n        node.edges.push({\n          id: info.key,\n          data: {\n            ...data,\n            read,\n            write,\n            type: {\n              id: type.key,\n              label: type.text\n            }\n          }\n        })\n      }\n    })\n    return node\n  }\n\n  const makeEdges = async (node) => {\n    const edges = get(node, 'edges', [])\n    const previousEdges = get(node, 'previousEdges', [])\n\n    if (edges.length <= 0) return\n\n    for (let i = 0; i < edges.length; i++) {\n      const edge = edges[i]\n\n      const read = get(edge, 'data.read')\n      const write = get(edge, 'data.write')\n\n      const node1 = {\n        id: get(node, 'id')\n      }\n      const node2 = {\n        id: get(edge, 'id')\n      }\n\n      const prevEdge = previousEdges.find(({ id }) => id === edge.id)\n\n      const prev = {\n        read: get(prevEdge, `data.read`, read),\n        write: get(prevEdge, `data.write`, write)\n      }\n\n      if (prev.read && !read) {\n        await removeDirectedEdge(node2, node1)\n      }\n\n      if (prev.write && !write) {\n        await removeDirectedEdge(node1, node2)\n      }\n\n      if (read && write) {\n        await addEdge(node1, node2, get(edge, 'data'))\n      } else if (read) {\n        await addDirectedEdge(node2, node1, get(edge, 'data'))\n      } else if (write) {\n        await addDirectedEdge(node1, node2, get(edge, 'data'))\n      }\n    }\n\n    const cleanup = differenceby(previousEdges, node.edges, 'id')\n\n    if (cleanup.length >= 0) {\n      for (let i = 0; i < cleanup.length; i++) {\n        const edge = cleanup[i]\n\n        const read = get(edge, 'data.read')\n        const write = get(edge, 'data.write')\n\n        const node1 = {\n          id: get(node, 'id')\n        }\n        const node2 = {\n          id: get(edge, 'id')\n        }\n\n        if (read && write) {\n          await removeEdge(node1, node2)\n        } else if (read) {\n          await removeDirectedEdge(node2, node1)\n        } else if (write) {\n          await removeDirectedEdge(node1, node2)\n        }\n      }\n    }\n  }\n\n  return {\n    addNode,\n    removeEdge,\n    removeDirectedEdge,\n    makeNode\n  }\n}\n\nexport const Graph = _Graph()\n","import { Network as VisNetwork, DataSet } from 'vis-network'\n\nconst _Network = () => {\n  let _nodes = []\n  let _edges = []\n  let _options = {}\n  let _container = null\n  let _network = null\n\n  const inContainer = element => {\n    _container = element\n    return builder\n  }\n\n  const withNodes = nodes => {\n    _nodes = nodes\n    return builder\n  }\n\n  const withEdges = edges => {\n    _edges = edges\n    return builder\n  }\n\n  const withOptions = options => {\n    _options = options\n    return builder\n  }\n\n  const makeData = () => {\n    return {\n      nodes: new DataSet(_nodes),\n      edges: new DataSet(_edges)\n    }\n  }\n\n  const build = () => {\n    if (!_network) {\n      _network = new VisNetwork(_container, makeData(), _options)\n    }\n    return {\n      network: _network,\n      setData: ({ nodes, edges }) => {\n        _nodes = nodes\n        _edges = edges\n        _network.setData(makeData())\n      },\n      getNodes: () => _nodes,\n      getEdges: () => _edges\n    }\n  }\n\n  const builder = {\n    withEdges,\n    withNodes,\n    withOptions,\n    inContainer,\n    build\n  }\n\n  return builder\n}\n\nexport const Network = _Network()\n","import { useEffect } from 'react'\nimport { Subject } from '../util/Subject'\n\nexport const useEvent = (event, handler) => {\n  useEffect(() => {\n    if (typeof handler !== 'function') return\n    Subject.subscribe(event, handler)\n    return () => Subject.unsubscribe(event, handler)\n  }, [event, handler])\n\n  return value => Subject.next(event, value)\n}\n","import React, { useReducer, useEffect, useCallback, useState, useRef } from 'react'\nimport { Network, NodeManager } from '../../util'\nimport { useEvent } from '../../hooks'\nimport get from 'lodash.get'\n\nconst systemsReducer = (state, action) => {\n  switch (action.type) {\n    case 'update':\n      const nodes = NodeManager.getNodes()\n      const edges = NodeManager.getEdges()\n      return buildGraphData(nodes, edges)\n    default:\n      return state\n  }\n}\n\nconst getLinkColor = (type) => {\n  switch (type) {\n    case 'custom':\n      return '#4b721d'\n    case 'builtin':\n      return '#deb407'\n    default:\n      return '#A0A0A0'\n  }\n}\n\nconst getShape = (type) => {\n  switch (type) {\n    case 'cloud':\n      return { size: 40, widthConstraint: { minimum: 40, maximum: 100 } }\n    case 'external':\n      return { shape: 'circle', size: 40, widthConstraint: { minimum: 40, maximum: 100 } }\n    case 'oncampus':\n    default:\n      return { shape: 'box', size: 40, widthConstraint: { minimum: 40, maximum: 100 } }\n  }\n}\n\nconst buildGraphData = (nodes, edges) => {\n  const graphData = {\n    nodes: [],\n    edges: []\n  }\n  if (!Array.isArray(nodes)) {\n    return {\n      nodes: [],\n      edges: []\n    }\n  }\n\n  const nodeKeys = Object.keys(nodes || {})\n  nodeKeys.forEach(key => {\n    const node = nodes[key]\n\n    graphData.nodes.push({\n      id: node.id,\n      type: node.data.type,\n      ...getShape(node.data.type),\n      label: node.data.name,\n      edges: node.edges,\n      data: {\n        ...node.data\n      },\n      color: '#FFFFFF'\n    })\n  })\n\n  const edgeKeys = Object.keys(edges || {})\n  edgeKeys.forEach(nodeId => {\n    const edgeList = edges[nodeId]\n\n    edgeList.forEach(edge => {\n      graphData.edges.push({\n        from: nodeId,\n        to: edge.node,\n        color: getLinkColor(get(edge, 'data.type.id')),\n        type: get(edge, 'data.type', {}),\n        arrows: 'to'\n      })\n    })\n  })\n\n  return graphData\n}\n\nexport const SystemsGraph = () => {\n  const [systems, systemsDispatch] = useReducer(systemsReducer, buildGraphData(NodeManager.getNodes(), NodeManager.getEdges()))\n  const [activeNode, setActiveNode] = useState()\n\n  const graphContainer = useRef()\n  const graph = useRef()\n\n  const updateGraph = () => {\n    systemsDispatch({ type: 'update' })\n  }\n  const resetActiveNode = () => setActiveNode(null)\n  const displayNodeDetails = useEvent('display-node-details')\n\n  const handleRightClick = useCallback(event => {\n    const node = graph.current.network.getNodeAt(event.pointer.DOM)\n    if (graph.current.network.isCluster(node)) {\n      graph.current.network.openCluster(node)\n    } else {\n      const matchingNode = systems.nodes.find(({ id }) => id === node)\n      if (!matchingNode) return\n      graph.current.network.clusterByConnection(node, { clusterNodeProperties: { label: matchingNode.data.name } })\n    }\n  }, [systems])\n\n  const handleNodeSelect = useCallback(params => {\n    const node = get(params, `nodes[0]`, null)\n    if (node) {\n      if (!graph.current.network.isCluster(node)) {\n        const matchingNode = systems.nodes.find(({ id }) => id === node)\n        if (matchingNode) {\n          setActiveNode(matchingNode)\n        }\n      }\n    }\n  }, [systems.nodes])\n\n  useEffect(() => {\n    if (activeNode) displayNodeDetails(activeNode)\n  }, [activeNode, displayNodeDetails])\n\n  useEvent('save-node-entry', updateGraph)\n  useEvent('deselect-active-node', resetActiveNode)\n\n  useEffect(() => {\n    const options = {\n      autoResize: false\n    }\n\n    if (!graph.current) {\n      const systemGraph = Network\n        .inContainer(graphContainer.current)\n        .withEdges(systems.edges)\n        .withNodes(systems.nodes)\n        .withOptions(options)\n        .build()\n\n      graph.current = systemGraph\n\n      graph.current.network.on('oncontext', handleRightClick)\n      graph.current.network.on('selectNode', handleNodeSelect)\n\n      setActiveNode(systems.nodes.find(({ id }) => id === 'cb72fa88-edde-4003-aaf0-a4436b827c8b'))\n      document.addEventListener('contextmenu', e => e.preventDefault(), false)\n    } else {\n      graph.current.network.off('oncontext', handleRightClick)\n      graph.current.network.off('selectNode', handleNodeSelect)\n      graph.current.network.on('oncontext', handleRightClick)\n      graph.current.network.on('selectNode', handleNodeSelect)\n\n      graph.current.setData(systems)\n    }\n  }, [systems, handleNodeSelect, handleRightClick])\n\n  return <div style={{ overflow: 'hidden', flex: 1 }} ref={graphContainer} id='graph' />\n}\n","import dayjs from 'dayjs'\nimport get from 'lodash.get'\nimport { NodeManager } from './NodeManager'\nimport { Subject } from './Subject'\n\nexport const downloadFile = (filename, data) => {\n  const element = document.createElement('a')\n  element.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(data)}`)\n  element.setAttribute('download', `${filename} - ${dayjs().format('YYYY-MM-DD/THHmmss')}.json`)\n\n  element.style.display = 'none'\n  document.body.appendChild(element)\n  element.click()\n  document.body.removeChild(element)\n}\n\nconst handleFile = (event) => {\n  const reader = new FileReader()\n  reader.readAsBinaryString(event.target.files[0])\n\n  reader.onloadend = async () => {\n    const data = JSON.parse(reader.result)\n    const edges = get(data, 'edges', {})\n    const nodes = get(data, 'nodes', {})\n\n    NodeManager.saveUploadedData({ edges, nodes })\n    Subject.next('save-node-entry')\n  }\n}\n\nexport const uploadFile = () => {\n  const element = document.createElement('input')\n  element.setAttribute('type', 'file')\n  element.setAttribute('accept', '.json')\n\n  element.style.display = 'none'\n  element.addEventListener('change', handleFile)\n  element.click()\n}\n","import React from 'react'\nimport { useEvent } from '../../hooks'\nimport { CommandBar as OfficeCommandBar } from 'office-ui-fabric-react/lib/CommandBar'\nimport { downloadFile, uploadFile } from '../../util/FileManager'\nimport { NodeManager } from '../../util/NodeManager'\n\nexport const CommandBar = props => {\n  const toggleLeftPanel = useEvent('toggle-left-panel')\n\n  const items = [\n    {\n      key: 'addNode',\n      name: 'Add System',\n      iconProps: {\n        iconName: 'Add'\n      },\n      onClick: toggleLeftPanel\n    },\n    {\n      key: 'upload',\n      name: 'Upload',\n      iconProps: {\n        iconName: 'Upload'\n      },\n      onClick: () => {\n        uploadFile()\n      }\n    },\n    {\n      key: 'download',\n      name: 'Download',\n      iconProps: {\n        iconName: 'Download'\n      },\n      onClick: () => {\n        const edges = NodeManager.getEdges()\n        const nodes = NodeManager.getNodesObject()\n\n        const filename = 'TR_Systems'\n        downloadFile(filename, JSON.stringify({ edges, nodes }, null, 2))\n      }\n    }\n  ]\n\n  return (\n    <div style={{ position: 'fixed', top: 0, left: 0, right: 0 }}>\n      <OfficeCommandBar\n        items={items}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox'\n\nconst canChange = (nextPath, nextValue) => (currentRead, currentWrite) => {\n  if (nextPath === 'read') {\n    return nextValue || currentWrite || false\n  }\n\n  if (nextPath === 'write') {\n    return nextValue || currentRead || false\n  }\n  return false\n}\n\nexport const ConnectionReadWrite = props => {\n  const { read, write, onChange } = props\n\n  return (\n    <Stack style={{ marginRight: 8, marginTop: 8 }} verticalAlign='space-between' tokens={{ childrenGap: 4 }}>\n      <Checkbox checked={read} onChange={(event, value) => {\n        if (canChange('read', value)(read, write)) {\n          onChange('read', value)\n        }\n      }} label='Read' />\n      <Checkbox checked={write} onChange={(event, value) => {\n        if (canChange('write', value)(read, write)) {\n          onChange('write', value)\n        }\n      }} label='Write' />\n    </Stack>\n  )\n}\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown'\nimport { ConnectionReadWrite } from './ConnectionReadWrite'\nimport get from 'lodash.get'\nimport { IconButton } from 'office-ui-fabric-react'\n\nconst ConnectionContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  justify-content: flex-start;\n  padding: 8px;\n  margin-top: 12px;\n  border: 1px solid rgb(138, 136, 134);\n  box-sizing: border-box;\n  border-radius: 1px;\n\n  & > .ms-Dropdown-container {\n    flex: 1;\n    width: 100%;\n    margin-right: 4px;\n  }\n\n  & > .ms-Button--icon {\n    align-self: flex-end;\n  }\n`\n\nexport const Connection = props => {\n  const { handleRemove, id, edit, addNodeForm, nodeFormErrors, setNodeFormErrors, existingSystems, updateNodeForm } = props\n  const selectedTarget = get(addNodeForm, `connections[${id}].connectedTo.key`, null)\n  const selectedType = get(addNodeForm, `connections[${id}].connectionType.key`, null)\n\n  const selectedRead = get(addNodeForm, `connections[${id}].read`, true)\n  const selectedWrite = get(addNodeForm, `connections[${id}].write`, false)\n\n  const targetError = get(nodeFormErrors, `[${id}].target`)\n  const typeError = get(nodeFormErrors, `[${id}].type`)\n\n  useEffect(() => {\n    if (!edit) {\n      updateNodeForm({\n        path: `connections[${id}].read`,\n        value: true\n      })\n    }\n  }, [updateNodeForm, id, edit])\n\n  return (\n    <ConnectionContainer>\n      <IconButton\n        iconProps={{ iconName: 'ChromeClose' }}\n        onClick={() => {\n          const connection = get(addNodeForm, `connections[${id}]`, null)\n          if (connection) {\n            updateNodeForm({\n              path: `connections[${id}]`,\n              type: 'remove'\n            })\n          }\n          handleRemove()\n        }}\n      />\n      <Dropdown\n        label='Connected To'\n        placeholder={`What does this system connect to?`}\n        options={existingSystems}\n        errorMessage={targetError}\n        selectedKey={selectedTarget}\n        onChange={(event, value) => {\n          updateNodeForm({\n            path: `connections[${id}].connectedTo`,\n            value: { key: value.key, text: value.text }\n          })\n          if (`${id}` in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors[id]\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <Dropdown\n        label='Interface'\n        options={[\n          { key: 'builtin', text: 'Built In' },\n          { key: 'custom', text: 'Custom' }\n        ]}\n        placeholder='How does this system connect?'\n        selectedKey={selectedType}\n        errorMessage={typeError}\n        onChange={(event, value) => {\n          updateNodeForm({\n            path: `connections[${id}].connectionType`,\n            value: { key: value.key, text: value.text, color: value.color }\n          })\n          if (`${id}` in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors[id]\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <ConnectionReadWrite\n        read={selectedRead}\n        write={selectedWrite}\n        onChange={(path, value) => {\n          updateNodeForm({\n            path: `connections[${id}].${path}`,\n            value\n          })\n        }}\n      />\n    </ConnectionContainer>\n  )\n}\n","import React from 'react'\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown'\n\nconst areEqual = (prevProps, nextProps) => {\n  const keysUnchanged = prevProps.selectedKey === nextProps.selectedKey\n  const errorUnchanged = prevProps.errorMessage === nextProps.errorMessage\n  return keysUnchanged && errorUnchanged\n}\n\nexport const SystemType = React.memo(props => {\n  const { selectedKey, onChange, required, errorMessage } = props\n\n  return (\n    <Dropdown\n      required={required}\n      label='System Type'\n      options={[\n        { key: 'oncampus', text: 'On Campus' },\n        { key: 'cloud', text: 'Cloud' },\n        { key: 'external', text: 'External' }\n      ]}\n      errorMessage={errorMessage}\n      placeholder='Where does this system live?'\n      selectedKey={selectedKey}\n      onChange={onChange}\n    />\n  )\n}, areEqual)\n","import React from 'react'\nimport { TextField } from 'office-ui-fabric-react/lib/TextField'\nimport { ActionButton } from 'office-ui-fabric-react'\nimport { SystemType } from './SystemType'\n\nconst renderConnections = ({ connections, existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors }) => {\n  return connections.map(conn => React.cloneElement(conn, { existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors }))\n}\n\nconst checkURL = url => {\n  if (!url) return\n  try {\n    const checkedURL = new URL(url)\n    if (checkedURL) return null\n  } catch (err) {\n    return err.message\n  }\n}\n\nexport const SystemFormView = props => {\n  const {\n    nodeFormErrors,\n    existingSystems,\n    setNodeFormErrors,\n    addNodeForm,\n    updateNodeForm,\n    connections,\n    addConnection,\n    edit\n  } = props\n  return (\n    <>\n      <TextField\n        label='Name'\n        placeholder='Choose a name'\n        errorMessage={nodeFormErrors.name}\n        required\n        onGetErrorMessage={(value => {\n          const newSystem = String(value).toLowerCase()\n          const nameExists = existingSystems.some(({ text }) => String(text).toLowerCase() === newSystem)\n          if (nameExists && !edit) {\n            setNodeFormErrors({\n              ...nodeFormErrors,\n              name: `The ${value} system already exists`\n            })\n          } else {\n            if (nodeFormErrors.name) {\n              const errors = {\n                ...nodeFormErrors\n              }\n              delete errors.name\n              setNodeFormErrors(errors)\n            }\n          }\n        })}\n        onChange={(event, value) => updateNodeForm({ path: 'name', value })}\n        value={addNodeForm.name || ''}\n      />\n      <SystemType\n        required\n        errorMessage={nodeFormErrors.type}\n        selectedKey={addNodeForm.type || null}\n        onChange={(event, value) => {\n          updateNodeForm({ path: 'type', value: value.key })\n          if ('type' in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors.type\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <TextField\n        label='Department'\n        placeholder='Was this built for another department?'\n        onChange={(event, value) => updateNodeForm({ path: 'department', value })}\n        value={addNodeForm.department || ''}\n      />\n      <TextField\n        label='URL'\n        placeholder='Is there a url to access this system?'\n        onChange={(event, value) => updateNodeForm({ path: 'url', value })}\n        onGetErrorMessage={value => checkURL(value)}\n        value={addNodeForm.url || ''}\n      />\n      <TextField\n        label='Description'\n        placeholder='Enter some information others may want to know about this system'\n        multiline\n        rows={4}\n        onChange={(event, value) => updateNodeForm({ path: 'description', value })}\n        value={addNodeForm.description || ''}\n      />\n      {renderConnections({ connections, existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors })}\n      <ActionButton\n        onClick={addConnection}\n        iconProps={{ iconName: 'Add' }}\n      >\n        Add Connection\n      </ActionButton>\n    </>\n  )\n}\n","import React, { useState, useReducer } from 'react'\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel'\nimport { NodeManager, Graph } from '../../util'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { PrimaryButton, DefaultButton } from 'office-ui-fabric-react'\nimport { useEvent } from '../../hooks'\nimport get from 'lodash.get'\nimport uuid from 'uuid/v4'\nimport set from 'lodash.set'\nimport unset from 'lodash.unset'\nimport { Connection } from './Connection'\nimport { Network } from '../../util/Network'\nimport { SystemFormView } from './SystemFormView'\n\nconst makeConnections = (system, nodes) => {\n  const connections = {}\n  system.edges.forEach(edge => {\n    connections[edge.id] = {\n      read: edge.data.read,\n      write: edge.data.write,\n      connectionType: {\n        key: edge.data.type.id,\n        text: edge.data.type.label\n      },\n      connectedTo: {\n        key: edge.id,\n        text: get(nodes.filter(node => node.id === edge.id), '[0].data.name', '')\n      }\n    }\n  })\n  return connections\n}\n\nconst makeFormState = system => {\n  const { network, getNodes } = Network.build()\n  const nodes = network.getConnectedNodes(system.id)\n\n  const connectedNodes = getNodes().filter(({ id }) => nodes.includes(id))\n\n  const formState = {\n    name: get(system, 'data.name'),\n    id: get(system, 'id'),\n    type: get(system, 'data.type'),\n    department: get(system, 'data.department'),\n    url: get(system, 'data.url'),\n    description: get(system, 'data.description'),\n    connections: makeConnections(system, connectedNodes)\n  }\n  return formState\n}\n\nconst addNodeReducer = (state, action) => {\n  if (action.path === '') return {}\n  const addNodeState = { ...state }\n  switch (action.type) {\n    case 'remove':\n      unset(addNodeState, action.path)\n      return addNodeState\n    case 'edit':\n      return { ...action.formState }\n    default:\n      set(addNodeState, action.path, action.value)\n      return addNodeState\n  }\n}\n\nconst connectionReducer = (connections, action) => {\n  switch (action.type) {\n    case 'add':\n      const id = uuid()\n      return [\n        ...connections,\n        <Connection\n          key={id}\n          id={id}\n          handleRemove={() => action.dispatch({ type: 'remove', id })}\n        />\n      ]\n    case 'remove':\n      return connections.filter(({ key }) => key !== action.id)\n    case 'reset':\n      return []\n    case 'edit':\n      const connKeys = Object.keys(action.connections)\n      return connKeys.map(key => {\n        const id = key\n        const dispatch = get(action, 'dispatch', null)\n\n        if (!dispatch || !id) return null\n\n        return (\n          <Connection\n            edit\n            key={id}\n            id={id}\n            handleRemove={() => dispatch({ type: 'remove', id })}\n          />\n        )\n      }).filter(item => item)\n    default:\n      return connections\n  }\n}\n\nconst getSystems = () => {\n  const nodes = NodeManager.getNodes()\n  return nodes.map(node => ({ key: node.id, text: node.data.name }))\n}\n\nconst validate = (addNodeForm, nodeFormErrors) => {\n  let errors = {}\n  if (nodeFormErrors) {\n    errors = {\n      ...nodeFormErrors\n    }\n  }\n\n  if (!addNodeForm.type) {\n    errors.type = 'A system type must be selected'\n  }\n\n  if (!addNodeForm.name) {\n    errors.name = 'A system name is required'\n  }\n\n  if (addNodeForm.connections) {\n    const keys = Object.keys(addNodeForm.connections || {})\n    keys.forEach(key => {\n      const target = get(addNodeForm, `connections[${key}].connectedTo.key`, null)\n      const type = get(addNodeForm, `connections[${key}].connectionType.key`, null)\n\n      if (!type) set(errors, `[${key}].type`, 'The connection must have a type selected')\n      if (!target) set(errors, `[${key}].target`, 'You must select another system to connect to')\n    })\n  }\n\n  return errors\n}\n\nexport const SystemForm = (props) => {\n  const [edit, setEdit] = useState(false)\n  const [isOpen, setIsOpen] = useState(false)\n  const [addNodeForm, updateNodeForm] = useReducer(addNodeReducer, {})\n  const [existingSystems, setExistingSystems] = useState(getSystems())\n  const [nodeFormErrors, setNodeFormErrors] = useState({})\n  const [connections, connDispatch] = useReducer(connectionReducer, [])\n\n  const toggle = () => setIsOpen(!isOpen)\n  const resetForm = () => updateNodeForm({ path: '', value: {} })\n  const resetConnections = () => connDispatch({ type: 'reset' })\n\n  const handleEditSystem = (system) => {\n    const formState = makeFormState(system)\n    connDispatch({\n      type: 'edit',\n      connections: formState.connections || {},\n      dispatch: connDispatch\n    })\n    updateNodeForm({ type: 'edit', formState })\n    setEdit(true)\n    setIsOpen(true)\n  }\n\n  useEvent('edit-system-panel', handleEditSystem)\n\n  const addConnection = () => {\n    connDispatch({\n      type: 'add',\n      dispatch: connDispatch,\n      existingSystems,\n      addNodeForm,\n      updateNodeForm\n    })\n  }\n\n  const submitSystem = async () => {\n    const errors = validate(addNodeForm, nodeFormErrors)\n    if (Object.keys(errors).length > 0) {\n      setNodeFormErrors({\n        ...nodeFormErrors,\n        ...errors\n      })\n      return\n    }\n\n    const connections = get(addNodeForm, 'connections', {})\n    const data = {\n      description: get(addNodeForm, 'description', ''),\n      name: get(addNodeForm, 'name', ''),\n      type: get(addNodeForm, 'type', ''),\n      url: get(addNodeForm, 'url', ''),\n      department: get(addNodeForm, 'department', '')\n    }\n\n    if (edit) {\n      const node = await Graph.makeNode({ id: addNodeForm.id, connections, data })\n      await Graph.addNode(node)\n    } else {\n      const node = await Graph.makeNode({ connections, data })\n      await Graph.addNode(node)\n    }\n\n    broadcastNodeSave()\n    resetConnections()\n    resetForm()\n  }\n\n  useEvent('toggle-left-panel', toggle)\n  const dismiss = () => {\n    resetForm()\n    resetConnections()\n    setIsOpen(false)\n    setEdit(false)\n  }\n\n  const updateExistingSystems = () => {\n    const systems = getSystems()\n    setExistingSystems(systems)\n  }\n\n  const broadcastNodeSave = useEvent('save-node-entry', updateExistingSystems)\n\n  return (\n    <Panel\n      headerText={`${edit ? 'Edit' : 'Add'} System`}\n      isOpen={isOpen}\n      onDismiss={dismiss}\n      isFooterAtBottom\n      onRenderFooterContent={() => (\n        <Stack horizontal horizontalAlign='space-between' tokens={{ childrenGap: 12 }}>\n          <DefaultButton text='Cancel' onClick={dismiss} />\n          <PrimaryButton text='Save System' onClick={submitSystem} />\n        </Stack>\n      )}\n      type={PanelType.medium}\n    >\n      <SystemFormView\n        edit={edit}\n        existingSystems={existingSystems}\n        nodeFormErrors={nodeFormErrors}\n        setNodeFormErrors={setNodeFormErrors}\n        addNodeForm={addNodeForm}\n        updateNodeForm={updateNodeForm}\n        connections={connections}\n        addConnection={addConnection}\n      />\n    </Panel>\n  )\n}\n","import React from 'react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Text } from 'office-ui-fabric-react/lib/Text'\n\nconst NodeDetailView = props => {\n  const { description, department, url, connections } = props\n  return (\n    <Stack tokens={{ childrenGap: 8 }}>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Description</Text>\n        <Text>{description}</Text>\n      </Stack>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Department</Text>\n        <Text>{department}</Text>\n      </Stack>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>URL</Text>\n        <a href={url}>{url}</a>\n      </Stack>\n      <Stack>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Connections</Text>\n        {connections}\n      </Stack>\n    </Stack>\n  )\n}\n\nexport default NodeDetailView\n","import React, { useState } from 'react'\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel'\nimport { IconButton } from 'office-ui-fabric-react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Text } from 'office-ui-fabric-react/lib/Text'\nimport styled from 'styled-components'\nimport get from 'lodash.get'\nimport { useEvent } from '../../hooks'\nimport { NodeManager } from '../../util'\nimport NodeDetailView from './NodeDetailView'\n\nconst CustomPanel = styled(Panel)`\n  & > .ms-Panel-main {\n    transition: width 300ms ease-in-out;\n  }\n`\nconst parseConnections = (node) => {\n  if (!node) return []\n  const edges = NodeManager.getEdges()\n  const nodes = NodeManager.getNodesObject()\n\n  const edgeKeys = Object.keys(edges || {})\n  return edgeKeys.reduce((acc, cur) => {\n    const nodeEdges = edges[cur]\n    nodeEdges\n      .filter(edge => edge.node === node.id)\n      .forEach(edge => {\n        const to = get(nodes, `[${cur}].data.name`)\n\n        const type = get(edge, 'data.type.label')\n        const read = get(edge, 'data.read')\n        const write = get(edge, 'data.write')\n\n        acc.push(<Connection key={edge.node} to={to} read={read} write={write} type={type} />)\n      })\n    return acc\n  }, [])\n}\n\nconst Connection = ({ to, type, read, write }) => {\n  let readWriteStatus = ''\n  if (read && write) {\n    readWriteStatus = '(Read and Write)'\n  } else if (read) {\n    readWriteStatus = '(Read)'\n  } else if (write) {\n    readWriteStatus = '(Write)'\n  }\n  return (\n    <Text>{to} - {type} {readWriteStatus}</Text>\n  )\n}\n\nexport const NodeDetail = props => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [node, setNode] = useState(null)\n  const displayNode = (node) => {\n    setNode(node)\n    setIsOpen(true)\n  }\n  const closePanel = () => setIsOpen(false)\n\n  useEvent('display-node-details', displayNode)\n  const editSystem = useEvent('edit-system-panel')\n  const deselectActiveNode = useEvent('deselect-active-node')\n  const name = get(node, 'data.name', 'Very Unnamed System')\n  const description = get(node, 'data.description', 'No description has been entered.')\n  const department = get(node, 'data.department', 'No department has been entered.')\n  const url = get(node, 'data.url', `${name} has no url`)\n\n  const connections = parseConnections(node)\n  const handleEdit = () => {\n    editSystem(node)\n    setIsOpen(false)\n    deselectActiveNode()\n  }\n\n  return (\n    <CustomPanel\n      isOpen={isOpen}\n      onDismiss={() => {\n        deselectActiveNode()\n        closePanel()\n      }}\n      onRenderHeader={(props) => {\n        return (\n          <Stack horizontal tokens={{ childrenGap: 12 }}>\n            <Text variant='xLarge' style={{ marginLeft: 16, marginBottom: 12 }}>{props.headerText}</Text>\n            <IconButton\n              iconProps={{\n                iconName: 'Edit'\n              }}\n              onClick={handleEdit}\n            />\n          </Stack>\n        )\n      }}\n      isLightDismiss\n      type={PanelType.customNear}\n      customWidth={400}\n      headerText={name}\n    >\n      <NodeDetailView\n        connections={connections}\n        department={department}\n        description={description}\n        url={url}\n      />\n    </CustomPanel>\n  )\n}\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\n\nconst cubeMove = keyframes`\n    25% { \n      transform: translateX(42px) rotate(-90deg) scale(0.5);\n      -webkit-transform: translateX(42px) rotate(-90deg) scale(0.5);\n    } 50% { \n      transform: translateX(42px) translateY(42px) rotate(-179deg);\n      -webkit-transform: translateX(42px) translateY(42px) rotate(-179deg);\n    } 50.1% { \n      transform: translateX(42px) translateY(42px) rotate(-180deg);\n      -webkit-transform: translateX(42px) translateY(42px) rotate(-180deg);\n    } 75% { \n      transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\n      -webkit-transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\n    } 100% { \n      transform: rotate(-360deg);\n      -webkit-transform: rotate(-360deg);\n    }\n`\n\nconst Spinner = styled.div`\n  margin: 100px auto;\n  width: 40px;\n  height: 40px;\n  align-self: center;\n  justify-self: center;\n  position: relative;\n`\n\nconst cubeCSS = css`\n  background-color: #501214;\n  width: 15px;\n  height: 15px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  \n  -webkit-animation: ${cubeMove} 1.8s infinite ease-in-out;\n  animation: ${cubeMove} 1.8s infinite ease-in-out;\n`\n\nconst CubeOne = styled.div`\n  ${cubeCSS}\n`\nconst CubeTwo = styled.div`\n  ${cubeCSS}\n  animation-delay: -0.9s;\n`\n\nexport const Loading = props => {\n  return (\n    <Spinner>\n      <CubeOne />\n      <CubeTwo />\n    </Spinner>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { SystemsGraph, NodeDetail, SystemForm, CommandBar } from './components'\n\nconst Page = styled.div`\n  background-color: #e8e3db;\n  flex: 1;\n  flex-direction: column;\n  display: flex;\n`\n\nfunction App () {\n  return (\n    <Page>\n      <SystemsGraph />\n      <CommandBar />\n      <SystemForm />\n      <NodeDetail />\n    </Page>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons'\nimport App from './App'\n\ninitializeIcons()\n\nrender(<App />, document.getElementById('root'))\n"],"sourceRoot":""}