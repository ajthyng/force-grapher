{"version":3,"sources":["components/Legend/Legend.js","util/Subject.js","util/NodeManager.js","util/Graph.js","util/Network.js","hooks/useEvent.js","hooks/useEventListener.js","components/SystemsGraph/SystemsGraph.js","util/FileManager.js","components/CommandBar/CommandBar.js","components/SystemForm/ConnectionReadWrite.js","components/SystemForm/Connection.js","components/SystemForm/SystemType.js","components/SystemForm/SystemFormView.js","components/SystemForm/SystemForm.js","components/NodeDetail/NodeDetailView.js","components/NodeDetail/NodeDetail.js","components/Loading/Loading.js","App.js","index.js"],"names":["LegendContainer","styled","div","_templateObject","LegendIcon","i","_templateObject2","OnCampus","attrs","props","className","_templateObject3","External","_templateObject4","Cloud","_templateObject5","NodeContainer","_templateObject6","Label","span","_templateObject7","Node","Icon","icon","react_default","a","createElement","label","EdgeContainer","_templateObject8","EdgeStyle","_templateObject9","_ref","dashed","_ref2","color","EdgeStyleContainer","_templateObject10","Edge","Legend","Legend_Node","Legend_Edge","_handlers","Subject","subscribe","event","handler","push","unsubscribe","filter","func","next","_len","arguments","length","args","Array","_key","forEach","apply","Object","freeze","NodeManager","_get","key","defaultValue","JSON","parse","localStorage","getItem","_set","value","setItem","stringify","getEdges","getNodesObject","saveUploadedData","edges","nodes","getNodes","keys","reduce","acc","cur","_NodeManager","Graph","fixEdges","oldEdges","objectSpread","edgeKeys","didFix","nodeEdges","currentEdgeID","edge","node","otherEdges","otherEdgeIndex","findIndex","splice","updateNodePosition","asyncToGenerator","regenerator_default","mark","_callee","x","y","wrap","_context","prev","sent","position","abrupt","stop","_x","this","updateBatchNodePositions","_ref3","_callee2","existingNodes","_context2","entries","_ref4","_ref5","slicedToArray","_ref5$","_x2","_ref6","_callee3","_edges","_fixEdges","_context3","getNodesArray","_ref7","_callee4","_context4","values","_ref8","_callee5","_context5","setEdges","_ref9","_callee6","_context6","_x3","setNodes","_ref10","_callee7","_context7","_x4","addNode","_ref11","_callee8","_nodes","_context8","id","Error","makeEdges","_x5","addEdge","_ref12","_callee9","node1","node2","data","_context9","isArray","addDirectedEdge","_x6","_x7","_x8","_ref13","_callee10","node2TargetID","_context10","_ref14","_x9","_x10","_x11","removeDirectedEdge","_ref15","_callee11","_context11","_ref16","_x12","_x13","removeEdge","_ref17","_callee12","_context12","_ref18","_x14","_x15","makeNode","_ref20","_callee13","_ref19","connections","connectionKeys","previousEdges","removeEdges","_context13","map","item","uuid","get","index","remove","info","concat","type","read","write","existingEdgeIndex","text","_x16","_ref21","_callee14","_loop","cleanup","_context15","prevEdge","_context14","find","_ref22","delegateYield","differenceby","_x17","_Graph","Network","_options","_container","_network","makeData","DataSet","builder","withEdges","withNodes","withOptions","options","inContainer","element","build","VisNetwork","once","fit","animation","duration","easingFunction","network","setData","_Network","useEvent","useEffect","useEventListener","eventName","undefined","window","savedHandler","useRef","current","addEventListener","eventListener","removeEventListener","systemsReducer","state","action","buildGraphData","getLinkColor","getArrowDirection","graphData","shape","shapeProperties","size","face","code","getShape","name","font","strokeWidth","strokeColor","shadow","enabled","nodeId","from","to","smooth","roundness","hover","highlight","dashes","arrows","SystemsGraph","_useReducer","useReducer","_useReducer2","systems","systemsDispatch","_useState","useState","_useState2","activeNode","setActiveNode","_useState3","_useState4","lastAdded","setLastAdded","selectedNodes","holdingShift","graphContainer","graph","updateGraph","displayNodeDetails","results","selected","getSelectedNodes","unselectAll","selectNodes","handleNodeSelect","useCallback","params","isCluster","matchingNode","handleNodeClick","getNodeAt","pointer","DOM","toConsumableArray","handleNodeDrag","positions","getPositions","handleKeyDown","ctrlKey","keyCode","preventDefault","shiftKey","handleKeyUp","off","on","console","log","focus","scale","start","Date","systemGraph","autoResize","interaction","hoverConnectedEdges","physics","document","e","Fragment","style","overflow","height","ref","Legend_Legend","downloadFile","filename","setAttribute","encodeURIComponent","dayjs","format","display","body","appendChild","click","removeChild","handleFile","reader","FileReader","readAsBinaryString","target","files","onloadend","result","handleSearch","toLowerCase","includes","SearchNodes","SearchBox","placeholder","styles","root","width","alignSelf","onChange","debounce","CommandBar","toggleLeftPanel","querySelector","farItems","onRender","nearItems","iconProps","iconName","onClick","uploadFile","_onClick","CommandBar_CommandBar","items","canChange","nextPath","nextValue","currentRead","currentWrite","ConnectionReadWrite","Stack","marginRight","marginTop","verticalAlign","tokens","childrenGap","Checkbox","checked","ConnectionContainer","Connection_templateObject","Connection","handleRemove","edit","addNodeForm","nodeFormErrors","setNodeFormErrors","existingSystems","updateNodeForm","selectedTarget","selectedType","selectedRead","selectedWrite","targetError","typeError","path","IconButton","Dropdown","errorMessage","selectedKey","errors","ConnectionReadWrite_ConnectionReadWrite","SystemType","React","memo","required","prevProps","nextProps","keysUnchanged","errorUnchanged","SystemFormView","addConnection","TextField","onGetErrorMessage","newSystem","String","some","department","url","URL","err","message","checkURL","multiline","rows","description","conn","cloneElement","renderConnections","ActionButton","makeConnections","system","connectionType","connectedTo","addNodeReducer","addNodeState","unset","formState","set","connectionReducer","Connection_Connection","dispatch","getSystems","sort","b","validate","error","SystemForm","setEdit","isOpen","setIsOpen","_useState5","_useState6","setExistingSystems","_useState7","_useState8","_useReducer3","_useReducer4","connDispatch","resetForm","resetConnections","_Network$build","getConnectedNodes","connectedNodes","makeFormState","submitSystem","_node","broadcastNodeSave","nodeAdded","dismiss","Panel","headerText","onDismiss","isFooterAtBottom","onRenderFooterContent","horizontal","horizontalAlign","DefaultButton","PrimaryButton","PanelType","medium","SystemFormView_SystemFormView","NodeDetailView","Text","textDecoration","variant","href","rel","CustomPanel","NodeDetail_templateObject","NodeDetail","setNode","editSystem","deselectActiveNode","handleEdit","onRenderHeader","marginLeft","marginBottom","isLightDismiss","customNear","customWidth","NodeDetail_NodeDetailView","cubeMove","keyframes","Loading_templateObject","cubeCSS","Loading_templateObject2","css","Loading_templateObject3","Loading_templateObject4","Loading_templateObject5","Page","App_templateObject","App","CommandBar_CommandBar_CommandBar","SystemsGraph_SystemsGraph","SystemForm_SystemForm","NodeDetail_NodeDetail","initializeIcons","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.853d7e9b.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst LegendContainer = styled.div`\n  transform: scale(0.3) translate3d(-392px, 450px, 0);\n  position: absolute;\n  bottom: 12px;\n  left: 12px;\n  width: 300px;\n  border: solid 2px #808080;\n  border-radius: 3px;\n  background-color: #e8e3db;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  display: flex;\n  padding: 12px;\n\n  @media only screen and (max-width: 767px) {\n    display: none;\n  }\n\n  transition: transform 300ms ease-in-out;\n\n  &:hover {\n    transform: scale(1) translate3d(0, 0, 0);\n  }\n`\n\nconst LegendIcon = styled.i`\n  color: white;\n  font-size: 60px;\n  text-shadow: 2px 2px 4px #808080;\n  margin: 8px;\n  min-width: 60px;\n`\n\nconst OnCampus = styled(LegendIcon).attrs(props => ({ className: 'ion-md-star' }))``\nconst External = styled(LegendIcon).attrs(props => ({ className: 'ion-md-square' }))``\nconst Cloud = styled(LegendIcon).attrs(props => ({ className: 'ion-md-cloud' }))``\n\nconst NodeContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`\n\nconst Label = styled.span`\n  color: #363534;\n  font-size: 18px;\n`\n\nconst Node = props => {\n  const Icon = props.icon\n  return (\n    <NodeContainer>\n      <Icon />\n      <Label>{props.label}</Label>\n    </NodeContainer>\n  )\n}\n\nconst EdgeContainer = styled(NodeContainer)`\n  margin-top: 12px;\n  margin-bottom: 24px;\n`\n\nconst EdgeStyle = styled.div`\n  width: 45px;\n  min-width: 45px;\n  border-top: ${({ dashed }) => dashed ? 'dashed' : 'solid'} ${({ color }) => color} 4px;\n`\n\nconst EdgeStyleContainer = styled.div`\n  width: 60px;\n  min-width: 60px;\n  margin: 8px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst Edge = props => {\n  const { color, label, dashed } = props\n  return (\n    <EdgeContainer>\n      <EdgeStyleContainer>\n        <EdgeStyle color={color} dashed={dashed} />\n      </EdgeStyleContainer>\n      <Label >{label}</Label>\n    </EdgeContainer>\n  )\n}\n\nexport const Legend = props => {\n  return (\n    <LegendContainer>\n      <Node icon={OnCampus} label='On Campus System' />\n      <Node icon={External} label='External System' />\n      <Node icon={Cloud} label='Cloud System' />\n      <Edge color='#005481' dashed label='Custom Interface' />\n      <Edge color='#9e6614' label='Built-in Interface' />\n    </LegendContainer>\n  )\n}\n","const _handlers = {}\n\nexport const Subject = {\n  subscribe (event, handler) {\n    if (!_handlers[event]) _handlers[event] = []\n    _handlers[event].push(handler)\n  },\n  unsubscribe (event, handler) {\n    if (!_handlers[event]) return\n    _handlers[event] = _handlers[event].filter(func => func !== handler)\n  },\n  next (event, ...args) {\n    if (!_handlers[event]) return\n    _handlers[event].forEach(handler => {\n      if (typeof handler === 'function') {\n        handler(...args)\n      }\n    })\n  }\n}\n\nObject.freeze(Subject)\n","const _NodeManager = () => {\n  const _get = (key, defaultValue) => JSON.parse(localStorage.getItem(key)) || defaultValue\n  const _set = (key, value) => localStorage.setItem(key, JSON.stringify(value))\n  const getNodesObject = () => {\n    return _get('_nodes', {})\n  }\n\n  const getNodes = () => {\n    const nodes = _get('_nodes', {})\n    const nodeKeys = Object.keys(nodes)\n\n    return nodeKeys.reduce((acc, cur) => {\n      acc.push(nodes[cur])\n      return acc\n    }, [])\n  }\n\n  const getEdges = () => {\n    return _get('_edges', {})\n  }\n\n  const saveUploadedData = ({ edges, nodes }) => {\n    _set('_edges', edges)\n    _set('_nodes', nodes)\n  }\n\n  return {\n    getEdges,\n    getNodesObject,\n    saveUploadedData,\n    getNodes\n  }\n}\n\nexport const NodeManager = _NodeManager()\n","import get from 'lodash.get'\nimport differenceby from 'lodash.differenceby'\nimport uuid from 'uuid/v4'\n\nconst shouldFixEdges = true\n\nconst _Graph = () => {\n  const _get = (key, defaultValue) => JSON.parse(localStorage.getItem(key)) || defaultValue\n  const _set = (key, value) => localStorage.setItem(key, JSON.stringify(value))\n\n  const fixEdges = oldEdges => {\n    const edges = { ...oldEdges }\n    const edgeKeys = Object.keys(edges)\n    let didFix = false\n\n    edgeKeys.forEach(key => {\n      const nodeEdges = edges[key]\n      const currentEdgeID = key\n      nodeEdges.forEach(edge => {\n        if (edge.node === key) return\n        const otherEdges = edges[edge.node]\n        const otherEdgeIndex = otherEdges && otherEdges.findIndex(edge => edge.node === currentEdgeID)\n        if (otherEdgeIndex >= 0) {\n          otherEdges.splice(otherEdgeIndex, 1)\n          if (!didFix) didFix = true\n        }\n      })\n\n      if (edges.length <= 0) delete nodeEdges[key]\n    })\n\n    return { edges, didFix }\n  }\n\n  const updateNodePosition = async ({ node, x, y }) => {\n    const nodes = await _get('_nodes', {})\n    if (nodes[node]) {\n      nodes[node].position = {\n        x,\n        y\n      }\n    }\n    return _set('_nodes', nodes)\n  }\n\n  const updateBatchNodePositions = async (nodes) => {\n    const existingNodes = await _get('_nodes', {})\n    Object.entries(nodes).forEach(([node, { x, y }]) => {\n      if (existingNodes[node]) {\n        existingNodes[node].position = { x, y }\n      }\n    })\n    return _set('_nodes', existingNodes)\n  }\n\n  const getEdges = async () => {\n    if (shouldFixEdges) {\n      const _edges = await _get('_edges', {})\n      const { didFix, edges } = fixEdges(_edges)\n      if (didFix) {\n        await _set('_edges', edges)\n      }\n    }\n    return _get('_edges', {})\n  }\n\n  const getNodesArray = async () => {\n    const nodes = await _get('_nodes', {})\n    return Object.values(nodes)\n  }\n\n  const getNodes = async () => {\n    return _get('_nodes', {})\n  }\n\n  const setEdges = async (edges) => {\n    return _set('_edges', edges)\n  }\n\n  const setNodes = async (nodes) => {\n    return _set('_nodes', nodes)\n  }\n\n  const addNode = async (node) => {\n    if (!node.id) throw new Error('Nodes must have IDs to be added')\n    const _nodes = await getNodes()\n\n    _nodes[node.id] = node\n\n    await makeEdges(node)\n    await setNodes(_nodes)\n  }\n\n  const addEdge = async (node1, node2, data) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to add edges')\n\n    const _edges = await getEdges()\n\n    if (!Array.isArray(_edges[node1.id])) _edges[node1.id] = []\n\n    await addDirectedEdge(node1, node2, data)\n  }\n\n  const addDirectedEdge = async (node1, node2, data) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to add directed edges')\n\n    const _edges = await getEdges()\n\n    if (!Array.isArray(_edges[node1.id])) _edges[node1.id] = []\n\n    const node2TargetID = _edges[node1.id].findIndex(({ node }) => node === node2.id)\n\n    if (node2TargetID >= 0) {\n      // Replace edge because it exists already\n      _edges[node1.id][node2TargetID] = { node: node2.id, data }\n    } else {\n      // Add edge, it does not exist\n      _edges[node1.id].push({ node: node2.id, data })\n    }\n\n    await setEdges({ ..._edges })\n  }\n\n  const removeDirectedEdge = async (node1, node2) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to remove directed eges')\n\n    const _edges = await getEdges()\n\n    _edges[node1.id] = _edges[node1.id] && _edges[node1.id].filter(({ node }) => node !== node2.id)\n\n    await setEdges(_edges)\n  }\n\n  const removeEdge = async (node1, node2) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to remove edges')\n\n    const _edges = await getEdges()\n\n    _edges[node1.id] = _edges[node1.id] && _edges[node1.id].filter(({ node }) => node !== node2.id)\n\n    await setEdges(_edges)\n  }\n\n  const makeNode = async ({ id, data, connections }) => {\n    let node = null\n    if (id) {\n      const nodes = await getNodes()\n      node = {\n        id,\n        edges: [],\n        previousEdges: nodes[id].edges.map(item => ({ ...item })),\n        data: {\n          ...nodes[id].data,\n          ...data\n        }\n      }\n    } else {\n      node = {\n        id: uuid(),\n        edges: [],\n        data: {\n          ...(data || {})\n        }\n      }\n    }\n\n    const connectionKeys = Object.keys(connections || {})\n    const previousEdges = get(node, 'previousEdges', [])\n\n    if (connectionKeys.length <= 0 && previousEdges.length > 0) {\n      const edges = await getEdges()\n      delete edges[node.id]\n      const removeEdges = []\n      Object.keys(edges).forEach(key => {\n        edges[key].forEach((edge, index) => {\n          if (edge.node === node.id) {\n            removeEdges.push({ key, index })\n          }\n        })\n      })\n      removeEdges.forEach(remove => {\n        edges[remove.key].splice(remove.index, 1)\n      })\n      await setEdges({ ...edges })\n      return node\n    }\n\n    connectionKeys.forEach(key => {\n      const info = get(connections, `${[key]}.connectedTo`, null)\n      if (!info) throw new Error('You cannot make a connection without a target')\n      const type = get(connections, `${[key]}.connectionType`, null)\n      if (!type) throw new Error('You cannot make a connection without a type')\n\n      const read = get(connections, `${[key]}.read`, null)\n      const write = get(connections, `${[key]}.write`, null)\n\n      if (!read && !write) throw new Error('You must specify a read or a write option')\n\n      const data = get(connections, `[${key}].data`, {})\n\n      const existingEdgeIndex = node.edges.findIndex(edge => edge.id === key)\n\n      if (existingEdgeIndex >= 0) {\n        node.edges[existingEdgeIndex] = {\n          id: info.key,\n          data: {\n            ...data,\n            read,\n            write,\n            type: {\n              id: type.key,\n              label: type.text\n            }\n          }\n        }\n      } else {\n        node.edges.push({\n          id: info.key,\n          data: {\n            ...data,\n            read,\n            write,\n            type: {\n              id: type.key,\n              label: type.text\n            }\n          }\n        })\n      }\n    })\n    return node\n  }\n\n  const makeEdges = async (node) => {\n    const edges = get(node, 'edges', [])\n    const previousEdges = get(node, 'previousEdges', [])\n\n    if (edges.length <= 0) return\n\n    for (let i = 0; i < edges.length; i++) {\n      const edge = edges[i]\n\n      const read = get(edge, 'data.read')\n      const write = get(edge, 'data.write')\n\n      const node1 = {\n        id: get(node, 'id')\n      }\n      const node2 = {\n        id: get(edge, 'id')\n      }\n\n      const prevEdge = previousEdges.find(({ id }) => id === edge.id)\n\n      const prev = {\n        read: get(prevEdge, `data.read`, read),\n        write: get(prevEdge, `data.write`, write)\n      }\n\n      if (prev.read && !read) {\n        await removeDirectedEdge(node2, node1)\n      }\n\n      if (prev.write && !write) {\n        await removeDirectedEdge(node1, node2)\n      }\n\n      if (read && write) {\n        await addEdge(node1, node2, get(edge, 'data'))\n      } else if (read) {\n        await addDirectedEdge(node2, node1, get(edge, 'data'))\n      } else if (write) {\n        await addDirectedEdge(node1, node2, get(edge, 'data'))\n      }\n    }\n\n    const cleanup = differenceby(previousEdges, node.edges, 'id')\n\n    if (cleanup.length >= 0) {\n      for (let i = 0; i < cleanup.length; i++) {\n        const edge = cleanup[i]\n\n        const read = get(edge, 'data.read')\n        const write = get(edge, 'data.write')\n\n        const node1 = {\n          id: get(node, 'id')\n        }\n        const node2 = {\n          id: get(edge, 'id')\n        }\n\n        if (read && write) {\n          await removeEdge(node1, node2)\n        } else if (read) {\n          await removeDirectedEdge(node2, node1)\n        } else if (write) {\n          await removeDirectedEdge(node1, node2)\n        }\n      }\n    }\n  }\n\n  return {\n    getNodes,\n    getEdges,\n    addNode,\n    removeEdge,\n    removeDirectedEdge,\n    updateNodePosition,\n    updateBatchNodePositions,\n    getNodesArray,\n    makeNode\n  }\n}\n\nexport const Graph = _Graph()\n","import { Network as VisNetwork, DataSet } from 'vis-network'\nimport { Graph } from './Graph'\n\nconst _Network = () => {\n  let _nodes = []\n  let _edges = []\n  let _options = {}\n  let _container = null\n  let _network = null\n\n  const inContainer = element => {\n    _container = element\n    return builder\n  }\n\n  const withNodes = nodes => {\n    _nodes = nodes\n    return builder\n  }\n\n  const withEdges = edges => {\n    _edges = edges\n    return builder\n  }\n\n  const withOptions = options => {\n    _options = options\n    return builder\n  }\n\n  const makeData = () => {\n    return {\n      nodes: new DataSet(_nodes),\n      edges: new DataSet(_edges)\n    }\n  }\n\n  const build = () => {\n    if (!_network) {\n      _network = new VisNetwork(_container, makeData(), _options)\n      _network.once('afterDrawing', function () {\n        _network.fit({\n          animation: {\n            duration: 600,\n            easingFunction: 'easeInOutQuad'\n          }\n        })\n      })\n    }\n    return {\n      network: _network,\n      setData: ({ nodes, edges }) => {\n        _nodes = nodes\n        _edges = edges\n        _network.setData(makeData())\n      },\n      updateNodePosition: Graph.updateNodePosition,\n      getNodes: () => _nodes,\n      getEdges: () => _edges\n    }\n  }\n\n  const builder = {\n    withEdges,\n    withNodes,\n    withOptions,\n    inContainer,\n    build\n  }\n\n  return builder\n}\n\nexport const Network = _Network()\n","import { useEffect } from 'react'\nimport { Subject } from '../util/Subject'\n\nexport const useEvent = (event, handler) => {\n  useEffect(() => {\n    if (typeof handler !== 'function') return\n    Subject.subscribe(event, handler)\n    return () => Subject.unsubscribe(event, handler)\n  }, [event, handler])\n\n  return value => Subject.next(event, value)\n}\n","import { useRef, useEffect } from 'react'\n\nexport const useEventListener = (eventName, handler, element = window) => {\n  // Create a ref that stores handler\n  const savedHandler = useRef()\n\n  // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n  useEffect(() => {\n    savedHandler.current = handler\n  }, [handler])\n\n  useEffect(\n    () => {\n      // Make sure element supports addEventListener\n      // On\n      const isSupported = element && element.addEventListener\n      if (!isSupported) return\n\n      // Create event listener that calls handler function stored in ref\n      const eventListener = event => savedHandler.current(event)\n\n      // Add event listener\n      element.addEventListener(eventName, eventListener)\n\n      // Remove event listener on cleanup\n      return () => {\n        element.removeEventListener(eventName, eventListener)\n      }\n    },\n    [eventName, element] // Re-run if eventName or element changes\n  )\n}\n","import React, { useReducer, useEffect, useCallback, useState, useRef } from 'react'\nimport { Legend } from '../Legend'\nimport { Network, Graph, Subject } from '../../util'\nimport { useEvent, useEventListener } from '../../hooks'\nimport get from 'lodash.get'\n\nconst systemsReducer = (state, action) => {\n  switch (action.type) {\n    case 'update':\n      const nodes = action.nodes\n      const edges = action.edges\n      return buildGraphData(nodes, edges)\n    default:\n      return state\n  }\n}\n\nconst getLinkColor = (type) => {\n  switch (type) {\n    case 'custom':\n      return '#005481'\n    case 'builtin':\n      return '#9e6614'\n    default:\n      return '#A0A0A0'\n  }\n}\n\nconst getShape = (type) => {\n  switch (type) {\n    case 'cloud':\n      // Cloud shape\n      return { shape: 'icon', shapeProperties: { size: 25 }, icon: { face: 'Ionicons', code: '\\uf2c9', color: '#FFF' } }\n    case 'external':\n      return { shape: 'icon', shapeProperties: { size: 25 }, icon: { face: 'Ionicons', code: '\\uf381', color: '#FFF' } }\n    case 'oncampus':\n    default:\n      // Square Shape\n      return { shape: 'icon', shapeProperties: { size: 25 }, icon: { face: 'Ionicons', code: '\\uf384', color: '#FFF' } }\n  }\n}\n\nconst getArrowDirection = (edge) => {\n  const read = get(edge, 'data.read')\n  const write = get(edge, 'data.write')\n\n  if (read && write) return 'from, to'\n  return 'to'\n}\n\nconst buildGraphData = (nodes, edges) => {\n  const graphData = {\n    nodes: [],\n    edges: []\n  }\n\n  const nodeKeys = Object.keys(nodes || {})\n  nodeKeys.forEach(key => {\n    const node = nodes[key]\n\n    graphData.nodes.push({\n      id: node.id,\n      type: node.data.type,\n      ...getShape(node.data.type),\n      label: node.data.name,\n      edges: node.edges,\n      font: {\n        color: '#363534',\n        strokeWidth: 2,\n        strokeColor: '#FFFFFF'\n      },\n      shadow: {\n        enabled: true,\n        size: 4,\n        x: 1,\n        y: 1\n      },\n      data: {\n        ...node.data\n      },\n      color: '#FFFFFF',\n      x: get(node, 'position.x'),\n      y: get(node, 'position.y')\n    })\n  })\n\n  const edgeKeys = Object.keys(edges || {})\n  edgeKeys.forEach(nodeId => {\n    const edgeList = edges[nodeId]\n\n    edgeList.forEach(edge => {\n      graphData.edges.push({\n        from: nodeId,\n        to: edge.node,\n        smooth: {\n          enabled: true,\n          type: 'cubizBezier',\n          roundness: 0.15\n        },\n        color: {\n          color: getLinkColor(get(edge, 'data.type.id')),\n          hover: '#501214',\n          highlight: '#501214'\n        },\n        dashes: get(edge, 'data.type.id') === 'custom',\n        type: get(edge, 'data.type', {}),\n        arrows: getArrowDirection(edge, nodeId)\n      })\n    })\n  })\n\n  return graphData\n}\n\nexport const SystemsGraph = () => {\n  const [systems, systemsDispatch] = useReducer(systemsReducer, { nodes: [], edges: [] })\n  const [activeNode, setActiveNode] = useState()\n  const [lastAdded, setLastAdded] = useState()\n  const selectedNodes = useRef([])\n  const holdingShift = useRef(false)\n\n  const graphContainer = useRef()\n  const graph = useRef()\n\n  const updateGraph = async () => {\n    const nodes = await Graph.getNodes()\n    const edges = await Graph.getEdges()\n    systemsDispatch({ type: 'update', nodes, edges })\n  }\n\n  const updateSearchResults = (results) => {\n    if (graph.current.network) {\n      if (results.length <= 0) {\n        const selected = graph.current.network.getSelectedNodes()\n        graph.current.network.unselectAll()\n\n        // Were there nodes selected? Zoom back out.\n        if (selected.length > 0) {\n          graph.current.network.fit({\n            animation: {\n              duration: 300,\n              easingFunction: 'easeInOutQuad'\n            }\n          })\n        }\n        return\n      }\n      graph.current.network.selectNodes(results)\n      graph.current.network.fit({\n        nodes: results,\n        animation: {\n          duration: 300,\n          easingFunction: 'easeInOutQuad'\n        }\n      })\n    }\n  }\n\n  useEffect(() => {\n    updateGraph()\n  }, [])\n\n  const resetActiveNode = () => setActiveNode(null)\n  const displayNodeDetails = useEvent('display-node-details')\n  useEvent('node-search-result', updateSearchResults)\n\n  const handleNodeSelect = useCallback(params => {\n    const node = get(params, `nodes[0]`, null)\n    if (params.nodes.length > 1 || holdingShift) return\n\n    if (node) {\n      if (!graph.current.network.isCluster(node) && !holdingShift.current) {\n        const matchingNode = systems.nodes.find(({ id }) => id === node)\n        if (matchingNode) {\n          setActiveNode(matchingNode)\n        }\n      }\n    }\n  }, [systems.nodes])\n\n  const handleNodeClick = useCallback(params => {\n    const node = graph.current.network.getNodeAt(params.pointer.DOM)\n    if (node) {\n      if (!graph.current.network.isCluster(node) && !holdingShift.current) {\n        const matchingNode = systems.nodes.find(({ id }) => id === node)\n        if (matchingNode) {\n          setActiveNode(matchingNode)\n        }\n      }\n\n      if (holdingShift.current && params.nodes[0]) {\n        const selected = [...selectedNodes.current, params.nodes[0]]\n        selectedNodes.current = selected\n        graph.current.network.selectNodes(selected)\n      }\n    } else {\n      selectedNodes.current = []\n    }\n  }, [systems.nodes])\n\n  const handleNodeDrag = useCallback(event => {\n    if (event.nodes.length > 0) {\n      const positions = graph.current.network.getPositions(event.nodes)\n      Graph.updateBatchNodePositions(positions)\n    }\n  }, [])\n\n  const handleKeyDown = useCallback(event => {\n    if (event.ctrlKey && event.keyCode === 70) {\n      event.preventDefault()\n      Subject.next('focus-search-bar')\n    }\n    if (event.shiftKey && !holdingShift.current) {\n      holdingShift.current = true\n    }\n  }, [holdingShift])\n\n  const handleKeyUp = useCallback(event => {\n    if (!event.shiftKey && holdingShift.current) {\n      holdingShift.current = false\n    }\n  }, [holdingShift])\n\n  useEventListener('keydown', handleKeyDown)\n  useEventListener('keyup', handleKeyUp)\n\n  useEffect(() => {\n    if (activeNode) displayNodeDetails(activeNode)\n  }, [activeNode, displayNodeDetails])\n\n  const updateLastAdded = (node) => {\n    setLastAdded(node)\n  }\n\n  useEvent('save-node-entry', updateGraph)\n  useEvent('deselect-active-node', resetActiveNode)\n  useEvent('node-added', updateLastAdded)\n\n  useEffect(() => {\n    const options = {\n      autoResize: false,\n      interaction: {\n        hover: true,\n        hoverConnectedEdges: true\n      },\n      physics: {\n        enabled: false\n      }\n    }\n\n    if (!graph.current) {\n      const start = new Date()\n      const systemGraph = Network\n        .inContainer(graphContainer.current)\n        .withEdges(systems.edges)\n        .withNodes(systems.nodes)\n        .withOptions(options)\n        .build()\n\n      console.log(`Network Build Time: ${new Date() - start}ms`)\n      graph.current = systemGraph\n\n      graph.current.network.on('selectNode', handleNodeSelect)\n      graph.current.network.on('dragEnd', handleNodeDrag)\n      graph.current.network.on('click', handleNodeClick)\n\n      document.addEventListener('contextmenu', e => e.preventDefault(), false)\n    } else {\n      graph.current.network.off('selectNode')\n      graph.current.network.off('dragEnd')\n      graph.current.network.off('click')\n\n      graph.current.network.on('selectNode', handleNodeSelect)\n      graph.current.network.on('click', handleNodeClick)\n      graph.current.network.on('dragEnd', handleNodeDrag)\n\n      console.log('redrawing')\n      graph.current.setData(systems)\n      if (lastAdded) {\n        graph.current.network.focus(lastAdded, {\n          scale: 3,\n          animation: {\n            duration: 300,\n            easingFunction: 'easeInOutCubic'\n          }\n        })\n      }\n    }\n  }, [systems, handleNodeClick, handleNodeDrag, lastAdded, handleNodeSelect])\n\n  return (\n    <>\n      <div style={{ overflow: 'hidden', height: 'calc(100% - 44px)' }} ref={graphContainer} id='graph' />\n      <Legend />\n    </>\n  )\n}\n","import dayjs from 'dayjs'\nimport get from 'lodash.get'\nimport { NodeManager } from './NodeManager'\nimport { Subject } from './Subject'\n\nexport const downloadFile = (filename, data) => {\n  const element = document.createElement('a')\n  element.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(data)}`)\n  element.setAttribute('download', `${filename} - ${dayjs().format('YYYY-MM-DD/THHmmss')}.json`)\n\n  element.style.display = 'none'\n  document.body.appendChild(element)\n  element.click()\n  document.body.removeChild(element)\n}\n\nconst handleFile = (event) => {\n  const reader = new FileReader()\n  reader.readAsBinaryString(event.target.files[0])\n\n  reader.onloadend = async () => {\n    const data = JSON.parse(reader.result)\n    const edges = get(data, 'edges', {})\n    const nodes = get(data, 'nodes', {})\n\n    NodeManager.saveUploadedData({ edges, nodes })\n    Subject.next('save-node-entry')\n  }\n}\n\nexport const uploadFile = () => {\n  const element = document.createElement('input')\n  element.setAttribute('type', 'file')\n  element.setAttribute('accept', '.json')\n\n  element.style.display = 'none'\n  element.addEventListener('change', handleFile)\n  element.click()\n}\n","import React, { useEffect } from 'react'\nimport { useEvent } from '../../hooks'\nimport { CommandBar as OfficeCommandBar } from 'office-ui-fabric-react/lib/CommandBar'\nimport { SearchBox } from 'office-ui-fabric-react/lib/SearchBox'\nimport { downloadFile, uploadFile } from '../../util/FileManager'\nimport { Graph, Subject } from '../../util'\nimport debounce from 'lodash.debounce'\nimport get from 'lodash.get'\n\nconst handleSearch = async (event, value) => {\n  const nodes = await Graph.getNodesArray()\n\n  let results = nodes.filter(node => {\n    const name = get(node, 'data.name', '').toLowerCase()\n    return name.includes(value.toLowerCase())\n  }).map(({ id }) => id)\n\n  if (!value) {\n    results = []\n  }\n\n  Subject.next('node-search-result', results)\n}\n\nconst SearchNodes = () => {\n  return (\n    <SearchBox\n      id='search-box-nodes'\n      placeholder='Search'\n      className='searchBox'\n      styles={{\n        root: {\n          width: '250px',\n          alignSelf: 'center'\n        }\n      }}\n      onChange={debounce(handleSearch, 500)}\n    />\n  )\n}\n\nexport const CommandBar = props => {\n  const toggleLeftPanel = useEvent('toggle-left-panel')\n  useEffect(() => {\n    const focusSearch = () => {\n      const searchBox = document.querySelector('#search-box-nodes')\n      searchBox.focus()\n    }\n\n    Subject.subscribe('focus-search-bar', focusSearch)\n  }, [])\n\n  const farItems = [\n    {\n      key: 'search',\n      onRender: SearchNodes\n    }\n  ]\n\n  const nearItems = [\n    {\n      key: 'addNode',\n      name: 'Add System',\n      iconProps: {\n        iconName: 'Add'\n      },\n      onClick: toggleLeftPanel\n    },\n    {\n      key: 'upload',\n      name: 'Upload',\n      iconProps: {\n        iconName: 'Upload'\n      },\n      onClick: () => {\n        uploadFile()\n      }\n    },\n    {\n      key: 'download',\n      name: 'Download',\n      iconProps: {\n        iconName: 'Download'\n      },\n      onClick: async () => {\n        const edges = await Graph.getEdges()\n        const nodes = await Graph.getNodes()\n\n        const filename = 'TR_Systems'\n        downloadFile(filename, JSON.stringify({ edges, nodes }, null, 2))\n      }\n    }\n  ]\n\n  return (\n    <div>\n      <OfficeCommandBar\n        items={nearItems}\n        farItems={farItems}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox'\n\nconst canChange = (nextPath, nextValue) => (currentRead, currentWrite) => {\n  if (nextPath === 'read') {\n    return nextValue || currentWrite || false\n  }\n\n  if (nextPath === 'write') {\n    return nextValue || currentRead || false\n  }\n  return false\n}\n\nexport const ConnectionReadWrite = props => {\n  const { read, write, onChange } = props\n\n  return (\n    <Stack style={{ marginRight: 8, marginTop: 8 }} verticalAlign='space-between' tokens={{ childrenGap: 4 }}>\n      <Checkbox checked={read} onChange={(event, value) => {\n        if (canChange('read', value)(read, write)) {\n          onChange('read', value)\n        }\n      }} label='Read' />\n      <Checkbox checked={write} onChange={(event, value) => {\n        if (canChange('write', value)(read, write)) {\n          onChange('write', value)\n        }\n      }} label='Write' />\n    </Stack>\n  )\n}\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown'\nimport { ConnectionReadWrite } from './ConnectionReadWrite'\nimport get from 'lodash.get'\nimport { IconButton } from 'office-ui-fabric-react'\n\nconst ConnectionContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  justify-content: flex-start;\n  padding: 8px;\n  margin-top: 12px;\n  border: 1px solid rgb(138, 136, 134);\n  box-sizing: border-box;\n  border-radius: 1px;\n\n  & > .ms-Dropdown-container {\n    flex: 1;\n    width: 100%;\n    margin-right: 4px;\n  }\n\n  & > .ms-Button--icon {\n    align-self: flex-end;\n  }\n`\n\nexport const Connection = props => {\n  const { handleRemove, id, edit, addNodeForm, nodeFormErrors, setNodeFormErrors, existingSystems, updateNodeForm } = props\n  const selectedTarget = get(addNodeForm, `connections[${id}].connectedTo.key`, null)\n  const selectedType = get(addNodeForm, `connections[${id}].connectionType.key`, null)\n\n  const selectedRead = get(addNodeForm, `connections[${id}].read`, true)\n  const selectedWrite = get(addNodeForm, `connections[${id}].write`, false)\n\n  const targetError = get(nodeFormErrors, `[${id}].target`)\n  const typeError = get(nodeFormErrors, `[${id}].type`)\n\n  useEffect(() => {\n    if (!edit) {\n      updateNodeForm({\n        path: `connections[${id}].read`,\n        value: true\n      })\n    }\n  }, [updateNodeForm, id, edit])\n\n  return (\n    <ConnectionContainer>\n      <IconButton\n        iconProps={{ iconName: 'ChromeClose' }}\n        onClick={() => {\n          const connection = get(addNodeForm, `connections[${id}]`, null)\n          if (connection) {\n            updateNodeForm({\n              path: `connections[${id}]`,\n              type: 'remove'\n            })\n          }\n          handleRemove()\n        }}\n      />\n      <Dropdown\n        label='Connected To'\n        placeholder={`What does this system connect to?`}\n        options={existingSystems}\n        errorMessage={targetError}\n        selectedKey={selectedTarget}\n        onChange={(event, value) => {\n          updateNodeForm({\n            path: `connections[${id}].connectedTo`,\n            value: { key: value.key, text: value.text }\n          })\n          if (`${id}` in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors[id]\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <Dropdown\n        label='Interface'\n        options={[\n          { key: 'builtin', text: 'Built In' },\n          { key: 'custom', text: 'Custom' }\n        ]}\n        placeholder='How does this system connect?'\n        selectedKey={selectedType}\n        errorMessage={typeError}\n        onChange={(event, value) => {\n          updateNodeForm({\n            path: `connections[${id}].connectionType`,\n            value: { key: value.key, text: value.text, color: value.color }\n          })\n          if (`${id}` in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors[id]\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <ConnectionReadWrite\n        read={selectedRead}\n        write={selectedWrite}\n        onChange={(path, value) => {\n          updateNodeForm({\n            path: `connections[${id}].${path}`,\n            value\n          })\n        }}\n      />\n    </ConnectionContainer>\n  )\n}\n","import React from 'react'\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown'\n\nconst areEqual = (prevProps, nextProps) => {\n  const keysUnchanged = prevProps.selectedKey === nextProps.selectedKey\n  const errorUnchanged = prevProps.errorMessage === nextProps.errorMessage\n  return keysUnchanged && errorUnchanged\n}\n\nexport const SystemType = React.memo(props => {\n  const { selectedKey, onChange, required, errorMessage } = props\n\n  return (\n    <Dropdown\n      required={required}\n      label='System Type'\n      options={[\n        { key: 'oncampus', text: 'On Campus' },\n        { key: 'cloud', text: 'Cloud' },\n        { key: 'external', text: 'External' }\n      ]}\n      errorMessage={errorMessage}\n      placeholder='Where does this system live?'\n      selectedKey={selectedKey}\n      onChange={onChange}\n    />\n  )\n}, areEqual)\n","import React from 'react'\nimport { TextField } from 'office-ui-fabric-react/lib/TextField'\nimport { ActionButton } from 'office-ui-fabric-react'\nimport { SystemType } from './SystemType'\n\nconst renderConnections = ({ connections, existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors }) => {\n  return connections.map(conn => React.cloneElement(conn, { existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors }))\n}\n\nconst checkURL = url => {\n  if (!url) return\n  try {\n    const checkedURL = new URL(url)\n    if (checkedURL) return ''\n  } catch (err) {\n    return err.message\n  }\n}\n\nexport const SystemFormView = props => {\n  const {\n    nodeFormErrors,\n    existingSystems,\n    setNodeFormErrors,\n    addNodeForm,\n    updateNodeForm,\n    connections,\n    addConnection,\n    edit\n  } = props\n  return (\n    <>\n      <TextField\n        label='Name'\n        placeholder='Choose a name'\n        errorMessage={nodeFormErrors.name}\n        required\n        onGetErrorMessage={(value => {\n          const newSystem = String(value).toLowerCase()\n          const nameExists = existingSystems.some(({ text }) => String(text).toLowerCase() === newSystem)\n          if (nameExists && !edit) {\n            setNodeFormErrors({\n              ...nodeFormErrors,\n              name: `The ${value} system already exists`\n            })\n          } else {\n            if (nodeFormErrors.name) {\n              const errors = {\n                ...nodeFormErrors\n              }\n              delete errors.name\n              setNodeFormErrors(errors)\n            }\n          }\n        })}\n        onChange={(event, value) => updateNodeForm({ path: 'name', value })}\n        value={addNodeForm.name || ''}\n      />\n      <SystemType\n        required\n        errorMessage={nodeFormErrors.type}\n        selectedKey={addNodeForm.type || null}\n        onChange={(event, value) => {\n          updateNodeForm({ path: 'type', value: value.key })\n          if ('type' in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors.type\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <TextField\n        label='Department'\n        placeholder='Was this built for another department?'\n        onChange={(event, value) => updateNodeForm({ path: 'department', value })}\n        value={addNodeForm.department || ''}\n      />\n      <TextField\n        label='URL'\n        placeholder='Is there a url to access this system?'\n        errorMessage={nodeFormErrors.url}\n        onChange={(event, value) => {\n          updateNodeForm({ path: 'url', value })\n          if ('url' in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors.url\n            setNodeFormErrors(errors)\n          }\n        }}\n        onGetErrorMessage={value => {\n          if (!value) return\n          return checkURL(value)\n        }}\n        value={addNodeForm.url || ''}\n      />\n      <TextField\n        label='Description'\n        placeholder='Enter some information others may want to know about this system'\n        multiline\n        rows={4}\n        onChange={(event, value) => updateNodeForm({ path: 'description', value })}\n        value={addNodeForm.description || ''}\n      />\n      {renderConnections({ connections, existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors })}\n      <ActionButton\n        onClick={addConnection}\n        iconProps={{ iconName: 'Add' }}\n      >\n        Add Connection\n      </ActionButton>\n    </>\n  )\n}\n","import React, { useState, useReducer } from 'react'\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel'\nimport { NodeManager, Graph } from '../../util'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { PrimaryButton, DefaultButton } from 'office-ui-fabric-react'\nimport { useEvent } from '../../hooks'\nimport get from 'lodash.get'\nimport uuid from 'uuid/v4'\nimport set from 'lodash.set'\nimport unset from 'lodash.unset'\nimport { Connection } from './Connection'\nimport { Network } from '../../util/Network'\nimport { SystemFormView } from './SystemFormView'\n\nconst makeConnections = (system, nodes) => {\n  const connections = {}\n  system.edges.forEach(edge => {\n    connections[edge.id] = {\n      read: edge.data.read,\n      write: edge.data.write,\n      connectionType: {\n        key: edge.data.type.id,\n        text: edge.data.type.label\n      },\n      connectedTo: {\n        key: edge.id,\n        text: get(nodes.filter(node => node.id === edge.id), '[0].data.name', '')\n      }\n    }\n  })\n  return connections\n}\n\nconst checkURL = url => {\n  if (!url) return\n  try {\n    const checkedURL = new URL(url)\n    if (checkedURL) return null\n  } catch (err) {\n    return err.message\n  }\n}\n\nconst makeFormState = system => {\n  const { network, getNodes } = Network.build()\n  const nodes = network.getConnectedNodes(system.id)\n\n  const connectedNodes = getNodes().filter(({ id }) => nodes.includes(id))\n\n  const formState = {\n    name: get(system, 'data.name'),\n    id: get(system, 'id'),\n    type: get(system, 'data.type'),\n    department: get(system, 'data.department'),\n    url: get(system, 'data.url'),\n    description: get(system, 'data.description'),\n    connections: makeConnections(system, connectedNodes)\n  }\n  return formState\n}\n\nconst addNodeReducer = (state, action) => {\n  if (action.path === '') return {}\n  const addNodeState = { ...state }\n  switch (action.type) {\n    case 'remove':\n      unset(addNodeState, action.path)\n      return addNodeState\n    case 'edit':\n      return { ...action.formState }\n    default:\n      set(addNodeState, action.path, action.value)\n      return addNodeState\n  }\n}\n\nconst connectionReducer = (connections, action) => {\n  switch (action.type) {\n    case 'add':\n      const id = uuid()\n      return [\n        ...connections,\n        <Connection\n          key={id}\n          id={id}\n          handleRemove={() => action.dispatch({ type: 'remove', id })}\n        />\n      ]\n    case 'remove':\n      return connections.filter(({ key }) => key !== action.id)\n    case 'reset':\n      return []\n    case 'edit':\n      const connKeys = Object.keys(action.connections)\n      return connKeys.map(key => {\n        const id = key\n        const dispatch = get(action, 'dispatch', null)\n\n        if (!dispatch || !id) return null\n\n        return (\n          <Connection\n            edit\n            key={id}\n            id={id}\n            handleRemove={() => dispatch({ type: 'remove', id })}\n          />\n        )\n      }).filter(item => item)\n    default:\n      return connections\n  }\n}\n\nconst getSystems = () => {\n  const nodes = NodeManager.getNodes()\n  return nodes.map(node => ({ key: node.id, text: node.data.name })).sort((a, b) => {\n    if (a.text < b.text) return -1\n    if (a.text > b.text) return 1\n    return 0\n  })\n}\n\nconst validate = (addNodeForm, nodeFormErrors) => {\n  let errors = {}\n  if (nodeFormErrors) {\n    errors = {\n      ...nodeFormErrors\n    }\n  }\n\n  if (!addNodeForm.type) {\n    errors.type = 'A system type must be selected'\n  }\n\n  if (!addNodeForm.name) {\n    errors.name = 'A system name is required'\n  }\n\n  if (addNodeForm.url) {\n    const error = checkURL(addNodeForm.url)\n    console.log(errors)\n    if (error) errors.url = error\n  }\n\n  if (addNodeForm.connections) {\n    const keys = Object.keys(addNodeForm.connections || {})\n    keys.forEach(key => {\n      const target = get(addNodeForm, `connections[${key}].connectedTo.key`, null)\n      const type = get(addNodeForm, `connections[${key}].connectionType.key`, null)\n\n      if (!type) set(errors, `[${key}].type`, 'The connection must have a type selected')\n      if (!target) set(errors, `[${key}].target`, 'You must select another system to connect to')\n    })\n  }\n\n  return errors\n}\n\nexport const SystemForm = (props) => {\n  const [edit, setEdit] = useState(false)\n  const [isOpen, setIsOpen] = useState(false)\n  const [addNodeForm, updateNodeForm] = useReducer(addNodeReducer, {})\n  const [existingSystems, setExistingSystems] = useState(getSystems())\n  const [nodeFormErrors, setNodeFormErrors] = useState({})\n  const [connections, connDispatch] = useReducer(connectionReducer, [])\n\n  const toggle = () => setIsOpen(!isOpen)\n  const resetForm = () => updateNodeForm({ path: '', value: {} })\n  const resetConnections = () => connDispatch({ type: 'reset' })\n\n  const handleEditSystem = (system) => {\n    const formState = makeFormState(system)\n    connDispatch({\n      type: 'edit',\n      connections: formState.connections || {},\n      dispatch: connDispatch\n    })\n    updateNodeForm({ type: 'edit', formState })\n    setEdit(true)\n    setIsOpen(true)\n  }\n\n  useEvent('edit-system-panel', handleEditSystem)\n\n  const addConnection = () => {\n    connDispatch({\n      type: 'add',\n      dispatch: connDispatch,\n      existingSystems,\n      addNodeForm,\n      updateNodeForm\n    })\n  }\n\n  const submitSystem = async () => {\n    const errors = validate(addNodeForm, nodeFormErrors)\n    if (Object.keys(errors).length > 0) {\n      setNodeFormErrors({\n        ...nodeFormErrors,\n        ...errors\n      })\n      return\n    }\n\n    const connections = get(addNodeForm, 'connections', {})\n    const data = {\n      description: get(addNodeForm, 'description', ''),\n      name: get(addNodeForm, 'name', ''),\n      type: get(addNodeForm, 'type', ''),\n      url: get(addNodeForm, 'url', ''),\n      department: get(addNodeForm, 'department', '')\n    }\n\n    let id = null\n    if (edit) {\n      const node = await Graph.makeNode({ id: addNodeForm.id, connections, data })\n      id = addNodeForm.id\n      await Graph.addNode(node)\n    } else {\n      const node = await Graph.makeNode({ connections, data })\n      id = node.id\n      await Graph.addNode(node)\n    }\n\n    broadcastNodeSave()\n    nodeAdded(id)\n    resetConnections()\n    resetForm()\n    if (edit) {\n      dismiss()\n    }\n  }\n\n  useEvent('toggle-left-panel', toggle)\n  const dismiss = () => {\n    resetForm()\n    resetConnections()\n    setIsOpen(false)\n    setEdit(false)\n  }\n\n  const updateExistingSystems = () => {\n    const systems = getSystems()\n    setExistingSystems(systems)\n  }\n\n  const broadcastNodeSave = useEvent('save-node-entry', updateExistingSystems)\n  const nodeAdded = useEvent('node-added')\n\n  return (\n    <Panel\n      headerText={`${edit ? 'Edit' : 'Add'} System`}\n      isOpen={isOpen}\n      onDismiss={dismiss}\n      isFooterAtBottom\n      onRenderFooterContent={() => (\n        <Stack horizontal horizontalAlign='space-between' tokens={{ childrenGap: 12 }}>\n          <DefaultButton text='Cancel' onClick={dismiss} />\n          <PrimaryButton text='Save System' onClick={submitSystem} />\n        </Stack>\n      )}\n      type={PanelType.medium}\n    >\n      <SystemFormView\n        edit={edit}\n        existingSystems={existingSystems}\n        nodeFormErrors={nodeFormErrors}\n        setNodeFormErrors={setNodeFormErrors}\n        addNodeForm={addNodeForm}\n        updateNodeForm={updateNodeForm}\n        connections={connections}\n        addConnection={addConnection}\n      />\n    </Panel>\n  )\n}\n","import React from 'react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Text } from 'office-ui-fabric-react/lib/Text'\n\nconst NodeDetailView = props => {\n  const { description, department, url } = props\n  return (\n    <Stack tokens={{ childrenGap: 8 }}>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>URL</Text>\n        <a href={url} target='_blank' rel='noopener noreferrer'>{url}</a>\n      </Stack>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Department</Text>\n        <Text>{department}</Text>\n      </Stack>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Description</Text>\n        <Text>{description}</Text>\n      </Stack>\n    </Stack>\n  )\n}\n\nexport default NodeDetailView\n","import React, { useState } from 'react'\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel'\nimport { IconButton } from 'office-ui-fabric-react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Text } from 'office-ui-fabric-react/lib/Text'\nimport styled from 'styled-components'\nimport get from 'lodash.get'\nimport { useEvent } from '../../hooks'\nimport NodeDetailView from './NodeDetailView'\n\nconst CustomPanel = styled(Panel)`\n  & > .ms-Panel-main {\n    transition: width 300ms ease-in-out;\n  }\n`\n\nexport const NodeDetail = props => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [node, setNode] = useState(null)\n  const displayNode = (node) => {\n    setNode(node)\n    setIsOpen(true)\n  }\n  const closePanel = () => setIsOpen(false)\n\n  useEvent('display-node-details', displayNode)\n  const editSystem = useEvent('edit-system-panel')\n  const deselectActiveNode = useEvent('deselect-active-node')\n  const name = get(node, 'data.name', 'Very Unnamed System')\n  const description = get(node, 'data.description', 'No description has been entered.')\n  const department = get(node, 'data.department', 'No department has been entered.')\n  const url = get(node, 'data.url', `${name} has no url`)\n\n  const handleEdit = () => {\n    editSystem(node)\n    setIsOpen(false)\n    deselectActiveNode()\n  }\n\n  return (\n    <CustomPanel\n      isOpen={isOpen}\n      onDismiss={() => {\n        deselectActiveNode()\n        closePanel()\n      }}\n      onRenderHeader={(props) => {\n        return (\n          <Stack horizontal tokens={{ childrenGap: 12 }}>\n            <Text variant='xLarge' style={{ marginLeft: 16, marginBottom: 12 }}>{props.headerText}</Text>\n            <IconButton\n              iconProps={{\n                iconName: 'Edit'\n              }}\n              onClick={handleEdit}\n            />\n          </Stack>\n        )\n      }}\n      isLightDismiss\n      type={PanelType.customNear}\n      customWidth={400}\n      headerText={name}\n    >\n      <NodeDetailView\n        department={department}\n        description={description}\n        url={url}\n      />\n    </CustomPanel>\n  )\n}\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\n\nconst cubeMove = keyframes`\n    25% { \n      transform: translateX(42px) rotate(-90deg) scale(0.5);\n      -webkit-transform: translateX(42px) rotate(-90deg) scale(0.5);\n    } 50% { \n      transform: translateX(42px) translateY(42px) rotate(-179deg);\n      -webkit-transform: translateX(42px) translateY(42px) rotate(-179deg);\n    } 50.1% { \n      transform: translateX(42px) translateY(42px) rotate(-180deg);\n      -webkit-transform: translateX(42px) translateY(42px) rotate(-180deg);\n    } 75% { \n      transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\n      -webkit-transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\n    } 100% { \n      transform: rotate(-360deg);\n      -webkit-transform: rotate(-360deg);\n    }\n`\n\nconst Spinner = styled.div`\n  margin: 100px auto;\n  width: 40px;\n  height: 40px;\n  align-self: center;\n  justify-self: center;\n  position: relative;\n`\n\nconst cubeCSS = css`\n  background-color: #501214;\n  width: 15px;\n  height: 15px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  \n  -webkit-animation: ${cubeMove} 1.8s infinite ease-in-out;\n  animation: ${cubeMove} 1.8s infinite ease-in-out;\n`\n\nconst CubeOne = styled.div`\n  ${cubeCSS}\n`\nconst CubeTwo = styled.div`\n  ${cubeCSS}\n  animation-delay: -0.9s;\n`\n\nexport const Loading = props => {\n  return (\n    <Spinner>\n      <CubeOne />\n      <CubeTwo />\n    </Spinner>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { SystemsGraph, NodeDetail, SystemForm, CommandBar } from './components'\n\nconst Page = styled.div`\n  background-color: #e8e3db;\n  flex: 1;\n  flex-direction: column;\n  display: flex;\n`\n\nfunction App () {\n  return (\n    <Page>\n      <CommandBar />\n      <SystemsGraph />\n      <SystemForm />\n      <NodeDetail />\n    </Page>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons'\nimport App from './App'\nimport './index.css'\n\ninitializeIcons()\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  render(<App />, document.getElementById('root'))\n})\n"],"sourceRoot":""}