{"version":3,"sources":["util/Subject.js","util/NodeManager.js","util/Graph.js","util/Network.js","hooks/useEvent.js","components/SystemsGraph/SystemsGraph.js","util/FileManager.js","components/CommandBar/CommandBar.js","components/SystemForm/ConnectionReadWrite.js","components/SystemForm/Connection.js","components/SystemForm/SystemType.js","components/SystemForm/SystemFormView.js","components/SystemForm/SystemForm.js","components/NodeDetail/NodeDetailView.js","components/NodeDetail/NodeDetail.js","components/Loading/Loading.js","App.js","index.js"],"names":["_handlers","Subject","subscribe","event","handler","push","unsubscribe","filter","func","next","_len","arguments","length","args","Array","_key","forEach","apply","Object","freeze","NodeManager","_get","key","defaultValue","JSON","parse","localStorage","getItem","_set","value","setItem","stringify","getEdges","getNodesObject","saveUploadedData","_ref","edges","nodes","getNodes","keys","reduce","acc","cur","_NodeManager","Graph","fixEdges","oldEdges","objectSpread","edgeKeys","didFix","nodeEdges","currentEdgeID","edge","node","otherEdges","otherEdgeIndex","findIndex","splice","updateNodePosition","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee","x","y","wrap","_context","prev","sent","position","abrupt","stop","_x","this","_ref3","_callee2","_edges","_fixEdges","_context2","_ref4","_callee3","_context3","setEdges","_ref5","_callee4","_context4","_x2","setNodes","_ref6","_callee5","_context5","_x3","addNode","_ref7","_callee6","_nodes","_context6","id","Error","makeEdges","_x4","addEdge","_ref8","_callee7","node1","node2","data","_context7","isArray","addDirectedEdge","_x5","_x6","_x7","_ref9","_callee8","node2TargetID","_context8","_ref10","_x8","_x9","_x10","removeDirectedEdge","_ref11","_callee9","_context9","_ref12","_x11","_x12","removeEdge","_ref13","_callee10","_context10","_ref14","_x13","_x14","makeNode","_ref16","_callee11","_ref15","connections","connectionKeys","previousEdges","removeEdges","_context11","map","item","uuid","get","index","remove","info","concat","type","read","write","existingEdgeIndex","label","text","_x15","_ref17","_callee12","_loop","i","cleanup","_context13","prevEdge","_context12","find","_ref18","delegateYield","differenceby","_x16","_Graph","Network","_options","_container","_network","makeData","DataSet","builder","withEdges","withNodes","withOptions","options","inContainer","element","build","VisNetwork","once","fit","animation","duration","easingFunction","network","setData","_Network","useEvent","useEffect","systemsReducer","state","action","buildGraphData","getLinkColor","getArrowDirection","graphData","shape","shapeProperties","size","icon","face","code","color","getShape","name","font","strokeWidth","strokeColor","shadow","enabled","nodeId","from","to","smooth","roundness","hover","highlight","dashes","arrows","SystemsGraph","_useReducer","useReducer","_useReducer2","slicedToArray","systems","systemsDispatch","_useState","useState","_useState2","activeNode","setActiveNode","graphContainer","useRef","graph","updateGraph","displayNodeDetails","handleNodeSelect","useCallback","params","current","isCluster","matchingNode","console","log","off","on","start","Date","systemGraph","autoResize","interaction","hoverConnectedEdges","physics","document","addEventListener","e","preventDefault","react_default","createElement","style","overflow","flex","ref","handleFile","reader","FileReader","readAsBinaryString","target","files","onloadend","result","CommandBar","props","items","iconProps","iconName","onClick","setAttribute","display","click","uploadFile","filename","encodeURIComponent","dayjs","format","body","appendChild","removeChild","downloadFile","top","left","right","CommandBar_CommandBar","canChange","nextPath","nextValue","currentRead","currentWrite","ConnectionReadWrite","onChange","Stack","marginRight","marginTop","verticalAlign","tokens","childrenGap","Checkbox","checked","ConnectionContainer","styled","div","_templateObject","Connection","handleRemove","edit","addNodeForm","nodeFormErrors","setNodeFormErrors","existingSystems","updateNodeForm","selectedTarget","selectedType","selectedRead","selectedWrite","targetError","typeError","path","IconButton","Dropdown","placeholder","errorMessage","selectedKey","errors","ConnectionReadWrite_ConnectionReadWrite","SystemType","React","memo","required","prevProps","nextProps","keysUnchanged","errorUnchanged","SystemFormView","addConnection","Fragment","TextField","onGetErrorMessage","newSystem","String","toLowerCase","some","department","url","URL","err","message","checkURL","multiline","rows","description","conn","cloneElement","renderConnections","ActionButton","makeConnections","system","connectionType","connectedTo","addNodeReducer","addNodeState","unset","formState","set","connectionReducer","toConsumableArray","Connection_Connection","dispatch","getSystems","sort","b","validate","SystemForm","setEdit","_useState3","_useState4","isOpen","setIsOpen","_useState5","_useState6","setExistingSystems","_useState7","_useState8","_useReducer3","_useReducer4","connDispatch","resetForm","resetConnections","_Network$build","getConnectedNodes","connectedNodes","includes","makeFormState","submitSystem","_node","broadcastNodeSave","dismiss","Panel","headerText","onDismiss","isFooterAtBottom","onRenderFooterContent","horizontal","horizontalAlign","DefaultButton","PrimaryButton","PanelType","medium","SystemFormView_SystemFormView","NodeDetailView","Text","textDecoration","variant","href","CustomPanel","NodeDetail_templateObject","readWriteStatus","NodeDetail","setNode","editSystem","deselectActiveNode","NodeDetail_Connection","parseConnections","handleEdit","onRenderHeader","marginLeft","marginBottom","isLightDismiss","customNear","customWidth","NodeDetail_NodeDetailView","cubeMove","keyframes","Loading_templateObject","cubeCSS","_templateObject2","css","_templateObject3","_templateObject4","_templateObject5","Page","App_templateObject","App","SystemsGraph_SystemsGraph","CommandBar_CommandBar_CommandBar","SystemForm_SystemForm","NodeDetail_NodeDetail","initializeIcons","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.a4f5e4fd.chunk.js","sourcesContent":["const _handlers = {}\n\nexport const Subject = {\n  subscribe (event, handler) {\n    if (!_handlers[event]) _handlers[event] = []\n    _handlers[event].push(handler)\n  },\n  unsubscribe (event, handler) {\n    if (!_handlers[event]) return\n    _handlers[event] = _handlers[event].filter(func => func !== handler)\n  },\n  next (event, ...args) {\n    if (!_handlers[event]) return\n    _handlers[event].forEach(handler => {\n      if (typeof handler === 'function') {\n        handler(...args)\n      }\n    })\n  }\n}\n\nObject.freeze(Subject)\n","const _NodeManager = () => {\n  const _get = (key, defaultValue) => JSON.parse(localStorage.getItem(key)) || defaultValue\n  const _set = (key, value) => localStorage.setItem(key, JSON.stringify(value))\n  const getNodesObject = () => {\n    return _get('_nodes', {})\n  }\n\n  const getNodes = () => {\n    const nodes = _get('_nodes', {})\n    const nodeKeys = Object.keys(nodes)\n\n    return nodeKeys.reduce((acc, cur) => {\n      acc.push(nodes[cur])\n      return acc\n    }, [])\n  }\n\n  const getEdges = () => {\n    return _get('_edges', {})\n  }\n\n  const saveUploadedData = ({ edges, nodes }) => {\n    _set('_edges', edges)\n    _set('_nodes', nodes)\n  }\n\n  return {\n    getEdges,\n    getNodesObject,\n    saveUploadedData,\n    getNodes\n  }\n}\n\nexport const NodeManager = _NodeManager()\n","import get from 'lodash.get'\nimport differenceby from 'lodash.differenceby'\nimport uuid from 'uuid/v4'\n\nconst shouldFixEdges = true\n\nconst _Graph = () => {\n  const _get = (key, defaultValue) => JSON.parse(localStorage.getItem(key)) || defaultValue\n  const _set = (key, value) => localStorage.setItem(key, JSON.stringify(value))\n\n  const fixEdges = oldEdges => {\n    const edges = { ...oldEdges }\n    const edgeKeys = Object.keys(edges)\n    let didFix = false\n\n    edgeKeys.forEach(key => {\n      const nodeEdges = edges[key]\n      const currentEdgeID = key\n      nodeEdges.forEach(edge => {\n        if (edge.node === key) return\n        const otherEdges = edges[edge.node]\n        const otherEdgeIndex = otherEdges && otherEdges.findIndex(edge => edge.node === currentEdgeID)\n        if (otherEdgeIndex >= 0) {\n          otherEdges.splice(otherEdgeIndex, 1)\n          if (!didFix) didFix = true\n        }\n      })\n\n      if (edges.length <= 0) delete nodeEdges[key]\n    })\n\n    return { edges, didFix }\n  }\n\n  const updateNodePosition = async ({ node, x, y }) => {\n    const nodes = await _get('_nodes', {})\n    if (nodes[node]) {\n      nodes[node].position = {\n        x,\n        y\n      }\n    }\n    return _set('_nodes', nodes)\n  }\n\n  const getEdges = async () => {\n    if (shouldFixEdges) {\n      const _edges = await _get('_edges', {})\n      const { didFix, edges } = fixEdges(_edges)\n      if (didFix) {\n        await _set('_edges', edges)\n      }\n    }\n    return _get('_edges', {})\n  }\n\n  const getNodes = async () => {\n    return _get('_nodes', {})\n  }\n\n  const setEdges = async (edges) => {\n    return _set('_edges', edges)\n  }\n\n  const setNodes = async (nodes) => {\n    return _set('_nodes', nodes)\n  }\n\n  const addNode = async (node) => {\n    if (!node.id) throw new Error('Nodes must have IDs to be added')\n    const _nodes = await getNodes()\n\n    _nodes[node.id] = node\n\n    await makeEdges(node)\n    await setNodes(_nodes)\n  }\n\n  const addEdge = async (node1, node2, data) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to add edges')\n\n    const _edges = await getEdges()\n\n    if (!Array.isArray(_edges[node1.id])) _edges[node1.id] = []\n\n    await addDirectedEdge(node1, node2, data)\n  }\n\n  const addDirectedEdge = async (node1, node2, data) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to add directed edges')\n\n    const _edges = await getEdges()\n\n    if (!Array.isArray(_edges[node1.id])) _edges[node1.id] = []\n\n    const node2TargetID = _edges[node1.id].findIndex(({ node }) => node === node2.id)\n\n    if (node2TargetID >= 0) {\n      // Replace edge because it exists already\n      _edges[node1.id][node2TargetID] = { node: node2.id, data }\n    } else {\n      // Add edge, it does not exist\n      _edges[node1.id].push({ node: node2.id, data })\n    }\n\n    await setEdges({ ..._edges })\n  }\n\n  const removeDirectedEdge = async (node1, node2) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to remove directed eges')\n\n    const _edges = await getEdges()\n\n    _edges[node1.id] = _edges[node1.id] && _edges[node1.id].filter(({ node }) => node !== node2.id)\n\n    await setEdges(_edges)\n  }\n\n  const removeEdge = async (node1, node2) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to remove edges')\n\n    const _edges = await getEdges()\n\n    _edges[node1.id] = _edges[node1.id] && _edges[node1.id].filter(({ node }) => node !== node2.id)\n\n    await setEdges(_edges)\n  }\n\n  const makeNode = async ({ id, data, connections }) => {\n    let node = null\n    if (id) {\n      const nodes = await getNodes()\n      node = {\n        id,\n        edges: [],\n        previousEdges: nodes[id].edges.map(item => ({ ...item })),\n        data: {\n          ...nodes[id].data,\n          ...data\n        }\n      }\n    } else {\n      node = {\n        id: uuid(),\n        edges: [],\n        data: {\n          ...(data || {})\n        }\n      }\n    }\n\n    const connectionKeys = Object.keys(connections || {})\n    const previousEdges = get(node, 'previousEdges', [])\n\n    if (connectionKeys.length <= 0 && previousEdges.length > 0) {\n      const edges = await getEdges()\n      delete edges[node.id]\n      const removeEdges = []\n      Object.keys(edges).forEach(key => {\n        edges[key].forEach((edge, index) => {\n          if (edge.node === node.id) {\n            removeEdges.push({ key, index })\n          }\n        })\n      })\n      removeEdges.forEach(remove => {\n        edges[remove.key].splice(remove.index, 1)\n      })\n      await setEdges({ ...edges })\n      return node\n    }\n\n    connectionKeys.forEach(key => {\n      const info = get(connections, `${[key]}.connectedTo`, null)\n      if (!info) throw new Error('You cannot make a connection without a target')\n      const type = get(connections, `${[key]}.connectionType`, null)\n      if (!type) throw new Error('You cannot make a connection without a type')\n\n      const read = get(connections, `${[key]}.read`, null)\n      const write = get(connections, `${[key]}.write`, null)\n\n      if (!read && !write) throw new Error('You must specify a read or a write option')\n\n      const data = get(connections, `[${key}].data`, {})\n\n      const existingEdgeIndex = node.edges.findIndex(edge => edge.id === key)\n\n      if (existingEdgeIndex >= 0) {\n        node.edges[existingEdgeIndex] = {\n          id: info.key,\n          data: {\n            ...data,\n            read,\n            write,\n            type: {\n              id: type.key,\n              label: type.text\n            }\n          }\n        }\n      } else {\n        node.edges.push({\n          id: info.key,\n          data: {\n            ...data,\n            read,\n            write,\n            type: {\n              id: type.key,\n              label: type.text\n            }\n          }\n        })\n      }\n    })\n    return node\n  }\n\n  const makeEdges = async (node) => {\n    const edges = get(node, 'edges', [])\n    const previousEdges = get(node, 'previousEdges', [])\n\n    if (edges.length <= 0) return\n\n    for (let i = 0; i < edges.length; i++) {\n      const edge = edges[i]\n\n      const read = get(edge, 'data.read')\n      const write = get(edge, 'data.write')\n\n      const node1 = {\n        id: get(node, 'id')\n      }\n      const node2 = {\n        id: get(edge, 'id')\n      }\n\n      const prevEdge = previousEdges.find(({ id }) => id === edge.id)\n\n      const prev = {\n        read: get(prevEdge, `data.read`, read),\n        write: get(prevEdge, `data.write`, write)\n      }\n\n      if (prev.read && !read) {\n        await removeDirectedEdge(node2, node1)\n      }\n\n      if (prev.write && !write) {\n        await removeDirectedEdge(node1, node2)\n      }\n\n      if (read && write) {\n        await addEdge(node1, node2, get(edge, 'data'))\n      } else if (read) {\n        await addDirectedEdge(node2, node1, get(edge, 'data'))\n      } else if (write) {\n        await addDirectedEdge(node1, node2, get(edge, 'data'))\n      }\n    }\n\n    const cleanup = differenceby(previousEdges, node.edges, 'id')\n\n    if (cleanup.length >= 0) {\n      for (let i = 0; i < cleanup.length; i++) {\n        const edge = cleanup[i]\n\n        const read = get(edge, 'data.read')\n        const write = get(edge, 'data.write')\n\n        const node1 = {\n          id: get(node, 'id')\n        }\n        const node2 = {\n          id: get(edge, 'id')\n        }\n\n        if (read && write) {\n          await removeEdge(node1, node2)\n        } else if (read) {\n          await removeDirectedEdge(node2, node1)\n        } else if (write) {\n          await removeDirectedEdge(node1, node2)\n        }\n      }\n    }\n  }\n\n  return {\n    getNodes,\n    getEdges,\n    addNode,\n    removeEdge,\n    removeDirectedEdge,\n    updateNodePosition,\n    makeNode\n  }\n}\n\nexport const Graph = _Graph()\n","import { Network as VisNetwork, DataSet } from 'vis-network'\nimport { Graph } from './Graph'\n\nconst _Network = () => {\n  let _nodes = []\n  let _edges = []\n  let _options = {}\n  let _container = null\n  let _network = null\n\n  const inContainer = element => {\n    _container = element\n    return builder\n  }\n\n  const withNodes = nodes => {\n    _nodes = nodes\n    return builder\n  }\n\n  const withEdges = edges => {\n    _edges = edges\n    return builder\n  }\n\n  const withOptions = options => {\n    _options = options\n    return builder\n  }\n\n  const makeData = () => {\n    return {\n      nodes: new DataSet(_nodes),\n      edges: new DataSet(_edges)\n    }\n  }\n\n  const build = () => {\n    if (!_network) {\n      _network = new VisNetwork(_container, makeData(), _options)\n      _network.once('afterDrawing', function () {\n        _network.fit({\n          animation: {\n            duration: 600,\n            easingFunction: 'easeInOutQuad'\n          }\n        })\n      })\n    }\n    return {\n      network: _network,\n      setData: ({ nodes, edges }) => {\n        _nodes = nodes\n        _edges = edges\n        _network.setData(makeData())\n      },\n      updateNodePosition: Graph.updateNodePosition,\n      getNodes: () => _nodes,\n      getEdges: () => _edges\n    }\n  }\n\n  const builder = {\n    withEdges,\n    withNodes,\n    withOptions,\n    inContainer,\n    build\n  }\n\n  return builder\n}\n\nexport const Network = _Network()\n","import { useEffect } from 'react'\nimport { Subject } from '../util/Subject'\n\nexport const useEvent = (event, handler) => {\n  useEffect(() => {\n    if (typeof handler !== 'function') return\n    Subject.subscribe(event, handler)\n    return () => Subject.unsubscribe(event, handler)\n  }, [event, handler])\n\n  return value => Subject.next(event, value)\n}\n","import React, { useReducer, useEffect, useCallback, useState, useRef } from 'react'\nimport { Network, Graph } from '../../util'\nimport { useEvent } from '../../hooks'\nimport get from 'lodash.get'\n\nconst systemsReducer = (state, action) => {\n  switch (action.type) {\n    case 'update':\n      const nodes = action.nodes\n      const edges = action.edges\n      return buildGraphData(nodes, edges)\n    default:\n      return state\n  }\n}\n\nconst getLinkColor = (type) => {\n  switch (type) {\n    case 'custom':\n      return '#005481'\n    case 'builtin':\n      return '#9e6614'\n    default:\n      return '#A0A0A0'\n  }\n}\n\nconst getShape = (type) => {\n  switch (type) {\n    case 'cloud':\n      // Cloud shape\n      return { shape: 'icon', shapeProperties: { size: 25 }, icon: { face: 'Ionicons', code: '\\uf2c9', color: '#FFF' } }\n    case 'external':\n      return { shape: 'icon', shapeProperties: { size: 25 }, icon: { face: 'Ionicons', code: '\\uf381', color: '#FFF' } }\n    case 'oncampus':\n    default:\n      // Square Shape\n      return { shape: 'icon', shapeProperties: { size: 25 }, icon: { face: 'Ionicons', code: '\\uf384', color: '#FFF' } }\n  }\n}\n\nconst getArrowDirection = (edge) => {\n  const read = get(edge, 'data.read')\n  const write = get(edge, 'data.write')\n\n  if (read && write) return 'from, to'\n  return 'to'\n}\n\nconst buildGraphData = (nodes, edges) => {\n  const graphData = {\n    nodes: [],\n    edges: []\n  }\n\n  const nodeKeys = Object.keys(nodes || {})\n  nodeKeys.forEach(key => {\n    const node = nodes[key]\n\n    graphData.nodes.push({\n      id: node.id,\n      type: node.data.type,\n      ...getShape(node.data.type),\n      label: node.data.name,\n      edges: node.edges,\n      font: {\n        color: '#363534',\n        strokeWidth: 2,\n        strokeColor: '#FFFFFF'\n      },\n      shadow: {\n        enabled: true,\n        size: 4,\n        x: 1,\n        y: 1\n      },\n      data: {\n        ...node.data\n      },\n      color: '#FFFFFF',\n      x: get(node, 'position.x'),\n      y: get(node, 'position.y')\n    })\n  })\n\n  const edgeKeys = Object.keys(edges || {})\n  edgeKeys.forEach(nodeId => {\n    const edgeList = edges[nodeId]\n\n    edgeList.forEach(edge => {\n      graphData.edges.push({\n        from: nodeId,\n        to: edge.node,\n        smooth: {\n          enabled: true,\n          type: 'cubizBezier',\n          roundness: 0.15\n        },\n        color: {\n          color: getLinkColor(get(edge, 'data.type.id')),\n          hover: '#501214',\n          highlight: '#501214'\n        },\n        dashes: get(edge, 'data.type.id') === 'custom',\n        type: get(edge, 'data.type', {}),\n        arrows: getArrowDirection(edge, nodeId)\n      })\n    })\n  })\n\n  return graphData\n}\n\nexport const SystemsGraph = () => {\n  const [systems, systemsDispatch] = useReducer(systemsReducer, { nodes: [], edges: [] })\n  const [activeNode, setActiveNode] = useState()\n\n  const graphContainer = useRef()\n  const graph = useRef()\n\n  const updateGraph = async () => {\n    const nodes = await Graph.getNodes()\n    const edges = await Graph.getEdges()\n    systemsDispatch({ type: 'update', nodes, edges })\n  }\n\n  useEffect(() => {\n    updateGraph()\n  }, [])\n\n  const resetActiveNode = () => setActiveNode(null)\n  const displayNodeDetails = useEvent('display-node-details')\n\n  const handleNodeSelect = useCallback(params => {\n    const node = get(params, `nodes[0]`, null)\n    if (node) {\n      if (!graph.current.network.isCluster(node)) {\n        const matchingNode = systems.nodes.find(({ id }) => id === node)\n        if (matchingNode) {\n          setActiveNode(matchingNode)\n        }\n      }\n    }\n  }, [systems.nodes])\n\n  useEffect(() => {\n    if (activeNode) displayNodeDetails(activeNode)\n  }, [activeNode, displayNodeDetails])\n\n  useEvent('save-node-entry', updateGraph)\n  useEvent('deselect-active-node', resetActiveNode)\n\n  useEffect(() => {\n    console.log(systems)\n    const options = {\n      autoResize: false,\n      interaction: {\n        hover: true,\n        hoverConnectedEdges: true\n      },\n      physics: {\n        enabled: false\n      }\n    }\n\n    if (!graph.current) {\n      const start = new Date()\n      const systemGraph = Network\n        .inContainer(graphContainer.current)\n        .withEdges(systems.edges)\n        .withNodes(systems.nodes)\n        .withOptions(options)\n        .build()\n\n      console.log(`Network Build Time: ${new Date() - start}ms`)\n      graph.current = systemGraph\n\n      graph.current.network.on('selectNode', handleNodeSelect)\n      graph.current.network.on('dragEnd', event => {\n        if (event.nodes.length > 0) {\n          const node = get(event, 'nodes[0]')\n          const { x, y } = get(event, 'pointer.canvas', {})\n          graph.current.updateNodePosition({\n            node,\n            x,\n            y\n          })\n        }\n      })\n\n      document.addEventListener('contextmenu', e => e.preventDefault(), false)\n    } else {\n      graph.current.network.off('selectNode', handleNodeSelect)\n      graph.current.network.on('selectNode', handleNodeSelect)\n\n      graph.current.setData(systems)\n    }\n  }, [systems, handleNodeSelect])\n\n  return <div style={{ overflow: 'hidden', flex: 1 }} ref={graphContainer} id='graph' />\n}\n","import dayjs from 'dayjs'\nimport get from 'lodash.get'\nimport { NodeManager } from './NodeManager'\nimport { Subject } from './Subject'\n\nexport const downloadFile = (filename, data) => {\n  const element = document.createElement('a')\n  element.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(data)}`)\n  element.setAttribute('download', `${filename} - ${dayjs().format('YYYY-MM-DD/THHmmss')}.json`)\n\n  element.style.display = 'none'\n  document.body.appendChild(element)\n  element.click()\n  document.body.removeChild(element)\n}\n\nconst handleFile = (event) => {\n  const reader = new FileReader()\n  reader.readAsBinaryString(event.target.files[0])\n\n  reader.onloadend = async () => {\n    const data = JSON.parse(reader.result)\n    const edges = get(data, 'edges', {})\n    const nodes = get(data, 'nodes', {})\n\n    NodeManager.saveUploadedData({ edges, nodes })\n    Subject.next('save-node-entry')\n  }\n}\n\nexport const uploadFile = () => {\n  const element = document.createElement('input')\n  element.setAttribute('type', 'file')\n  element.setAttribute('accept', '.json')\n\n  element.style.display = 'none'\n  element.addEventListener('change', handleFile)\n  element.click()\n}\n","import React from 'react'\nimport { useEvent } from '../../hooks'\nimport { CommandBar as OfficeCommandBar } from 'office-ui-fabric-react/lib/CommandBar'\nimport { downloadFile, uploadFile } from '../../util/FileManager'\nimport { NodeManager } from '../../util/NodeManager'\n\nexport const CommandBar = props => {\n  const toggleLeftPanel = useEvent('toggle-left-panel')\n\n  const items = [\n    {\n      key: 'addNode',\n      name: 'Add System',\n      iconProps: {\n        iconName: 'Add'\n      },\n      onClick: toggleLeftPanel\n    },\n    {\n      key: 'upload',\n      name: 'Upload',\n      iconProps: {\n        iconName: 'Upload'\n      },\n      onClick: () => {\n        uploadFile()\n      }\n    },\n    {\n      key: 'download',\n      name: 'Download',\n      iconProps: {\n        iconName: 'Download'\n      },\n      onClick: () => {\n        const edges = NodeManager.getEdges()\n        const nodes = NodeManager.getNodesObject()\n\n        const filename = 'TR_Systems'\n        downloadFile(filename, JSON.stringify({ edges, nodes }, null, 2))\n      }\n    }\n  ]\n\n  return (\n    <div style={{ position: 'fixed', top: 0, left: 0, right: 0 }}>\n      <OfficeCommandBar\n        items={items}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox'\n\nconst canChange = (nextPath, nextValue) => (currentRead, currentWrite) => {\n  if (nextPath === 'read') {\n    return nextValue || currentWrite || false\n  }\n\n  if (nextPath === 'write') {\n    return nextValue || currentRead || false\n  }\n  return false\n}\n\nexport const ConnectionReadWrite = props => {\n  const { read, write, onChange } = props\n\n  return (\n    <Stack style={{ marginRight: 8, marginTop: 8 }} verticalAlign='space-between' tokens={{ childrenGap: 4 }}>\n      <Checkbox checked={read} onChange={(event, value) => {\n        if (canChange('read', value)(read, write)) {\n          onChange('read', value)\n        }\n      }} label='Read' />\n      <Checkbox checked={write} onChange={(event, value) => {\n        if (canChange('write', value)(read, write)) {\n          onChange('write', value)\n        }\n      }} label='Write' />\n    </Stack>\n  )\n}\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown'\nimport { ConnectionReadWrite } from './ConnectionReadWrite'\nimport get from 'lodash.get'\nimport { IconButton } from 'office-ui-fabric-react'\n\nconst ConnectionContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  justify-content: flex-start;\n  padding: 8px;\n  margin-top: 12px;\n  border: 1px solid rgb(138, 136, 134);\n  box-sizing: border-box;\n  border-radius: 1px;\n\n  & > .ms-Dropdown-container {\n    flex: 1;\n    width: 100%;\n    margin-right: 4px;\n  }\n\n  & > .ms-Button--icon {\n    align-self: flex-end;\n  }\n`\n\nexport const Connection = props => {\n  const { handleRemove, id, edit, addNodeForm, nodeFormErrors, setNodeFormErrors, existingSystems, updateNodeForm } = props\n  const selectedTarget = get(addNodeForm, `connections[${id}].connectedTo.key`, null)\n  const selectedType = get(addNodeForm, `connections[${id}].connectionType.key`, null)\n\n  const selectedRead = get(addNodeForm, `connections[${id}].read`, true)\n  const selectedWrite = get(addNodeForm, `connections[${id}].write`, false)\n\n  const targetError = get(nodeFormErrors, `[${id}].target`)\n  const typeError = get(nodeFormErrors, `[${id}].type`)\n\n  useEffect(() => {\n    if (!edit) {\n      updateNodeForm({\n        path: `connections[${id}].read`,\n        value: true\n      })\n    }\n  }, [updateNodeForm, id, edit])\n\n  return (\n    <ConnectionContainer>\n      <IconButton\n        iconProps={{ iconName: 'ChromeClose' }}\n        onClick={() => {\n          const connection = get(addNodeForm, `connections[${id}]`, null)\n          if (connection) {\n            updateNodeForm({\n              path: `connections[${id}]`,\n              type: 'remove'\n            })\n          }\n          handleRemove()\n        }}\n      />\n      <Dropdown\n        label='Connected To'\n        placeholder={`What does this system connect to?`}\n        options={existingSystems}\n        errorMessage={targetError}\n        selectedKey={selectedTarget}\n        onChange={(event, value) => {\n          updateNodeForm({\n            path: `connections[${id}].connectedTo`,\n            value: { key: value.key, text: value.text }\n          })\n          if (`${id}` in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors[id]\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <Dropdown\n        label='Interface'\n        options={[\n          { key: 'builtin', text: 'Built In' },\n          { key: 'custom', text: 'Custom' }\n        ]}\n        placeholder='How does this system connect?'\n        selectedKey={selectedType}\n        errorMessage={typeError}\n        onChange={(event, value) => {\n          updateNodeForm({\n            path: `connections[${id}].connectionType`,\n            value: { key: value.key, text: value.text, color: value.color }\n          })\n          if (`${id}` in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors[id]\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <ConnectionReadWrite\n        read={selectedRead}\n        write={selectedWrite}\n        onChange={(path, value) => {\n          updateNodeForm({\n            path: `connections[${id}].${path}`,\n            value\n          })\n        }}\n      />\n    </ConnectionContainer>\n  )\n}\n","import React from 'react'\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown'\n\nconst areEqual = (prevProps, nextProps) => {\n  const keysUnchanged = prevProps.selectedKey === nextProps.selectedKey\n  const errorUnchanged = prevProps.errorMessage === nextProps.errorMessage\n  return keysUnchanged && errorUnchanged\n}\n\nexport const SystemType = React.memo(props => {\n  const { selectedKey, onChange, required, errorMessage } = props\n\n  return (\n    <Dropdown\n      required={required}\n      label='System Type'\n      options={[\n        { key: 'oncampus', text: 'On Campus' },\n        { key: 'cloud', text: 'Cloud' },\n        { key: 'external', text: 'External' }\n      ]}\n      errorMessage={errorMessage}\n      placeholder='Where does this system live?'\n      selectedKey={selectedKey}\n      onChange={onChange}\n    />\n  )\n}, areEqual)\n","import React from 'react'\nimport { TextField } from 'office-ui-fabric-react/lib/TextField'\nimport { ActionButton } from 'office-ui-fabric-react'\nimport { SystemType } from './SystemType'\n\nconst renderConnections = ({ connections, existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors }) => {\n  return connections.map(conn => React.cloneElement(conn, { existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors }))\n}\n\nconst checkURL = url => {\n  if (!url) return\n  try {\n    const checkedURL = new URL(url)\n    if (checkedURL) return null\n  } catch (err) {\n    return err.message\n  }\n}\n\nexport const SystemFormView = props => {\n  const {\n    nodeFormErrors,\n    existingSystems,\n    setNodeFormErrors,\n    addNodeForm,\n    updateNodeForm,\n    connections,\n    addConnection,\n    edit\n  } = props\n  return (\n    <>\n      <TextField\n        label='Name'\n        placeholder='Choose a name'\n        errorMessage={nodeFormErrors.name}\n        required\n        onGetErrorMessage={(value => {\n          const newSystem = String(value).toLowerCase()\n          const nameExists = existingSystems.some(({ text }) => String(text).toLowerCase() === newSystem)\n          if (nameExists && !edit) {\n            setNodeFormErrors({\n              ...nodeFormErrors,\n              name: `The ${value} system already exists`\n            })\n          } else {\n            if (nodeFormErrors.name) {\n              const errors = {\n                ...nodeFormErrors\n              }\n              delete errors.name\n              setNodeFormErrors(errors)\n            }\n          }\n        })}\n        onChange={(event, value) => updateNodeForm({ path: 'name', value })}\n        value={addNodeForm.name || ''}\n      />\n      <SystemType\n        required\n        errorMessage={nodeFormErrors.type}\n        selectedKey={addNodeForm.type || null}\n        onChange={(event, value) => {\n          updateNodeForm({ path: 'type', value: value.key })\n          if ('type' in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors.type\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <TextField\n        label='Department'\n        placeholder='Was this built for another department?'\n        onChange={(event, value) => updateNodeForm({ path: 'department', value })}\n        value={addNodeForm.department || ''}\n      />\n      <TextField\n        label='URL'\n        placeholder='Is there a url to access this system?'\n        onChange={(event, value) => updateNodeForm({ path: 'url', value })}\n        onGetErrorMessage={value => checkURL(value)}\n        value={addNodeForm.url || ''}\n      />\n      <TextField\n        label='Description'\n        placeholder='Enter some information others may want to know about this system'\n        multiline\n        rows={4}\n        onChange={(event, value) => updateNodeForm({ path: 'description', value })}\n        value={addNodeForm.description || ''}\n      />\n      {renderConnections({ connections, existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors })}\n      <ActionButton\n        onClick={addConnection}\n        iconProps={{ iconName: 'Add' }}\n      >\n        Add Connection\n      </ActionButton>\n    </>\n  )\n}\n","import React, { useState, useReducer } from 'react'\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel'\nimport { NodeManager, Graph } from '../../util'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { PrimaryButton, DefaultButton } from 'office-ui-fabric-react'\nimport { useEvent } from '../../hooks'\nimport get from 'lodash.get'\nimport uuid from 'uuid/v4'\nimport set from 'lodash.set'\nimport unset from 'lodash.unset'\nimport { Connection } from './Connection'\nimport { Network } from '../../util/Network'\nimport { SystemFormView } from './SystemFormView'\n\nconst makeConnections = (system, nodes) => {\n  const connections = {}\n  system.edges.forEach(edge => {\n    connections[edge.id] = {\n      read: edge.data.read,\n      write: edge.data.write,\n      connectionType: {\n        key: edge.data.type.id,\n        text: edge.data.type.label\n      },\n      connectedTo: {\n        key: edge.id,\n        text: get(nodes.filter(node => node.id === edge.id), '[0].data.name', '')\n      }\n    }\n  })\n  return connections\n}\n\nconst makeFormState = system => {\n  const { network, getNodes } = Network.build()\n  const nodes = network.getConnectedNodes(system.id)\n\n  const connectedNodes = getNodes().filter(({ id }) => nodes.includes(id))\n\n  const formState = {\n    name: get(system, 'data.name'),\n    id: get(system, 'id'),\n    type: get(system, 'data.type'),\n    department: get(system, 'data.department'),\n    url: get(system, 'data.url'),\n    description: get(system, 'data.description'),\n    connections: makeConnections(system, connectedNodes)\n  }\n  return formState\n}\n\nconst addNodeReducer = (state, action) => {\n  if (action.path === '') return {}\n  const addNodeState = { ...state }\n  switch (action.type) {\n    case 'remove':\n      unset(addNodeState, action.path)\n      return addNodeState\n    case 'edit':\n      return { ...action.formState }\n    default:\n      set(addNodeState, action.path, action.value)\n      return addNodeState\n  }\n}\n\nconst connectionReducer = (connections, action) => {\n  switch (action.type) {\n    case 'add':\n      const id = uuid()\n      return [\n        ...connections,\n        <Connection\n          key={id}\n          id={id}\n          handleRemove={() => action.dispatch({ type: 'remove', id })}\n        />\n      ]\n    case 'remove':\n      return connections.filter(({ key }) => key !== action.id)\n    case 'reset':\n      return []\n    case 'edit':\n      const connKeys = Object.keys(action.connections)\n      return connKeys.map(key => {\n        const id = key\n        const dispatch = get(action, 'dispatch', null)\n\n        if (!dispatch || !id) return null\n\n        return (\n          <Connection\n            edit\n            key={id}\n            id={id}\n            handleRemove={() => dispatch({ type: 'remove', id })}\n          />\n        )\n      }).filter(item => item)\n    default:\n      return connections\n  }\n}\n\nconst getSystems = () => {\n  const nodes = NodeManager.getNodes()\n  return nodes.map(node => ({ key: node.id, text: node.data.name })).sort((a, b) => {\n    if (a.text < b.text) return -1\n    if (a.text > b.text) return 1\n    return 0\n  })\n}\n\nconst validate = (addNodeForm, nodeFormErrors) => {\n  let errors = {}\n  if (nodeFormErrors) {\n    errors = {\n      ...nodeFormErrors\n    }\n  }\n\n  if (!addNodeForm.type) {\n    errors.type = 'A system type must be selected'\n  }\n\n  if (!addNodeForm.name) {\n    errors.name = 'A system name is required'\n  }\n\n  if (addNodeForm.connections) {\n    const keys = Object.keys(addNodeForm.connections || {})\n    keys.forEach(key => {\n      const target = get(addNodeForm, `connections[${key}].connectedTo.key`, null)\n      const type = get(addNodeForm, `connections[${key}].connectionType.key`, null)\n\n      if (!type) set(errors, `[${key}].type`, 'The connection must have a type selected')\n      if (!target) set(errors, `[${key}].target`, 'You must select another system to connect to')\n    })\n  }\n\n  return errors\n}\n\nexport const SystemForm = (props) => {\n  const [edit, setEdit] = useState(false)\n  const [isOpen, setIsOpen] = useState(false)\n  const [addNodeForm, updateNodeForm] = useReducer(addNodeReducer, {})\n  const [existingSystems, setExistingSystems] = useState(getSystems())\n  const [nodeFormErrors, setNodeFormErrors] = useState({})\n  const [connections, connDispatch] = useReducer(connectionReducer, [])\n\n  const toggle = () => setIsOpen(!isOpen)\n  const resetForm = () => updateNodeForm({ path: '', value: {} })\n  const resetConnections = () => connDispatch({ type: 'reset' })\n\n  const handleEditSystem = (system) => {\n    const formState = makeFormState(system)\n    connDispatch({\n      type: 'edit',\n      connections: formState.connections || {},\n      dispatch: connDispatch\n    })\n    updateNodeForm({ type: 'edit', formState })\n    setEdit(true)\n    setIsOpen(true)\n  }\n\n  useEvent('edit-system-panel', handleEditSystem)\n\n  const addConnection = () => {\n    connDispatch({\n      type: 'add',\n      dispatch: connDispatch,\n      existingSystems,\n      addNodeForm,\n      updateNodeForm\n    })\n  }\n\n  const submitSystem = async () => {\n    const errors = validate(addNodeForm, nodeFormErrors)\n    if (Object.keys(errors).length > 0) {\n      setNodeFormErrors({\n        ...nodeFormErrors,\n        ...errors\n      })\n      return\n    }\n\n    const connections = get(addNodeForm, 'connections', {})\n    const data = {\n      description: get(addNodeForm, 'description', ''),\n      name: get(addNodeForm, 'name', ''),\n      type: get(addNodeForm, 'type', ''),\n      url: get(addNodeForm, 'url', ''),\n      department: get(addNodeForm, 'department', '')\n    }\n\n    if (edit) {\n      const node = await Graph.makeNode({ id: addNodeForm.id, connections, data })\n      await Graph.addNode(node)\n    } else {\n      const node = await Graph.makeNode({ connections, data })\n      await Graph.addNode(node)\n    }\n\n    broadcastNodeSave()\n    resetConnections()\n    resetForm()\n  }\n\n  useEvent('toggle-left-panel', toggle)\n  const dismiss = () => {\n    resetForm()\n    resetConnections()\n    setIsOpen(false)\n    setEdit(false)\n  }\n\n  const updateExistingSystems = () => {\n    const systems = getSystems()\n    setExistingSystems(systems)\n  }\n\n  const broadcastNodeSave = useEvent('save-node-entry', updateExistingSystems)\n\n  return (\n    <Panel\n      headerText={`${edit ? 'Edit' : 'Add'} System`}\n      isOpen={isOpen}\n      onDismiss={dismiss}\n      isFooterAtBottom\n      onRenderFooterContent={() => (\n        <Stack horizontal horizontalAlign='space-between' tokens={{ childrenGap: 12 }}>\n          <DefaultButton text='Cancel' onClick={dismiss} />\n          <PrimaryButton text='Save System' onClick={submitSystem} />\n        </Stack>\n      )}\n      type={PanelType.medium}\n    >\n      <SystemFormView\n        edit={edit}\n        existingSystems={existingSystems}\n        nodeFormErrors={nodeFormErrors}\n        setNodeFormErrors={setNodeFormErrors}\n        addNodeForm={addNodeForm}\n        updateNodeForm={updateNodeForm}\n        connections={connections}\n        addConnection={addConnection}\n      />\n    </Panel>\n  )\n}\n","import React from 'react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Text } from 'office-ui-fabric-react/lib/Text'\n\nconst NodeDetailView = props => {\n  const { description, department, url, connections } = props\n  return (\n    <Stack tokens={{ childrenGap: 8 }}>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Description</Text>\n        <Text>{description}</Text>\n      </Stack>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Department</Text>\n        <Text>{department}</Text>\n      </Stack>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>URL</Text>\n        <a href={url}>{url}</a>\n      </Stack>\n      <Stack>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Connections</Text>\n        {connections}\n      </Stack>\n    </Stack>\n  )\n}\n\nexport default NodeDetailView\n","import React, { useState } from 'react'\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel'\nimport { IconButton } from 'office-ui-fabric-react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Text } from 'office-ui-fabric-react/lib/Text'\nimport styled from 'styled-components'\nimport get from 'lodash.get'\nimport { useEvent } from '../../hooks'\nimport { NodeManager } from '../../util'\nimport NodeDetailView from './NodeDetailView'\n\nconst CustomPanel = styled(Panel)`\n  & > .ms-Panel-main {\n    transition: width 300ms ease-in-out;\n  }\n`\nconst parseConnections = (node) => {\n  if (!node) return []\n  const edges = NodeManager.getEdges()\n  const nodes = NodeManager.getNodesObject()\n\n  const edgeKeys = Object.keys(edges || {})\n  return edgeKeys.reduce((acc, cur) => {\n    const nodeEdges = edges[cur]\n    nodeEdges\n      .filter(edge => edge.node === node.id)\n      .forEach(edge => {\n        const to = get(nodes, `[${cur}].data.name`)\n\n        const type = get(edge, 'data.type.label')\n        const read = get(edge, 'data.read')\n        const write = get(edge, 'data.write')\n\n        acc.push(<Connection key={edge.node} to={to} read={read} write={write} type={type} />)\n      })\n    return acc\n  }, [])\n}\n\nconst Connection = ({ to, type, read, write }) => {\n  let readWriteStatus = ''\n  if (read && write) {\n    readWriteStatus = '(Read and Write)'\n  } else if (read) {\n    readWriteStatus = '(Read)'\n  } else if (write) {\n    readWriteStatus = '(Write)'\n  }\n  return (\n    <Text>{to} - {type} {readWriteStatus}</Text>\n  )\n}\n\nexport const NodeDetail = props => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [node, setNode] = useState(null)\n  const displayNode = (node) => {\n    setNode(node)\n    setIsOpen(true)\n  }\n  const closePanel = () => setIsOpen(false)\n\n  useEvent('display-node-details', displayNode)\n  const editSystem = useEvent('edit-system-panel')\n  const deselectActiveNode = useEvent('deselect-active-node')\n  const name = get(node, 'data.name', 'Very Unnamed System')\n  const description = get(node, 'data.description', 'No description has been entered.')\n  const department = get(node, 'data.department', 'No department has been entered.')\n  const url = get(node, 'data.url', `${name} has no url`)\n\n  const connections = parseConnections(node)\n  const handleEdit = () => {\n    editSystem(node)\n    setIsOpen(false)\n    deselectActiveNode()\n  }\n\n  return (\n    <CustomPanel\n      isOpen={isOpen}\n      onDismiss={() => {\n        deselectActiveNode()\n        closePanel()\n      }}\n      onRenderHeader={(props) => {\n        return (\n          <Stack horizontal tokens={{ childrenGap: 12 }}>\n            <Text variant='xLarge' style={{ marginLeft: 16, marginBottom: 12 }}>{props.headerText}</Text>\n            <IconButton\n              iconProps={{\n                iconName: 'Edit'\n              }}\n              onClick={handleEdit}\n            />\n          </Stack>\n        )\n      }}\n      isLightDismiss\n      type={PanelType.customNear}\n      customWidth={400}\n      headerText={name}\n    >\n      <NodeDetailView\n        connections={connections}\n        department={department}\n        description={description}\n        url={url}\n      />\n    </CustomPanel>\n  )\n}\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\n\nconst cubeMove = keyframes`\n    25% { \n      transform: translateX(42px) rotate(-90deg) scale(0.5);\n      -webkit-transform: translateX(42px) rotate(-90deg) scale(0.5);\n    } 50% { \n      transform: translateX(42px) translateY(42px) rotate(-179deg);\n      -webkit-transform: translateX(42px) translateY(42px) rotate(-179deg);\n    } 50.1% { \n      transform: translateX(42px) translateY(42px) rotate(-180deg);\n      -webkit-transform: translateX(42px) translateY(42px) rotate(-180deg);\n    } 75% { \n      transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\n      -webkit-transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\n    } 100% { \n      transform: rotate(-360deg);\n      -webkit-transform: rotate(-360deg);\n    }\n`\n\nconst Spinner = styled.div`\n  margin: 100px auto;\n  width: 40px;\n  height: 40px;\n  align-self: center;\n  justify-self: center;\n  position: relative;\n`\n\nconst cubeCSS = css`\n  background-color: #501214;\n  width: 15px;\n  height: 15px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  \n  -webkit-animation: ${cubeMove} 1.8s infinite ease-in-out;\n  animation: ${cubeMove} 1.8s infinite ease-in-out;\n`\n\nconst CubeOne = styled.div`\n  ${cubeCSS}\n`\nconst CubeTwo = styled.div`\n  ${cubeCSS}\n  animation-delay: -0.9s;\n`\n\nexport const Loading = props => {\n  return (\n    <Spinner>\n      <CubeOne />\n      <CubeTwo />\n    </Spinner>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { SystemsGraph, NodeDetail, SystemForm, CommandBar } from './components'\n\nconst Page = styled.div`\n  background-color: #e8e3db;\n  flex: 1;\n  flex-direction: column;\n  display: flex;\n`\n\nfunction App () {\n  return (\n    <Page>\n      <SystemsGraph />\n      <CommandBar />\n      <SystemForm />\n      <NodeDetail />\n    </Page>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons'\nimport App from './App'\n\ninitializeIcons()\n\nrender(<App />, document.getElementById('root'))\n"],"sourceRoot":""}