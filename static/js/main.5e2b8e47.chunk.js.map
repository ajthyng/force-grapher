{"version":3,"sources":["components/Legend/Legend.js","util/Subject.js","util/NodeManager.js","util/Graph.js","util/Network.js","hooks/useEvent.js","components/SystemsGraph/SystemsGraph.js","util/FileManager.js","components/CommandBar/CommandBar.js","components/SystemForm/ConnectionReadWrite.js","components/SystemForm/Connection.js","components/SystemForm/SystemType.js","components/SystemForm/SystemFormView.js","components/SystemForm/SystemForm.js","components/NodeDetail/NodeDetailView.js","components/NodeDetail/NodeDetail.js","components/Loading/Loading.js","App.js","index.js"],"names":["LegendContainer","styled","div","_templateObject","LegendIcon","i","_templateObject2","OnCampus","attrs","props","className","_templateObject3","External","_templateObject4","Cloud","_templateObject5","NodeContainer","_templateObject6","Label","span","_templateObject7","Node","Icon","icon","react_default","a","createElement","label","EdgeContainer","_templateObject8","EdgeStyle","_templateObject9","_ref","dashed","_ref2","color","EdgeStyleContainer","_templateObject10","Edge","Legend","Legend_Node","Legend_Edge","_handlers","Subject","subscribe","event","handler","push","unsubscribe","filter","func","next","_len","arguments","length","args","Array","_key","forEach","apply","Object","freeze","NodeManager","_get","key","defaultValue","JSON","parse","localStorage","getItem","_set","value","setItem","stringify","getEdges","getNodesObject","saveUploadedData","edges","nodes","getNodes","keys","reduce","acc","cur","_NodeManager","Graph","fixEdges","oldEdges","objectSpread","edgeKeys","didFix","nodeEdges","currentEdgeID","edge","node","otherEdges","otherEdgeIndex","findIndex","splice","updateNodePosition","asyncToGenerator","regenerator_default","mark","_callee","x","y","wrap","_context","prev","sent","position","abrupt","stop","_x","this","_ref3","_callee2","_edges","_fixEdges","_context2","getNodesArray","_ref4","_callee3","_context3","values","_ref5","_callee4","_context4","setEdges","_ref6","_callee5","_context5","_x2","setNodes","_ref7","_callee6","_context6","_x3","addNode","_ref8","_callee7","_nodes","_context7","id","Error","makeEdges","_x4","addEdge","_ref9","_callee8","node1","node2","data","_context8","isArray","addDirectedEdge","_x5","_x6","_x7","_ref10","_callee9","node2TargetID","_context9","_ref11","_x8","_x9","_x10","removeDirectedEdge","_ref12","_callee10","_context10","_ref13","_x11","_x12","removeEdge","_ref14","_callee11","_context11","_ref15","_x13","_x14","makeNode","_ref17","_callee12","_ref16","connections","connectionKeys","previousEdges","removeEdges","_context12","map","item","uuid","get","index","remove","info","concat","type","read","write","existingEdgeIndex","text","_x15","_ref18","_callee13","_loop","cleanup","_context14","prevEdge","_context13","find","_ref19","delegateYield","differenceby","_x16","_Graph","Network","_options","_container","_network","makeData","DataSet","builder","withEdges","withNodes","withOptions","options","inContainer","element","build","VisNetwork","once","fit","animation","duration","easingFunction","network","setData","_Network","useEvent","useEffect","systemsReducer","state","action","buildGraphData","getLinkColor","getArrowDirection","graphData","shape","shapeProperties","size","face","code","getShape","name","font","strokeWidth","strokeColor","shadow","enabled","nodeId","from","to","smooth","roundness","hover","highlight","dashes","arrows","SystemsGraph","_useReducer","useReducer","_useReducer2","slicedToArray","systems","systemsDispatch","_useState","useState","_useState2","activeNode","setActiveNode","_useState3","_useState4","lastAdded","setLastAdded","graphContainer","useRef","graph","updateGraph","window","addEventListener","ctrlKey","keyCode","preventDefault","displayNodeDetails","results","current","selected","getSelectedNodes","unselectAll","selectNodes","handleNodeSelect","useCallback","params","isCluster","matchingNode","handleNodeClick","getNodeAt","pointer","DOM","includes","off","on","focus","scale","start","Date","systemGraph","autoResize","interaction","hoverConnectedEdges","physics","console","log","document","e","Fragment","style","overflow","height","ref","Legend_Legend","downloadFile","filename","setAttribute","encodeURIComponent","dayjs","format","display","body","appendChild","click","removeChild","handleFile","reader","FileReader","readAsBinaryString","target","files","onloadend","result","handleSearch","toLowerCase","SearchNodes","SearchBox","placeholder","styles","root","width","alignSelf","onChange","debounce","CommandBar","toggleLeftPanel","querySelector","farItems","onRender","nearItems","iconProps","iconName","onClick","uploadFile","_onClick","CommandBar_CommandBar","items","canChange","nextPath","nextValue","currentRead","currentWrite","ConnectionReadWrite","Stack","marginRight","marginTop","verticalAlign","tokens","childrenGap","Checkbox","checked","ConnectionContainer","Connection_templateObject","Connection","handleRemove","edit","addNodeForm","nodeFormErrors","setNodeFormErrors","existingSystems","updateNodeForm","selectedTarget","selectedType","selectedRead","selectedWrite","targetError","typeError","path","IconButton","Dropdown","errorMessage","selectedKey","errors","ConnectionReadWrite_ConnectionReadWrite","SystemType","React","memo","required","prevProps","nextProps","keysUnchanged","errorUnchanged","SystemFormView","addConnection","TextField","onGetErrorMessage","newSystem","String","some","department","url","URL","err","message","checkURL","multiline","rows","description","conn","cloneElement","renderConnections","ActionButton","makeConnections","system","connectionType","connectedTo","addNodeReducer","addNodeState","unset","formState","set","connectionReducer","toConsumableArray","Connection_Connection","dispatch","getSystems","sort","b","validate","error","SystemForm","setEdit","isOpen","setIsOpen","_useState5","_useState6","setExistingSystems","_useState7","_useState8","_useReducer3","_useReducer4","connDispatch","resetForm","resetConnections","_Network$build","getConnectedNodes","connectedNodes","makeFormState","submitSystem","_node","broadcastNodeSave","nodeAdded","dismiss","Panel","headerText","onDismiss","isFooterAtBottom","onRenderFooterContent","horizontal","horizontalAlign","DefaultButton","PrimaryButton","PanelType","medium","SystemFormView_SystemFormView","NodeDetailView","Text","textDecoration","variant","href","rel","CustomPanel","NodeDetail_templateObject","readWriteStatus","NodeDetail","setNode","editSystem","deselectActiveNode","NodeDetail_Connection","parseConnections","handleEdit","onRenderHeader","marginLeft","marginBottom","isLightDismiss","customNear","customWidth","NodeDetail_NodeDetailView","cubeMove","keyframes","Loading_templateObject","cubeCSS","Loading_templateObject2","css","Loading_templateObject3","Loading_templateObject4","Loading_templateObject5","Page","App_templateObject","App","CommandBar_CommandBar_CommandBar","SystemsGraph_SystemsGraph","SystemForm_SystemForm","NodeDetail_NodeDetail","initializeIcons","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.5e2b8e47.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst LegendContainer = styled.div`\n  transform: scale(0.3) translate3d(-392px, 450px, 0);\n  position: absolute;\n  bottom: 12px;\n  left: 12px;\n  width: 300px;\n  border: solid 2px #808080;\n  border-radius: 3px;\n  background-color: #e8e3db;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  display: flex;\n  padding: 12px;\n\n  @media only screen and (max-width: 767px) {\n    display: none;\n  }\n\n  transition: transform 300ms ease-in-out;\n\n  &:hover {\n    transform: scale(1) translate3d(0, 0, 0);\n  }\n`\n\nconst LegendIcon = styled.i`\n  color: white;\n  font-size: 60px;\n  text-shadow: 2px 2px 4px #808080;\n  margin: 8px;\n  min-width: 60px;\n`\n\nconst OnCampus = styled(LegendIcon).attrs(props => ({ className: 'ion-md-star' }))``\nconst External = styled(LegendIcon).attrs(props => ({ className: 'ion-md-square' }))``\nconst Cloud = styled(LegendIcon).attrs(props => ({ className: 'ion-md-cloud' }))``\n\nconst NodeContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`\n\nconst Label = styled.span`\n  color: #363534;\n  font-size: 18px;\n`\n\nconst Node = props => {\n  const Icon = props.icon\n  return (\n    <NodeContainer>\n      <Icon />\n      <Label>{props.label}</Label>\n    </NodeContainer>\n  )\n}\n\nconst EdgeContainer = styled(NodeContainer)`\n  margin-top: 12px;\n  margin-bottom: 24px;\n`\n\nconst EdgeStyle = styled.div`\n  width: 45px;\n  min-width: 45px;\n  border-top: ${({ dashed }) => dashed ? 'dashed' : 'solid'} ${({ color }) => color} 4px;\n`\n\nconst EdgeStyleContainer = styled.div`\n  width: 60px;\n  min-width: 60px;\n  margin: 8px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst Edge = props => {\n  const { color, label, dashed } = props\n  return (\n    <EdgeContainer>\n      <EdgeStyleContainer>\n        <EdgeStyle color={color} dashed={dashed} />\n      </EdgeStyleContainer>\n      <Label >{label}</Label>\n    </EdgeContainer>\n  )\n}\n\nexport const Legend = props => {\n  return (\n    <LegendContainer>\n      <Node icon={OnCampus} label='On Campus System' />\n      <Node icon={External} label='External System' />\n      <Node icon={Cloud} label='Cloud System' />\n      <Edge color='#005481' dashed label='Built-in Interface' />\n      <Edge color='#9e6614' label='Custom Interface' />\n    </LegendContainer>\n  )\n}\n","const _handlers = {}\n\nexport const Subject = {\n  subscribe (event, handler) {\n    if (!_handlers[event]) _handlers[event] = []\n    _handlers[event].push(handler)\n  },\n  unsubscribe (event, handler) {\n    if (!_handlers[event]) return\n    _handlers[event] = _handlers[event].filter(func => func !== handler)\n  },\n  next (event, ...args) {\n    if (!_handlers[event]) return\n    _handlers[event].forEach(handler => {\n      if (typeof handler === 'function') {\n        handler(...args)\n      }\n    })\n  }\n}\n\nObject.freeze(Subject)\n","const _NodeManager = () => {\n  const _get = (key, defaultValue) => JSON.parse(localStorage.getItem(key)) || defaultValue\n  const _set = (key, value) => localStorage.setItem(key, JSON.stringify(value))\n  const getNodesObject = () => {\n    return _get('_nodes', {})\n  }\n\n  const getNodes = () => {\n    const nodes = _get('_nodes', {})\n    const nodeKeys = Object.keys(nodes)\n\n    return nodeKeys.reduce((acc, cur) => {\n      acc.push(nodes[cur])\n      return acc\n    }, [])\n  }\n\n  const getEdges = () => {\n    return _get('_edges', {})\n  }\n\n  const saveUploadedData = ({ edges, nodes }) => {\n    _set('_edges', edges)\n    _set('_nodes', nodes)\n  }\n\n  return {\n    getEdges,\n    getNodesObject,\n    saveUploadedData,\n    getNodes\n  }\n}\n\nexport const NodeManager = _NodeManager()\n","import get from 'lodash.get'\nimport differenceby from 'lodash.differenceby'\nimport uuid from 'uuid/v4'\n\nconst shouldFixEdges = true\n\nconst _Graph = () => {\n  const _get = (key, defaultValue) => JSON.parse(localStorage.getItem(key)) || defaultValue\n  const _set = (key, value) => localStorage.setItem(key, JSON.stringify(value))\n\n  const fixEdges = oldEdges => {\n    const edges = { ...oldEdges }\n    const edgeKeys = Object.keys(edges)\n    let didFix = false\n\n    edgeKeys.forEach(key => {\n      const nodeEdges = edges[key]\n      const currentEdgeID = key\n      nodeEdges.forEach(edge => {\n        if (edge.node === key) return\n        const otherEdges = edges[edge.node]\n        const otherEdgeIndex = otherEdges && otherEdges.findIndex(edge => edge.node === currentEdgeID)\n        if (otherEdgeIndex >= 0) {\n          otherEdges.splice(otherEdgeIndex, 1)\n          if (!didFix) didFix = true\n        }\n      })\n\n      if (edges.length <= 0) delete nodeEdges[key]\n    })\n\n    return { edges, didFix }\n  }\n\n  const updateNodePosition = async ({ node, x, y }) => {\n    const nodes = await _get('_nodes', {})\n    if (nodes[node]) {\n      nodes[node].position = {\n        x,\n        y\n      }\n    }\n    return _set('_nodes', nodes)\n  }\n\n  const getEdges = async () => {\n    if (shouldFixEdges) {\n      const _edges = await _get('_edges', {})\n      const { didFix, edges } = fixEdges(_edges)\n      if (didFix) {\n        await _set('_edges', edges)\n      }\n    }\n    return _get('_edges', {})\n  }\n\n  const getNodesArray = async () => {\n    const nodes = await _get('_nodes', {})\n    return Object.values(nodes)\n  }\n\n  const getNodes = async () => {\n    return _get('_nodes', {})\n  }\n\n  const setEdges = async (edges) => {\n    return _set('_edges', edges)\n  }\n\n  const setNodes = async (nodes) => {\n    return _set('_nodes', nodes)\n  }\n\n  const addNode = async (node) => {\n    if (!node.id) throw new Error('Nodes must have IDs to be added')\n    const _nodes = await getNodes()\n\n    _nodes[node.id] = node\n\n    await makeEdges(node)\n    await setNodes(_nodes)\n  }\n\n  const addEdge = async (node1, node2, data) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to add edges')\n\n    const _edges = await getEdges()\n\n    if (!Array.isArray(_edges[node1.id])) _edges[node1.id] = []\n\n    await addDirectedEdge(node1, node2, data)\n  }\n\n  const addDirectedEdge = async (node1, node2, data) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to add directed edges')\n\n    const _edges = await getEdges()\n\n    if (!Array.isArray(_edges[node1.id])) _edges[node1.id] = []\n\n    const node2TargetID = _edges[node1.id].findIndex(({ node }) => node === node2.id)\n\n    if (node2TargetID >= 0) {\n      // Replace edge because it exists already\n      _edges[node1.id][node2TargetID] = { node: node2.id, data }\n    } else {\n      // Add edge, it does not exist\n      _edges[node1.id].push({ node: node2.id, data })\n    }\n\n    await setEdges({ ..._edges })\n  }\n\n  const removeDirectedEdge = async (node1, node2) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to remove directed eges')\n\n    const _edges = await getEdges()\n\n    _edges[node1.id] = _edges[node1.id] && _edges[node1.id].filter(({ node }) => node !== node2.id)\n\n    await setEdges(_edges)\n  }\n\n  const removeEdge = async (node1, node2) => {\n    if (!node1.id || !node2.id) throw new Error('Nodes must have IDs to remove edges')\n\n    const _edges = await getEdges()\n\n    _edges[node1.id] = _edges[node1.id] && _edges[node1.id].filter(({ node }) => node !== node2.id)\n\n    await setEdges(_edges)\n  }\n\n  const makeNode = async ({ id, data, connections }) => {\n    let node = null\n    if (id) {\n      const nodes = await getNodes()\n      node = {\n        id,\n        edges: [],\n        previousEdges: nodes[id].edges.map(item => ({ ...item })),\n        data: {\n          ...nodes[id].data,\n          ...data\n        }\n      }\n    } else {\n      node = {\n        id: uuid(),\n        edges: [],\n        data: {\n          ...(data || {})\n        }\n      }\n    }\n\n    const connectionKeys = Object.keys(connections || {})\n    const previousEdges = get(node, 'previousEdges', [])\n\n    if (connectionKeys.length <= 0 && previousEdges.length > 0) {\n      const edges = await getEdges()\n      delete edges[node.id]\n      const removeEdges = []\n      Object.keys(edges).forEach(key => {\n        edges[key].forEach((edge, index) => {\n          if (edge.node === node.id) {\n            removeEdges.push({ key, index })\n          }\n        })\n      })\n      removeEdges.forEach(remove => {\n        edges[remove.key].splice(remove.index, 1)\n      })\n      await setEdges({ ...edges })\n      return node\n    }\n\n    connectionKeys.forEach(key => {\n      const info = get(connections, `${[key]}.connectedTo`, null)\n      if (!info) throw new Error('You cannot make a connection without a target')\n      const type = get(connections, `${[key]}.connectionType`, null)\n      if (!type) throw new Error('You cannot make a connection without a type')\n\n      const read = get(connections, `${[key]}.read`, null)\n      const write = get(connections, `${[key]}.write`, null)\n\n      if (!read && !write) throw new Error('You must specify a read or a write option')\n\n      const data = get(connections, `[${key}].data`, {})\n\n      const existingEdgeIndex = node.edges.findIndex(edge => edge.id === key)\n\n      if (existingEdgeIndex >= 0) {\n        node.edges[existingEdgeIndex] = {\n          id: info.key,\n          data: {\n            ...data,\n            read,\n            write,\n            type: {\n              id: type.key,\n              label: type.text\n            }\n          }\n        }\n      } else {\n        node.edges.push({\n          id: info.key,\n          data: {\n            ...data,\n            read,\n            write,\n            type: {\n              id: type.key,\n              label: type.text\n            }\n          }\n        })\n      }\n    })\n    return node\n  }\n\n  const makeEdges = async (node) => {\n    const edges = get(node, 'edges', [])\n    const previousEdges = get(node, 'previousEdges', [])\n\n    if (edges.length <= 0) return\n\n    for (let i = 0; i < edges.length; i++) {\n      const edge = edges[i]\n\n      const read = get(edge, 'data.read')\n      const write = get(edge, 'data.write')\n\n      const node1 = {\n        id: get(node, 'id')\n      }\n      const node2 = {\n        id: get(edge, 'id')\n      }\n\n      const prevEdge = previousEdges.find(({ id }) => id === edge.id)\n\n      const prev = {\n        read: get(prevEdge, `data.read`, read),\n        write: get(prevEdge, `data.write`, write)\n      }\n\n      if (prev.read && !read) {\n        await removeDirectedEdge(node2, node1)\n      }\n\n      if (prev.write && !write) {\n        await removeDirectedEdge(node1, node2)\n      }\n\n      if (read && write) {\n        await addEdge(node1, node2, get(edge, 'data'))\n      } else if (read) {\n        await addDirectedEdge(node2, node1, get(edge, 'data'))\n      } else if (write) {\n        await addDirectedEdge(node1, node2, get(edge, 'data'))\n      }\n    }\n\n    const cleanup = differenceby(previousEdges, node.edges, 'id')\n\n    if (cleanup.length >= 0) {\n      for (let i = 0; i < cleanup.length; i++) {\n        const edge = cleanup[i]\n\n        const read = get(edge, 'data.read')\n        const write = get(edge, 'data.write')\n\n        const node1 = {\n          id: get(node, 'id')\n        }\n        const node2 = {\n          id: get(edge, 'id')\n        }\n\n        if (read && write) {\n          await removeEdge(node1, node2)\n        } else if (read) {\n          await removeDirectedEdge(node2, node1)\n        } else if (write) {\n          await removeDirectedEdge(node1, node2)\n        }\n      }\n    }\n  }\n\n  return {\n    getNodes,\n    getEdges,\n    addNode,\n    removeEdge,\n    removeDirectedEdge,\n    updateNodePosition,\n    getNodesArray,\n    makeNode\n  }\n}\n\nexport const Graph = _Graph()\n","import { Network as VisNetwork, DataSet } from 'vis-network'\nimport { Graph } from './Graph'\n\nconst _Network = () => {\n  let _nodes = []\n  let _edges = []\n  let _options = {}\n  let _container = null\n  let _network = null\n\n  const inContainer = element => {\n    _container = element\n    return builder\n  }\n\n  const withNodes = nodes => {\n    _nodes = nodes\n    return builder\n  }\n\n  const withEdges = edges => {\n    _edges = edges\n    return builder\n  }\n\n  const withOptions = options => {\n    _options = options\n    return builder\n  }\n\n  const makeData = () => {\n    return {\n      nodes: new DataSet(_nodes),\n      edges: new DataSet(_edges)\n    }\n  }\n\n  const build = () => {\n    if (!_network) {\n      _network = new VisNetwork(_container, makeData(), _options)\n      _network.once('afterDrawing', function () {\n        _network.fit({\n          animation: {\n            duration: 600,\n            easingFunction: 'easeInOutQuad'\n          }\n        })\n      })\n    }\n    return {\n      network: _network,\n      setData: ({ nodes, edges }) => {\n        _nodes = nodes\n        _edges = edges\n        _network.setData(makeData())\n      },\n      updateNodePosition: Graph.updateNodePosition,\n      getNodes: () => _nodes,\n      getEdges: () => _edges\n    }\n  }\n\n  const builder = {\n    withEdges,\n    withNodes,\n    withOptions,\n    inContainer,\n    build\n  }\n\n  return builder\n}\n\nexport const Network = _Network()\n","import { useEffect } from 'react'\nimport { Subject } from '../util/Subject'\n\nexport const useEvent = (event, handler) => {\n  useEffect(() => {\n    if (typeof handler !== 'function') return\n    Subject.subscribe(event, handler)\n    return () => Subject.unsubscribe(event, handler)\n  }, [event, handler])\n\n  return value => Subject.next(event, value)\n}\n","import React, { useReducer, useEffect, useCallback, useState, useRef } from 'react'\nimport { Legend } from '../Legend'\nimport { Network, Graph, Subject } from '../../util'\nimport { useEvent } from '../../hooks'\nimport get from 'lodash.get'\n\nconst systemsReducer = (state, action) => {\n  switch (action.type) {\n    case 'update':\n      const nodes = action.nodes\n      const edges = action.edges\n      return buildGraphData(nodes, edges)\n    default:\n      return state\n  }\n}\n\nconst getLinkColor = (type) => {\n  switch (type) {\n    case 'custom':\n      return '#005481'\n    case 'builtin':\n      return '#9e6614'\n    default:\n      return '#A0A0A0'\n  }\n}\n\nconst getShape = (type) => {\n  switch (type) {\n    case 'cloud':\n      // Cloud shape\n      return { shape: 'icon', shapeProperties: { size: 25 }, icon: { face: 'Ionicons', code: '\\uf2c9', color: '#FFF' } }\n    case 'external':\n      return { shape: 'icon', shapeProperties: { size: 25 }, icon: { face: 'Ionicons', code: '\\uf381', color: '#FFF' } }\n    case 'oncampus':\n    default:\n      // Square Shape\n      return { shape: 'icon', shapeProperties: { size: 25 }, icon: { face: 'Ionicons', code: '\\uf384', color: '#FFF' } }\n  }\n}\n\nconst getArrowDirection = (edge) => {\n  const read = get(edge, 'data.read')\n  const write = get(edge, 'data.write')\n\n  if (read && write) return 'from, to'\n  return 'to'\n}\n\nconst buildGraphData = (nodes, edges) => {\n  const graphData = {\n    nodes: [],\n    edges: []\n  }\n\n  const nodeKeys = Object.keys(nodes || {})\n  nodeKeys.forEach(key => {\n    const node = nodes[key]\n\n    graphData.nodes.push({\n      id: node.id,\n      type: node.data.type,\n      ...getShape(node.data.type),\n      label: node.data.name,\n      edges: node.edges,\n      font: {\n        color: '#363534',\n        strokeWidth: 2,\n        strokeColor: '#FFFFFF'\n      },\n      shadow: {\n        enabled: true,\n        size: 4,\n        x: 1,\n        y: 1\n      },\n      data: {\n        ...node.data\n      },\n      color: '#FFFFFF',\n      x: get(node, 'position.x'),\n      y: get(node, 'position.y')\n    })\n  })\n\n  const edgeKeys = Object.keys(edges || {})\n  edgeKeys.forEach(nodeId => {\n    const edgeList = edges[nodeId]\n\n    edgeList.forEach(edge => {\n      graphData.edges.push({\n        from: nodeId,\n        to: edge.node,\n        smooth: {\n          enabled: true,\n          type: 'cubizBezier',\n          roundness: 0.15\n        },\n        color: {\n          color: getLinkColor(get(edge, 'data.type.id')),\n          hover: '#501214',\n          highlight: '#501214'\n        },\n        dashes: get(edge, 'data.type.id') === 'custom',\n        type: get(edge, 'data.type', {}),\n        arrows: getArrowDirection(edge, nodeId)\n      })\n    })\n  })\n\n  return graphData\n}\n\nexport const SystemsGraph = () => {\n  const [systems, systemsDispatch] = useReducer(systemsReducer, { nodes: [], edges: [] })\n  const [activeNode, setActiveNode] = useState()\n  const [lastAdded, setLastAdded] = useState()\n\n  const graphContainer = useRef()\n  const graph = useRef()\n\n  const updateGraph = async () => {\n    const nodes = await Graph.getNodes()\n    const edges = await Graph.getEdges()\n    systemsDispatch({ type: 'update', nodes, edges })\n  }\n\n  const updateSearchResults = (results) => {\n    if (graph.current.network) {\n      if (results.length <= 0) {\n        const selected = graph.current.network.getSelectedNodes()\n        graph.current.network.unselectAll()\n\n        // Were there nodes selected? Zoom back out.\n        if (selected.length > 0) {\n          graph.current.network.fit({\n            animation: {\n              duration: 300,\n              easingFunction: 'easeInOutQuad'\n            }\n          })\n        }\n        return\n      }\n      graph.current.network.selectNodes(results)\n      graph.current.network.fit({\n        nodes: results,\n        animation: {\n          duration: 300,\n          easingFunction: 'easeInOutQuad'\n        }\n      })\n    }\n  }\n\n  useEffect(() => {\n    updateGraph()\n    window.addEventListener('keydown', event => {\n      if (event.ctrlKey && event.keyCode === 70) {\n        event.preventDefault()\n        Subject.next('focus-search-bar')\n      }\n    })\n  }, [])\n\n  const resetActiveNode = () => setActiveNode(null)\n  const displayNodeDetails = useEvent('display-node-details')\n  useEvent('node-search-result', updateSearchResults)\n\n  const handleNodeSelect = useCallback(params => {\n    const node = get(params, `nodes[0]`, null)\n    if (params.nodes.length > 1) return\n\n    if (node) {\n      if (!graph.current.network.isCluster(node)) {\n        const matchingNode = systems.nodes.find(({ id }) => id === node)\n        if (matchingNode) {\n          setActiveNode(matchingNode)\n        }\n      }\n    }\n  }, [systems.nodes])\n\n  const handleNodeClick = useCallback(params => {\n    const node = graph.current.network.getNodeAt(params.pointer.DOM)\n    if (node) {\n      if (params.nodes.includes(node)) {\n        if (!graph.current.network.isCluster(node)) {\n          const matchingNode = systems.nodes.find(({ id }) => id === node)\n          if (matchingNode) {\n            setActiveNode(matchingNode)\n          }\n        }\n      }\n    }\n  }, [systems.nodes])\n\n  useEffect(() => {\n    if (activeNode) displayNodeDetails(activeNode)\n  }, [activeNode, displayNodeDetails])\n\n  const updateLastAdded = (node) => {\n    setLastAdded(node)\n  }\n\n  useEvent('save-node-entry', updateGraph)\n  useEvent('deselect-active-node', resetActiveNode)\n  useEvent('node-added', updateLastAdded)\n\n  useEffect(() => {\n    const options = {\n      autoResize: false,\n      interaction: {\n        hover: true,\n        hoverConnectedEdges: true\n      },\n      physics: {\n        enabled: false\n      }\n    }\n\n    if (!graph.current) {\n      const start = new Date()\n      const systemGraph = Network\n        .inContainer(graphContainer.current)\n        .withEdges(systems.edges)\n        .withNodes(systems.nodes)\n        .withOptions(options)\n        .build()\n\n      console.log(`Network Build Time: ${new Date() - start}ms`)\n      graph.current = systemGraph\n\n      graph.current.network.on('selectNode', handleNodeSelect)\n      graph.current.network.on('dragEnd', event => {\n        if (event.nodes.length > 0) {\n          const node = get(event, 'nodes[0]')\n          const { x, y } = get(event, 'pointer.canvas', {})\n          graph.current.updateNodePosition({\n            node,\n            x,\n            y\n          })\n        }\n      })\n\n      document.addEventListener('contextmenu', e => e.preventDefault(), false)\n    } else {\n      graph.current.network.off('selectNode', handleNodeSelect)\n      graph.current.network.on('selectNode', handleNodeSelect)\n      graph.current.network.on('click', handleNodeClick)\n\n      graph.current.setData(systems)\n      if (lastAdded) {\n        graph.current.network.selectNodes([lastAdded])\n        graph.current.network.focus(lastAdded, {\n          scale: 3,\n          animation: {\n            duration: 300,\n            easingFunction: 'easeInOutCubic'\n          }\n        })\n      }\n    }\n  }, [systems, handleNodeClick, lastAdded, handleNodeSelect])\n\n  return (\n    <>\n      <div style={{ overflow: 'hidden', height: 'calc(100% - 44px)' }} ref={graphContainer} id='graph' />\n      <Legend />\n    </>\n  )\n}\n","import dayjs from 'dayjs'\nimport get from 'lodash.get'\nimport { NodeManager } from './NodeManager'\nimport { Subject } from './Subject'\n\nexport const downloadFile = (filename, data) => {\n  const element = document.createElement('a')\n  element.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(data)}`)\n  element.setAttribute('download', `${filename} - ${dayjs().format('YYYY-MM-DD/THHmmss')}.json`)\n\n  element.style.display = 'none'\n  document.body.appendChild(element)\n  element.click()\n  document.body.removeChild(element)\n}\n\nconst handleFile = (event) => {\n  const reader = new FileReader()\n  reader.readAsBinaryString(event.target.files[0])\n\n  reader.onloadend = async () => {\n    const data = JSON.parse(reader.result)\n    const edges = get(data, 'edges', {})\n    const nodes = get(data, 'nodes', {})\n\n    NodeManager.saveUploadedData({ edges, nodes })\n    Subject.next('save-node-entry')\n  }\n}\n\nexport const uploadFile = () => {\n  const element = document.createElement('input')\n  element.setAttribute('type', 'file')\n  element.setAttribute('accept', '.json')\n\n  element.style.display = 'none'\n  element.addEventListener('change', handleFile)\n  element.click()\n}\n","import React, { useEffect } from 'react'\nimport { useEvent } from '../../hooks'\nimport { CommandBar as OfficeCommandBar } from 'office-ui-fabric-react/lib/CommandBar'\nimport { SearchBox } from 'office-ui-fabric-react/lib/SearchBox'\nimport { downloadFile, uploadFile } from '../../util/FileManager'\nimport { Graph, Subject } from '../../util'\nimport debounce from 'lodash.debounce'\nimport get from 'lodash.get'\n\nconst handleSearch = async (event, value) => {\n  const nodes = await Graph.getNodesArray()\n\n  let results = nodes.filter(node => {\n    const name = get(node, 'data.name', '').toLowerCase()\n    return name.includes(value.toLowerCase())\n  }).map(({ id }) => id)\n\n  if (!value) {\n    results = []\n  }\n\n  Subject.next('node-search-result', results)\n}\n\nconst SearchNodes = () => {\n  return (\n    <SearchBox\n      id='search-box-nodes'\n      placeholder='Search'\n      className='searchBox'\n      styles={{\n        root: {\n          width: '250px',\n          alignSelf: 'center'\n        }\n      }}\n      onChange={debounce(handleSearch, 500)}\n    />\n  )\n}\n\nexport const CommandBar = props => {\n  const toggleLeftPanel = useEvent('toggle-left-panel')\n  useEffect(() => {\n    const focusSearch = () => {\n      const searchBox = document.querySelector('#search-box-nodes')\n      searchBox.focus()\n    }\n\n    Subject.subscribe('focus-search-bar', focusSearch)\n  }, [])\n\n  const farItems = [\n    {\n      key: 'search',\n      onRender: SearchNodes\n    }\n  ]\n\n  const nearItems = [\n    {\n      key: 'addNode',\n      name: 'Add System',\n      iconProps: {\n        iconName: 'Add'\n      },\n      onClick: toggleLeftPanel\n    },\n    {\n      key: 'upload',\n      name: 'Upload',\n      iconProps: {\n        iconName: 'Upload'\n      },\n      onClick: () => {\n        uploadFile()\n      }\n    },\n    {\n      key: 'download',\n      name: 'Download',\n      iconProps: {\n        iconName: 'Download'\n      },\n      onClick: async () => {\n        const edges = await Graph.getEdges()\n        const nodes = await Graph.getNodesObject()\n\n        const filename = 'TR_Systems'\n        downloadFile(filename, JSON.stringify({ edges, nodes }, null, 2))\n      }\n    }\n  ]\n\n  return (\n    <div>\n      <OfficeCommandBar\n        items={nearItems}\n        farItems={farItems}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox'\n\nconst canChange = (nextPath, nextValue) => (currentRead, currentWrite) => {\n  if (nextPath === 'read') {\n    return nextValue || currentWrite || false\n  }\n\n  if (nextPath === 'write') {\n    return nextValue || currentRead || false\n  }\n  return false\n}\n\nexport const ConnectionReadWrite = props => {\n  const { read, write, onChange } = props\n\n  return (\n    <Stack style={{ marginRight: 8, marginTop: 8 }} verticalAlign='space-between' tokens={{ childrenGap: 4 }}>\n      <Checkbox checked={read} onChange={(event, value) => {\n        if (canChange('read', value)(read, write)) {\n          onChange('read', value)\n        }\n      }} label='Read' />\n      <Checkbox checked={write} onChange={(event, value) => {\n        if (canChange('write', value)(read, write)) {\n          onChange('write', value)\n        }\n      }} label='Write' />\n    </Stack>\n  )\n}\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown'\nimport { ConnectionReadWrite } from './ConnectionReadWrite'\nimport get from 'lodash.get'\nimport { IconButton } from 'office-ui-fabric-react'\n\nconst ConnectionContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  justify-content: flex-start;\n  padding: 8px;\n  margin-top: 12px;\n  border: 1px solid rgb(138, 136, 134);\n  box-sizing: border-box;\n  border-radius: 1px;\n\n  & > .ms-Dropdown-container {\n    flex: 1;\n    width: 100%;\n    margin-right: 4px;\n  }\n\n  & > .ms-Button--icon {\n    align-self: flex-end;\n  }\n`\n\nexport const Connection = props => {\n  const { handleRemove, id, edit, addNodeForm, nodeFormErrors, setNodeFormErrors, existingSystems, updateNodeForm } = props\n  const selectedTarget = get(addNodeForm, `connections[${id}].connectedTo.key`, null)\n  const selectedType = get(addNodeForm, `connections[${id}].connectionType.key`, null)\n\n  const selectedRead = get(addNodeForm, `connections[${id}].read`, true)\n  const selectedWrite = get(addNodeForm, `connections[${id}].write`, false)\n\n  const targetError = get(nodeFormErrors, `[${id}].target`)\n  const typeError = get(nodeFormErrors, `[${id}].type`)\n\n  useEffect(() => {\n    if (!edit) {\n      updateNodeForm({\n        path: `connections[${id}].read`,\n        value: true\n      })\n    }\n  }, [updateNodeForm, id, edit])\n\n  return (\n    <ConnectionContainer>\n      <IconButton\n        iconProps={{ iconName: 'ChromeClose' }}\n        onClick={() => {\n          const connection = get(addNodeForm, `connections[${id}]`, null)\n          if (connection) {\n            updateNodeForm({\n              path: `connections[${id}]`,\n              type: 'remove'\n            })\n          }\n          handleRemove()\n        }}\n      />\n      <Dropdown\n        label='Connected To'\n        placeholder={`What does this system connect to?`}\n        options={existingSystems}\n        errorMessage={targetError}\n        selectedKey={selectedTarget}\n        onChange={(event, value) => {\n          updateNodeForm({\n            path: `connections[${id}].connectedTo`,\n            value: { key: value.key, text: value.text }\n          })\n          if (`${id}` in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors[id]\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <Dropdown\n        label='Interface'\n        options={[\n          { key: 'builtin', text: 'Built In' },\n          { key: 'custom', text: 'Custom' }\n        ]}\n        placeholder='How does this system connect?'\n        selectedKey={selectedType}\n        errorMessage={typeError}\n        onChange={(event, value) => {\n          updateNodeForm({\n            path: `connections[${id}].connectionType`,\n            value: { key: value.key, text: value.text, color: value.color }\n          })\n          if (`${id}` in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors[id]\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <ConnectionReadWrite\n        read={selectedRead}\n        write={selectedWrite}\n        onChange={(path, value) => {\n          updateNodeForm({\n            path: `connections[${id}].${path}`,\n            value\n          })\n        }}\n      />\n    </ConnectionContainer>\n  )\n}\n","import React from 'react'\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown'\n\nconst areEqual = (prevProps, nextProps) => {\n  const keysUnchanged = prevProps.selectedKey === nextProps.selectedKey\n  const errorUnchanged = prevProps.errorMessage === nextProps.errorMessage\n  return keysUnchanged && errorUnchanged\n}\n\nexport const SystemType = React.memo(props => {\n  const { selectedKey, onChange, required, errorMessage } = props\n\n  return (\n    <Dropdown\n      required={required}\n      label='System Type'\n      options={[\n        { key: 'oncampus', text: 'On Campus' },\n        { key: 'cloud', text: 'Cloud' },\n        { key: 'external', text: 'External' }\n      ]}\n      errorMessage={errorMessage}\n      placeholder='Where does this system live?'\n      selectedKey={selectedKey}\n      onChange={onChange}\n    />\n  )\n}, areEqual)\n","import React from 'react'\nimport { TextField } from 'office-ui-fabric-react/lib/TextField'\nimport { ActionButton } from 'office-ui-fabric-react'\nimport { SystemType } from './SystemType'\n\nconst renderConnections = ({ connections, existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors }) => {\n  return connections.map(conn => React.cloneElement(conn, { existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors }))\n}\n\nconst checkURL = url => {\n  if (!url) return\n  try {\n    const checkedURL = new URL(url)\n    if (checkedURL) return ''\n  } catch (err) {\n    return err.message\n  }\n}\n\nexport const SystemFormView = props => {\n  const {\n    nodeFormErrors,\n    existingSystems,\n    setNodeFormErrors,\n    addNodeForm,\n    updateNodeForm,\n    connections,\n    addConnection,\n    edit\n  } = props\n  return (\n    <>\n      <TextField\n        label='Name'\n        placeholder='Choose a name'\n        errorMessage={nodeFormErrors.name}\n        required\n        onGetErrorMessage={(value => {\n          const newSystem = String(value).toLowerCase()\n          const nameExists = existingSystems.some(({ text }) => String(text).toLowerCase() === newSystem)\n          if (nameExists && !edit) {\n            setNodeFormErrors({\n              ...nodeFormErrors,\n              name: `The ${value} system already exists`\n            })\n          } else {\n            if (nodeFormErrors.name) {\n              const errors = {\n                ...nodeFormErrors\n              }\n              delete errors.name\n              setNodeFormErrors(errors)\n            }\n          }\n        })}\n        onChange={(event, value) => updateNodeForm({ path: 'name', value })}\n        value={addNodeForm.name || ''}\n      />\n      <SystemType\n        required\n        errorMessage={nodeFormErrors.type}\n        selectedKey={addNodeForm.type || null}\n        onChange={(event, value) => {\n          updateNodeForm({ path: 'type', value: value.key })\n          if ('type' in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors.type\n            setNodeFormErrors(errors)\n          }\n        }}\n      />\n      <TextField\n        label='Department'\n        placeholder='Was this built for another department?'\n        onChange={(event, value) => updateNodeForm({ path: 'department', value })}\n        value={addNodeForm.department || ''}\n      />\n      <TextField\n        label='URL'\n        placeholder='Is there a url to access this system?'\n        errorMessage={nodeFormErrors.url}\n        onChange={(event, value) => {\n          updateNodeForm({ path: 'url', value })\n          if ('url' in nodeFormErrors) {\n            const errors = {\n              ...nodeFormErrors\n            }\n            delete errors.url\n            setNodeFormErrors(errors)\n          }\n        }}\n        onGetErrorMessage={value => {\n          if (!value) return\n          return checkURL(value)\n        }}\n        value={addNodeForm.url || ''}\n      />\n      <TextField\n        label='Description'\n        placeholder='Enter some information others may want to know about this system'\n        multiline\n        rows={4}\n        onChange={(event, value) => updateNodeForm({ path: 'description', value })}\n        value={addNodeForm.description || ''}\n      />\n      {renderConnections({ connections, existingSystems, addNodeForm, updateNodeForm, setNodeFormErrors, nodeFormErrors })}\n      <ActionButton\n        onClick={addConnection}\n        iconProps={{ iconName: 'Add' }}\n      >\n        Add Connection\n      </ActionButton>\n    </>\n  )\n}\n","import React, { useState, useReducer } from 'react'\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel'\nimport { NodeManager, Graph } from '../../util'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { PrimaryButton, DefaultButton } from 'office-ui-fabric-react'\nimport { useEvent } from '../../hooks'\nimport get from 'lodash.get'\nimport uuid from 'uuid/v4'\nimport set from 'lodash.set'\nimport unset from 'lodash.unset'\nimport { Connection } from './Connection'\nimport { Network } from '../../util/Network'\nimport { SystemFormView } from './SystemFormView'\n\nconst makeConnections = (system, nodes) => {\n  const connections = {}\n  system.edges.forEach(edge => {\n    connections[edge.id] = {\n      read: edge.data.read,\n      write: edge.data.write,\n      connectionType: {\n        key: edge.data.type.id,\n        text: edge.data.type.label\n      },\n      connectedTo: {\n        key: edge.id,\n        text: get(nodes.filter(node => node.id === edge.id), '[0].data.name', '')\n      }\n    }\n  })\n  return connections\n}\n\nconst checkURL = url => {\n  if (!url) return\n  try {\n    const checkedURL = new URL(url)\n    if (checkedURL) return null\n  } catch (err) {\n    return err.message\n  }\n}\n\nconst makeFormState = system => {\n  const { network, getNodes } = Network.build()\n  const nodes = network.getConnectedNodes(system.id)\n\n  const connectedNodes = getNodes().filter(({ id }) => nodes.includes(id))\n\n  const formState = {\n    name: get(system, 'data.name'),\n    id: get(system, 'id'),\n    type: get(system, 'data.type'),\n    department: get(system, 'data.department'),\n    url: get(system, 'data.url'),\n    description: get(system, 'data.description'),\n    connections: makeConnections(system, connectedNodes)\n  }\n  return formState\n}\n\nconst addNodeReducer = (state, action) => {\n  if (action.path === '') return {}\n  const addNodeState = { ...state }\n  switch (action.type) {\n    case 'remove':\n      unset(addNodeState, action.path)\n      return addNodeState\n    case 'edit':\n      return { ...action.formState }\n    default:\n      set(addNodeState, action.path, action.value)\n      return addNodeState\n  }\n}\n\nconst connectionReducer = (connections, action) => {\n  switch (action.type) {\n    case 'add':\n      const id = uuid()\n      return [\n        ...connections,\n        <Connection\n          key={id}\n          id={id}\n          handleRemove={() => action.dispatch({ type: 'remove', id })}\n        />\n      ]\n    case 'remove':\n      return connections.filter(({ key }) => key !== action.id)\n    case 'reset':\n      return []\n    case 'edit':\n      const connKeys = Object.keys(action.connections)\n      return connKeys.map(key => {\n        const id = key\n        const dispatch = get(action, 'dispatch', null)\n\n        if (!dispatch || !id) return null\n\n        return (\n          <Connection\n            edit\n            key={id}\n            id={id}\n            handleRemove={() => dispatch({ type: 'remove', id })}\n          />\n        )\n      }).filter(item => item)\n    default:\n      return connections\n  }\n}\n\nconst getSystems = () => {\n  const nodes = NodeManager.getNodes()\n  return nodes.map(node => ({ key: node.id, text: node.data.name })).sort((a, b) => {\n    if (a.text < b.text) return -1\n    if (a.text > b.text) return 1\n    return 0\n  })\n}\n\nconst validate = (addNodeForm, nodeFormErrors) => {\n  let errors = {}\n  if (nodeFormErrors) {\n    errors = {\n      ...nodeFormErrors\n    }\n  }\n\n  if (!addNodeForm.type) {\n    errors.type = 'A system type must be selected'\n  }\n\n  if (!addNodeForm.name) {\n    errors.name = 'A system name is required'\n  }\n\n  if (addNodeForm.url) {\n    const error = checkURL(addNodeForm.url)\n    console.log(errors)\n    if (error) errors.url = error\n  }\n\n  if (addNodeForm.connections) {\n    const keys = Object.keys(addNodeForm.connections || {})\n    keys.forEach(key => {\n      const target = get(addNodeForm, `connections[${key}].connectedTo.key`, null)\n      const type = get(addNodeForm, `connections[${key}].connectionType.key`, null)\n\n      if (!type) set(errors, `[${key}].type`, 'The connection must have a type selected')\n      if (!target) set(errors, `[${key}].target`, 'You must select another system to connect to')\n    })\n  }\n\n  return errors\n}\n\nexport const SystemForm = (props) => {\n  const [edit, setEdit] = useState(false)\n  const [isOpen, setIsOpen] = useState(false)\n  const [addNodeForm, updateNodeForm] = useReducer(addNodeReducer, {})\n  const [existingSystems, setExistingSystems] = useState(getSystems())\n  const [nodeFormErrors, setNodeFormErrors] = useState({})\n  const [connections, connDispatch] = useReducer(connectionReducer, [])\n\n  const toggle = () => setIsOpen(!isOpen)\n  const resetForm = () => updateNodeForm({ path: '', value: {} })\n  const resetConnections = () => connDispatch({ type: 'reset' })\n\n  const handleEditSystem = (system) => {\n    const formState = makeFormState(system)\n    connDispatch({\n      type: 'edit',\n      connections: formState.connections || {},\n      dispatch: connDispatch\n    })\n    updateNodeForm({ type: 'edit', formState })\n    setEdit(true)\n    setIsOpen(true)\n  }\n\n  useEvent('edit-system-panel', handleEditSystem)\n\n  const addConnection = () => {\n    connDispatch({\n      type: 'add',\n      dispatch: connDispatch,\n      existingSystems,\n      addNodeForm,\n      updateNodeForm\n    })\n  }\n\n  const submitSystem = async () => {\n    const errors = validate(addNodeForm, nodeFormErrors)\n    if (Object.keys(errors).length > 0) {\n      setNodeFormErrors({\n        ...nodeFormErrors,\n        ...errors\n      })\n      return\n    }\n\n    const connections = get(addNodeForm, 'connections', {})\n    const data = {\n      description: get(addNodeForm, 'description', ''),\n      name: get(addNodeForm, 'name', ''),\n      type: get(addNodeForm, 'type', ''),\n      url: get(addNodeForm, 'url', ''),\n      department: get(addNodeForm, 'department', '')\n    }\n\n    let id = null\n    if (edit) {\n      const node = await Graph.makeNode({ id: addNodeForm.id, connections, data })\n      id = addNodeForm.id\n      await Graph.addNode(node)\n    } else {\n      const node = await Graph.makeNode({ connections, data })\n      id = node.id\n      await Graph.addNode(node)\n    }\n\n    broadcastNodeSave()\n    nodeAdded(id)\n    resetConnections()\n    resetForm()\n    if (edit) {\n      dismiss()\n    }\n  }\n\n  useEvent('toggle-left-panel', toggle)\n  const dismiss = () => {\n    resetForm()\n    resetConnections()\n    setIsOpen(false)\n    setEdit(false)\n  }\n\n  const updateExistingSystems = () => {\n    const systems = getSystems()\n    setExistingSystems(systems)\n  }\n\n  const broadcastNodeSave = useEvent('save-node-entry', updateExistingSystems)\n  const nodeAdded = useEvent('node-added')\n\n  return (\n    <Panel\n      headerText={`${edit ? 'Edit' : 'Add'} System`}\n      isOpen={isOpen}\n      onDismiss={dismiss}\n      isFooterAtBottom\n      onRenderFooterContent={() => (\n        <Stack horizontal horizontalAlign='space-between' tokens={{ childrenGap: 12 }}>\n          <DefaultButton text='Cancel' onClick={dismiss} />\n          <PrimaryButton text='Save System' onClick={submitSystem} />\n        </Stack>\n      )}\n      type={PanelType.medium}\n    >\n      <SystemFormView\n        edit={edit}\n        existingSystems={existingSystems}\n        nodeFormErrors={nodeFormErrors}\n        setNodeFormErrors={setNodeFormErrors}\n        addNodeForm={addNodeForm}\n        updateNodeForm={updateNodeForm}\n        connections={connections}\n        addConnection={addConnection}\n      />\n    </Panel>\n  )\n}\n","import React from 'react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Text } from 'office-ui-fabric-react/lib/Text'\n\nconst NodeDetailView = props => {\n  const { description, department, url, connections } = props\n  return (\n    <Stack tokens={{ childrenGap: 8 }}>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Description</Text>\n        <Text>{description}</Text>\n      </Stack>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Department</Text>\n        <Text>{department}</Text>\n      </Stack>\n      <Stack tokens={{ childrenGap: 4 }}>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>URL</Text>\n        <a href={url} target='_blank' rel='noopener noreferrer'>{url}</a>\n      </Stack>\n      <Stack>\n        <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Connections</Text>\n        {connections}\n      </Stack>\n    </Stack>\n  )\n}\n\nexport default NodeDetailView\n","import React, { useState } from 'react'\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel'\nimport { IconButton } from 'office-ui-fabric-react'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Text } from 'office-ui-fabric-react/lib/Text'\nimport styled from 'styled-components'\nimport get from 'lodash.get'\nimport { useEvent } from '../../hooks'\nimport { NodeManager } from '../../util'\nimport NodeDetailView from './NodeDetailView'\n\nconst CustomPanel = styled(Panel)`\n  & > .ms-Panel-main {\n    transition: width 300ms ease-in-out;\n  }\n`\nconst parseConnections = (node) => {\n  if (!node) return []\n  const edges = NodeManager.getEdges()\n  const nodes = NodeManager.getNodesObject()\n\n  const edgeKeys = Object.keys(edges || {})\n  return edgeKeys.reduce((acc, cur) => {\n    const nodeEdges = edges[cur]\n    nodeEdges\n      .filter(edge => edge.node === node.id)\n      .forEach(edge => {\n        const to = get(nodes, `[${cur}].data.name`)\n\n        const type = get(edge, 'data.type.label')\n        const read = get(edge, 'data.read')\n        const write = get(edge, 'data.write')\n\n        acc.push(<Connection key={edge.node} to={to} read={read} write={write} type={type} />)\n      })\n    return acc\n  }, [])\n}\n\nconst Connection = ({ to, type, read, write }) => {\n  let readWriteStatus = ''\n  if (read && write) {\n    readWriteStatus = '(Read and Write)'\n  } else if (read) {\n    readWriteStatus = '(Read)'\n  } else if (write) {\n    readWriteStatus = '(Write)'\n  }\n  return (\n    <Text>{to} - {type} {readWriteStatus}</Text>\n  )\n}\n\nexport const NodeDetail = props => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [node, setNode] = useState(null)\n  const displayNode = (node) => {\n    setNode(node)\n    setIsOpen(true)\n  }\n  const closePanel = () => setIsOpen(false)\n\n  useEvent('display-node-details', displayNode)\n  const editSystem = useEvent('edit-system-panel')\n  const deselectActiveNode = useEvent('deselect-active-node')\n  const name = get(node, 'data.name', 'Very Unnamed System')\n  const description = get(node, 'data.description', 'No description has been entered.')\n  const department = get(node, 'data.department', 'No department has been entered.')\n  const url = get(node, 'data.url', `${name} has no url`)\n\n  const connections = parseConnections(node)\n  const handleEdit = () => {\n    editSystem(node)\n    setIsOpen(false)\n    deselectActiveNode()\n  }\n\n  return (\n    <CustomPanel\n      isOpen={isOpen}\n      onDismiss={() => {\n        deselectActiveNode()\n        closePanel()\n      }}\n      onRenderHeader={(props) => {\n        return (\n          <Stack horizontal tokens={{ childrenGap: 12 }}>\n            <Text variant='xLarge' style={{ marginLeft: 16, marginBottom: 12 }}>{props.headerText}</Text>\n            <IconButton\n              iconProps={{\n                iconName: 'Edit'\n              }}\n              onClick={handleEdit}\n            />\n          </Stack>\n        )\n      }}\n      isLightDismiss\n      type={PanelType.customNear}\n      customWidth={400}\n      headerText={name}\n    >\n      <NodeDetailView\n        connections={connections}\n        department={department}\n        description={description}\n        url={url}\n      />\n    </CustomPanel>\n  )\n}\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\n\nconst cubeMove = keyframes`\n    25% { \n      transform: translateX(42px) rotate(-90deg) scale(0.5);\n      -webkit-transform: translateX(42px) rotate(-90deg) scale(0.5);\n    } 50% { \n      transform: translateX(42px) translateY(42px) rotate(-179deg);\n      -webkit-transform: translateX(42px) translateY(42px) rotate(-179deg);\n    } 50.1% { \n      transform: translateX(42px) translateY(42px) rotate(-180deg);\n      -webkit-transform: translateX(42px) translateY(42px) rotate(-180deg);\n    } 75% { \n      transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\n      -webkit-transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\n    } 100% { \n      transform: rotate(-360deg);\n      -webkit-transform: rotate(-360deg);\n    }\n`\n\nconst Spinner = styled.div`\n  margin: 100px auto;\n  width: 40px;\n  height: 40px;\n  align-self: center;\n  justify-self: center;\n  position: relative;\n`\n\nconst cubeCSS = css`\n  background-color: #501214;\n  width: 15px;\n  height: 15px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  \n  -webkit-animation: ${cubeMove} 1.8s infinite ease-in-out;\n  animation: ${cubeMove} 1.8s infinite ease-in-out;\n`\n\nconst CubeOne = styled.div`\n  ${cubeCSS}\n`\nconst CubeTwo = styled.div`\n  ${cubeCSS}\n  animation-delay: -0.9s;\n`\n\nexport const Loading = props => {\n  return (\n    <Spinner>\n      <CubeOne />\n      <CubeTwo />\n    </Spinner>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { SystemsGraph, NodeDetail, SystemForm, CommandBar } from './components'\n\nconst Page = styled.div`\n  background-color: #e8e3db;\n  flex: 1;\n  flex-direction: column;\n  display: flex;\n`\n\nfunction App () {\n  return (\n    <Page>\n      <CommandBar />\n      <SystemsGraph />\n      <SystemForm />\n      <NodeDetail />\n    </Page>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons'\nimport App from './App'\nimport './index.css'\n\ninitializeIcons()\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  render(<App />, document.getElementById('root'))\n})\n"],"sourceRoot":""}