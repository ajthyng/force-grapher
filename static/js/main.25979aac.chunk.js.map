{"version":3,"sources":["util/Subject.js","util/NodeManager.js","hooks/useEvent.js","components/SystemsGraph/SystemsGraph.js","components/CommandBar/CommandBar.js","components/AddNodeForm/AddNodeForm.js","components/NodeDetail/NodeDetail.js","App.js","index.js"],"names":["_handlers","Subject","subscribe","event","handler","push","unsubscribe","filter","func","next","_len","arguments","length","args","Array","_key","forEach","apply","Object","freeze","NodeManager","_get","key","defaultValue","JSON","parse","localStorage","getItem","addNode","node","value","nodes","setItem","stringify","getNodes","_NodeManager","useEvent","useEffect","systemsReducer","state","action","type","buildGraphData","getLinkColor","isArray","map","objectSpread","id","name","color","links","reduce","keys","get","info","concat","source","target","SystemsGraph","props","_useReducer","useReducer","_useReducer2","slicedToArray","systems","systemsDispatch","_useState","useState","_useState2","activeNode","setActiveNode","systemsGraph","useRef","displayNodeDetails","current","d3Force","strength","zoom","react_default","a","createElement","react_force_graph_2d_module","ref","graphData","linkDirectionalArrowLength","linkDirectionalArrowRelPos","linkCurvature","nodeVal","onNodeClick","linkAutoColorBy","link","console","log","nodeCanvasObject","ctx","globalScale","isActive","label","fontSize","font","textWidth","measureText","width","innerSquareDimensions","n","outerSquareDimensions","fillStyle","fillRect","x","y","toConsumableArray","textAlign","textBaseline","fillText","CommandBar","items","iconProps","iconName","onClick","CommandBar_CommandBar","addNodeReducer","path","addNodeState","set","connectionReducer","uuid","connections","AddNodeForm_Connection","addNodeForm","updateNodeForm","handleRemove","dispatch","_ref","ConnectionContainer","styled","div","_templateObject","Connection","existingSystems","Dropdown","options","onChange","text","IconButton","getSystems","AddNodeForm","isOpen","setIsOpen","_useState3","_useState4","setExistingSystems","connDispatch","resetForm","resetConnections","_useReducer3","_useReducer4","broadcastNodeSave","Panel","headerText","onDismiss","PanelType","medium","TextField","multiline","rows","description","conn","React","cloneElement","ActionButton","Stack","horizontal","horizontalAlign","tokens","childrenGap","DefaultButton","PrimaryButton","toLowerCase","pullNodeConnections","acc","cur","to","NodeDetail_Connection","Text","NodeDetail","setNode","deselectActiveNode","connectionsFromThisNode","connectionsToThisNode","parseConnections","isLightDismiss","customNear","customWidth","style","textDecoration","variant","Page","App_templateObject","App","CommandBar_CommandBar_CommandBar","AddNodeForm_AddNodeForm","NodeDetail_NodeDetail","SystemsGraph_SystemsGraph","initializeIcons","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.25979aac.chunk.js","sourcesContent":["const _handlers = {}\n\nexport const Subject = {\n  subscribe (event, handler) {\n    if (!_handlers[event]) _handlers[event] = []\n    _handlers[event].push(handler)\n  },\n  unsubscribe (event, handler) {\n    if (!_handlers[event]) return\n    _handlers[event] = _handlers[event].filter(func => func !== handler)\n  },\n  next (event, ...args) {\n    if (!_handlers[event]) return\n    _handlers[event].forEach(handler => {\n      if (typeof handler === 'function') {\n        handler(...args)\n      }\n    })\n  }\n}\n\nObject.freeze(Subject)\n","const _NodeManager = () => {\n  const _get = (key, defaultValue) => JSON.parse(localStorage.getItem(key)) || defaultValue\n  const _set = (key, value) => localStorage.setItem(key, JSON.stringify(value))\n\n  const addNode = node => {\n    const nodes = _get('nodes', [])\n    nodes.push(node)\n    _set('nodes', nodes)\n  }\n\n  const getNodes = node => {\n    const nodes = _get('nodes', [])\n    return nodes\n  }\n\n  return {\n    addNode,\n    getNodes\n  }\n}\n\nexport const NodeManager = _NodeManager()\n","import { useEffect } from 'react'\nimport { Subject } from '../util/Subject'\n\nexport const useEvent = (event, handler) => {\n  useEffect(() => {\n    if (typeof handler !== 'function') return\n    Subject.subscribe(event, handler)\n    return () => Subject.unsubscribe(event, handler)\n  }, [event, handler])\n\n  return value => Subject.next(event, value)\n}\n","import React, { useReducer, useEffect, useState, useRef } from 'react'\nimport ForceGraph2D from 'react-force-graph-2d'\nimport { NodeManager } from '../../util'\nimport { useEvent } from '../../hooks'\nimport get from 'lodash.get'\n\nconst systemsReducer = (state, action) => {\n  switch (action.type) {\n    case 'update':\n      const nodes = NodeManager.getNodes()\n      return buildGraphData(nodes)\n    default:\n      return state\n  }\n}\n\nconst getLinkColor = (type) => {\n  switch (type.key) {\n    case 'oneway':\n    case 'twoway':\n      return '#A0A0A0'\n    case 'custom':\n      return '#04B080'\n    case 'builtin':\n      return '#303030'\n    default:\n      return '#A0A0A0'\n  }\n}\n\nconst buildGraphData = nodes => {\n  if (!Array.isArray(nodes)) {\n    return {\n      nodes: [],\n      links: []\n    }\n  }\n\n  const graphNodes = nodes.map(node => ({\n    ...node,\n    id: node.key,\n    name: node.name,\n    color: '#303030'\n  }))\n\n  const graphLinks = nodes.reduce((links, node) => {\n    const keys = Object.keys(get(node, 'connections', {}))\n    keys.forEach(key => {\n      const info = get(node, `connections[${key}].connectedTo`, {})\n      const type = get(node, `connections[${key}].connectionType`, {})\n\n      if (info.key && node.key) {\n        links.push({\n          source: node.key,\n          target: info.key,\n          color: getLinkColor(type),\n          type\n        })\n\n        if (type.key === 'twoway') {\n          links.push({\n            source: info.key,\n            target: node.key,\n            color: getLinkColor(type),\n            type\n          })\n        }\n      }\n    })\n    return links\n  }, [])\n\n  return {\n    nodes: graphNodes,\n    links: graphLinks\n  }\n}\n\nexport const SystemsGraph = props => {\n  const [systems, systemsDispatch] = useReducer(systemsReducer, buildGraphData(NodeManager.getNodes()))\n  const [activeNode, setActiveNode] = useState()\n  const systemsGraph = useRef()\n\n  const updateGraph = () => {\n    systemsDispatch({ type: 'update' })\n  }\n  const resetActiveNode = () => setActiveNode(null)\n  const displayNodeDetails = useEvent('display-node-details')\n\n  useEffect(() => {\n    systemsGraph.current.d3Force('charge').strength(-150)\n    systemsGraph.current.zoom(4)\n  }, [systems.links])\n\n  useEffect(() => {\n    if (activeNode) displayNodeDetails(activeNode)\n  }, [activeNode, displayNodeDetails])\n\n  useEvent('save-node-entry', updateGraph)\n  useEvent('deselect-active-node', resetActiveNode)\n\n  return (\n    <ForceGraph2D\n      ref={systemsGraph}\n      graphData={systems}\n      linkDirectionalArrowLength={5}\n      linkDirectionalArrowRelPos={0.5}\n      linkCurvature={0.25}\n      nodeVal={4.5}\n      onNodeClick={node => {\n        if (node.id === get(activeNode, 'id', null)) {\n          setActiveNode(null)\n          return\n        }\n        setActiveNode(node)\n      }}\n      linkAutoColorBy={link => console.log('LINK: ', link)}\n      nodeCanvasObject={(node, ctx, globalScale) => {\n        const isActive = get(activeNode, 'id', null) === node.id\n        const label = node.name\n        const fontSize = 16 / globalScale\n        ctx.font = `${isActive ? 'bold ' : ''}${fontSize}px Sans-Serif`\n        const textWidth = ctx.measureText(label).width\n        const innerSquareDimensions = [textWidth, fontSize].map(n => n + fontSize * 3)\n        const outerSquareDimensions = [textWidth, fontSize].map(n => n + fontSize * (isActive ? 3.4 : 3.2))\n\n        ctx.fillStyle = isActive ? '#005481' : node.color\n        ctx.fillRect(node.x - outerSquareDimensions[0] / 2, node.y - outerSquareDimensions[1] / 2, ...outerSquareDimensions)\n        ctx.fillStyle = 'rgba(255, 255, 255, 1)'\n        ctx.fillRect(node.x - innerSquareDimensions[0] / 2, node.y - innerSquareDimensions[1] / 2, ...innerSquareDimensions)\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n        ctx.fillStyle = isActive ? '#005481' : node.color\n        ctx.fillText(label, node.x, node.y)\n\n        return ctx\n      }}\n    />\n  )\n}\n","import React from 'react'\nimport { useEvent } from '../../hooks'\nimport { CommandBar as OfficeCommandBar } from 'office-ui-fabric-react/lib/CommandBar'\n\nexport const CommandBar = props => {\n  const toggleLeftPanel = useEvent('toggle-left-panel')\n\n  const items = [\n    {\n      key: 'addNode',\n      name: 'Add System',\n      iconProps: {\n        iconName: 'Add'\n      },\n      onClick: toggleLeftPanel\n    }\n  ]\n\n  return (\n    <OfficeCommandBar\n      items={items}\n    />\n  )\n}\n","import React, { useState, useReducer } from 'react'\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel'\nimport { NodeManager } from '../../util'\nimport { TextField } from 'office-ui-fabric-react/lib/TextField'\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { ActionButton, PrimaryButton, DefaultButton, IconButton } from 'office-ui-fabric-react'\nimport { useEvent } from '../../hooks'\nimport get from 'lodash.get'\nimport uuid from 'uuid/v4'\nimport set from 'lodash.set'\nimport styled from 'styled-components'\n\nconst addNodeReducer = (state, action) => {\n  if (action.path === '') return {}\n  const addNodeState = { ...state }\n  set(addNodeState, action.path, action.value)\n  return addNodeState\n}\n\nconst connectionReducer = (state, action) => {\n  switch (action.type) {\n    case 'add':\n      const id = uuid()\n      return {\n        ...state,\n        connections: [\n          ...state.connections,\n          <Connection\n            key={id}\n            id={id}\n            addNodeForm={action.addNodeForm}\n            updateNodeForm={action.updateNodeForm}\n            handleRemove={() => action.dispatch({ type: 'remove', id })}\n          />\n        ]\n      }\n    case 'remove':\n      return {\n        ...state,\n        connections: [\n          ...state.connections.filter(({ key }) => key !== action.id)\n        ]\n      }\n    case 'reset':\n      return {\n        connections: []\n      }\n    default:\n      return state\n  }\n}\n\nconst ConnectionContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  & > .ms-Dropdown-container {\n    flex: 1;\n    margin-right: 4px;\n  }\n\n  & > .ms-Button--icon {\n    align-self: flex-end;\n  }\n`\n\nconst Connection = props => {\n  const { handleRemove, id, addNodeForm, existingSystems, updateNodeForm } = props\n  const updateSystemsList = () => console.log('update')\n  useEvent('save-node-entry', updateSystemsList)\n  return (\n    <ConnectionContainer>\n      <Dropdown\n        label='Connected To'\n        options={existingSystems}\n        value={get(addNodeForm, `connections[${id}].connectedTo`)}\n        onChange={(event, value) => {\n          updateNodeForm({\n            path: `connections[${id}].connectedTo`,\n            value: { key: value.key, text: value.text }\n          })\n        }}\n      />\n      <Dropdown\n        label='Connection Type'\n        options={[\n          { key: 'oneway', text: 'One Way Interface' },\n          { key: 'twoway', text: 'Two Way Interface' },\n          { key: 'builtin', text: 'Built In Interface' },\n          { key: 'custom', text: 'Custom Interface' }\n        ]}\n        value={get(addNodeForm, `connections[${id}].connectionType`)}\n        onChange={(event, value) => {\n          updateNodeForm({\n            path: `connections[${id}].connectionType`,\n            value: { key: value.key, text: value.text, color: value.color }\n          })\n        }}\n      />\n      <IconButton\n        iconProps={{ iconName: 'Delete' }}\n        onClick={handleRemove}\n      />\n    </ConnectionContainer>\n  )\n}\n\nconst getSystems = () => {\n  const nodes = NodeManager.getNodes()\n  return nodes.map(node => ({ key: node.key, text: node.name }))\n}\n\nexport const AddNodeForm = props => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [existingSystems, setExistingSystems] = useState(getSystems())\n  const [state, connDispatch] = useReducer(connectionReducer, { connections: [] })\n\n  const toggle = () => setIsOpen(!isOpen)\n  const resetForm = () => updateNodeForm({ path: '', value: {} })\n  const resetConnections = () => connDispatch({ type: 'reset' })\n  const [addNodeForm, updateNodeForm] = useReducer(addNodeReducer, {})\n\n  useEvent('toggle-left-panel', toggle)\n  const dismiss = () => {\n    resetForm()\n    resetConnections()\n    setIsOpen(false)\n  }\n\n  const updateExistingSystems = () => {\n    const systems = getSystems()\n    setExistingSystems(systems)\n  }\n\n  const broadcastNodeSave = useEvent('save-node-entry', updateExistingSystems)\n\n  return (\n    <Panel\n      headerText='Add a New System Node'\n      isOpen={isOpen}\n      onDismiss={() => setIsOpen(false)}\n      type={PanelType.medium}\n    >\n      <TextField\n        label='Name'\n        onChange={(event, value) => updateNodeForm({ path: 'name', value })}\n        value={addNodeForm.name || ''}\n      />\n      <Dropdown\n        label='System Type'\n        options={[\n          { key: 'oncampus', text: 'On Campus' },\n          { key: 'cloud', text: 'Cloud' },\n          { key: 'external', text: 'External' }\n        ]}\n        value={addNodeForm.type || ''}\n        onChange={(event, value) => updateNodeForm({ path: 'type', value: value.key })}\n      />\n      <TextField\n        label='Description'\n        multiline\n        rows={4}\n        onChange={(event, value) => updateNodeForm({ path: 'description', value })}\n        value={addNodeForm.description || ''}\n      />\n      {state.connections.map(conn => React.cloneElement(conn, { existingSystems }))}\n      <ActionButton\n        onClick={() => {\n          connDispatch({\n            type: 'add',\n            dispatch: connDispatch,\n            existingSystems,\n            addNodeForm,\n            updateNodeForm\n          })\n        }}\n        iconProps={{ iconName: 'Add' }}\n      >\n        Add Connection\n      </ActionButton>\n      <Stack horizontal horizontalAlign='end' tokens={{ childrenGap: 12 }}>\n        <DefaultButton text='Cancel' onClick={() => {\n          dismiss()\n        }} />\n        <PrimaryButton text='Add System' onClick={() => {\n          NodeManager.addNode({ key: (addNodeForm.name || '').toLowerCase(), ...addNodeForm })\n          broadcastNodeSave()\n          resetConnections()\n          resetForm()\n        }} />\n      </Stack>\n    </Panel>\n  )\n}\n","import React, { useState } from 'react'\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel'\nimport { Stack } from 'office-ui-fabric-react/lib/Stack'\nimport { Text } from 'office-ui-fabric-react/lib/Text'\nimport { useEvent } from '../../hooks'\nimport { NodeManager } from '../../util'\nimport get from 'lodash.get'\n\nconst pullNodeConnections = (node, target) => {\n  const connections = get(node, 'connections', {})\n  const keys = Object.keys(connections)\n  const nodeConnections = keys.reduce((acc, cur) => {\n    let to = get(node, `connections[${cur}].connectedTo.text`, '')\n    const type = get(node, `connections[${cur}].connectionType.text`, '')\n    if (target && to === target) {\n      to = get(node, 'name', '')\n      acc.push(<Connection to={to} type={type} />)\n      return acc\n    } else if (!target) {\n      acc.push(<Connection to={to} type={type} />)\n    }\n\n    return acc\n  }, [])\n\n  return nodeConnections\n}\n\nconst parseConnections = (node) => {\n  if (!node) return []\n  const nodes = NodeManager.getNodes()\n  const connectionsFromThisNode = pullNodeConnections(node)\n\n  const connectionsToThisNode = nodes.reduce((acc, cur) => {\n    const connections = pullNodeConnections(cur, node.name)\n    return [...acc, ...connections]\n  }, [])\n\n  return [...connectionsFromThisNode, ...connectionsToThisNode]\n}\n\nconst Connection = ({ to, type }) => {\n  return (\n    <Text>{to} - {type}</Text>\n  )\n}\n\nexport const NodeDetail = props => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [node, setNode] = useState(null)\n  const displayNode = (node) => {\n    setNode(node)\n    setIsOpen(true)\n  }\n  const closePanel = () => setIsOpen(false)\n\n  useEvent('display-node-details', displayNode)\n  const deselectActiveNode = useEvent('deselect-active-node')\n  const name = get(node, 'name', '')\n  const description = get(node, 'description', '')\n  const connections = parseConnections(node)\n\n  return (\n    <Panel\n      isOpen={isOpen}\n      onDismiss={() => {\n        deselectActiveNode()\n        closePanel()\n      }}\n      isLightDismiss\n      type={PanelType.customNear}\n      customWidth={400}\n      headerText={name}\n    >\n      <Stack tokens={{ childrenGap: 8 }}>\n        <Stack tokens={{ childrenGap: 4 }}>\n          <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Description</Text>\n          <Text>{description}</Text>\n        </Stack>\n        <Stack>\n          <Text style={{ textDecoration: 'underline' }} variant='mediumPlus'>Connections</Text>\n          {connections}\n        </Stack>\n      </Stack>\n    </Panel>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { SystemsGraph, NodeDetail, AddNodeForm, CommandBar } from './components'\n\nconst Page = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: #e8e3db;\n`\nfunction App () {\n  return (\n    <Page>\n      <CommandBar />\n      <AddNodeForm />\n      <NodeDetail />\n      <SystemsGraph />\n    </Page>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons'\nimport App from './App'\n\ninitializeIcons()\n\nrender(<App />, document.getElementById('root'))\n"],"sourceRoot":""}